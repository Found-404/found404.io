<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BOMplus</title>
    <url>/found404.io/2022/06/27/BOMplus/</url>
    <content><![CDATA[<h1 id="BOM操作"><a href="#BOM操作" class="headerlink" title="BOM操作"></a>BOM操作</h1><p><img src="https://img-blog.csdnimg.cn/d4d075ee9982467290c30398aa3eee59.png" alt="png"><br><img src="https://img-blog.csdnimg.cn/4d2bfa28bf4148d987d27444373e4d19.png" alt="png"></p>
<span id="more"></span>

<h2 id="什么是BOM？"><a href="#什么是BOM？" class="headerlink" title="什么是BOM？"></a>什么是BOM？</h2><p>BOM<code>（Browser Object Model）</code>即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其顶级对象是 window，并且每个对象都提供了很多方法与属性</p>
<h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><p>window 对象给我们提供了一个 location 属性用于获取或设置窗体的 URL，并且可以用于解析 URL</p>
<table>
<thead>
<tr>
<th align="center">location对象属性</th>
<th align="center">返回值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">location.href</td>
<td align="center">获取或设置整个url地址</td>
</tr>
<tr>
<td align="center">location.host</td>
<td align="center">返回主机(域名) <del><a href="http://www.baidu.com/">www.baidu.com</a></del></td>
</tr>
<tr>
<td align="center">location.port</td>
<td align="center">获取或设置整个url地址</td>
</tr>
<tr>
<td align="center">location.pathname</td>
<td align="center">返回路径</td>
</tr>
<tr>
<td align="center">location.search</td>
<td align="center">返回参数</td>
</tr>
<tr>
<td align="center">location.hash</td>
<td align="center">返回片段 #后面内容，常用于链接锚点</td>
</tr>
<tr>
<td align="center">location.protocol</td>
<td align="center">返回协议</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">location对象方法</th>
<th align="center">返回值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">location.assign()</td>
<td align="center">跟href一样，可以跳转页面(也称为重定向页面)</td>
</tr>
<tr>
<td align="center">location.replace()</td>
<td align="center">替换当前页面，因为不记录历史，所以不能后退页面</td>
</tr>
<tr>
<td align="center">location.reload()</td>
<td align="center">重新加载页面，相当于刷新按钮或者f5 如果参数为true 强制刷新ctrl+f5</td>
</tr>
</tbody></table>
<hr>
<h3 id="点击按钮跳转页面案例"><a href="#点击按钮跳转页面案例" class="headerlink" title="点击按钮跳转页面案例:"></a>点击按钮跳转页面案例:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>location<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         location.<span class="property">href</span> = <span class="string">&#x27;https://blog.csdn.net/WYF857446152/article/details/124860285?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165595085816782391824458%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165595085816782391824458&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-124860285-null-null.142^v20^control,157^v15^new_3&amp;utm_term=bom%E6%93%8D%E4%BD%9C&amp;spm=1018.2226.3001.4187&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="location-search接收返回的参数实现数据交互案例："><a href="#location-search接收返回的参数实现数据交互案例：" class="headerlink" title="location.search接收返回的参数实现数据交互案例："></a>location.search接收返回的参数实现数据交互案例：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;64-index.html&quot;</span>&gt;</span></span><br><span class="line">        用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">search</span>); <span class="comment">// ?uname=andy</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.先去掉？ substr(&#x27;起始的位置&#x27;,截取几个字符);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> params = location.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>); <span class="comment">// uname=andy</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(params);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.利用等号把字符串分割为数组 split(&#x27;=&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> arr = params.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.把数据写进div中</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">innerHTML</span> = arr[<span class="number">1</span>] + <span class="string">&#x27;欢迎您!&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><p>navigator 对象包含有关浏览器的信息，它有很多属性，我们最常用的是 <code>userAgent</code>，该属性可以返回由客户机发送服务器的 <code>user-agent</code> 头部的值。</p>
<h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><p>window对象给我们提供了一个 history对象，与浏览器历史记录进行交互。该对象包含用户（在浏览器窗口中）访问过的URL。</p>
<table>
<thead>
<tr>
<th align="center">history对象方法</th>
<th align="center">返回值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">back()</td>
<td align="center">可以后退功能</td>
</tr>
<tr>
<td align="center">forward()</td>
<td align="center">前进功能</td>
</tr>
<tr>
<td align="center">go(参数)</td>
<td align="center">前进后退功能 参数如果是1前进一个页面如果是-1后退一个页面</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>BOM</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS函数</title>
    <url>/found404.io/2022/06/27/CSS%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="attr"><a href="#attr" class="headerlink" title="attr()"></a>attr()</h1><p><strong>获取元素内属性的值</strong></p>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&quot;前&quot;</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 鼠标移入H1后伪元素content发生改变 */</span></span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 从行内属性获取值 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="built_in">attr</span>(data-text);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">data-text</span>=<span class="string">&quot;后&quot;</span>&gt;</span>鼠标移入<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="calc"><a href="#calc" class="headerlink" title="calc()"></a>calc()</h1><p><strong>css内置计算器</strong></p>
<h1 id="var"><a href="#var" class="headerlink" title="var()"></a>var()</h1><p>首先：CSS 变量可以有全局或局部作用域。</p>
<p>全局变量可以在整个文档中进行访问&#x2F;使用，而局部变量只能在声明它的选择器内部使用。</p>
<p>如需创建具有全局作用域的变量，请在 :root 选择器中声明它。 :root 选择器匹配文档的根元素。</p>
<p>如需创建具有局部作用域的变量，请在将要使用它的选择器中声明它。</p>
<p><a href="https://blog.csdn.net/Serena_tz/article/details/114838650"><strong>🔗🔗原文档🔗🔗</strong></a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">         <span class="selector-pseudo">:root</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attr">--blue</span>: blue;</span></span><br><span class="line"><span class="language-css">            <span class="attr">--red</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">var</span>(--blue);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">var</span>(--red);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>AJAX</title>
    <url>/found404.io/2022/06/27/AJAX/</url>
    <content><![CDATA[<h1 id="基于jQuery的AJAX"><a href="#基于jQuery的AJAX" class="headerlink" title="基于jQuery的AJAX"></a>基于jQuery的AJAX</h1><h2 id="URL地址组成部分"><a href="#URL地址组成部分" class="headerlink" title="URL地址组成部分"></a>URL地址组成部分</h2><blockquote>
<ul>
<li>1.客户端与服务器之间的通讯协议    http </li>
<li>2.存有该资源的服务器名称          域名 </li>
<li>3.资源在服务器上具体的存放位置    域名之后</li>
</ul>
</blockquote>
<span id="more"></span>

<h2 id="客户端请求服务器的方式"><a href="#客户端请求服务器的方式" class="headerlink" title="客户端请求服务器的方式"></a>客户端请求服务器的方式</h2><blockquote>
<ul>
<li>get:请求常用于获取服务器(向服务器要资源)</li>
<li>eg：根据url地址从服务器获取html文件，css文件，js文件，图片文件，数据资源等</li>
<li>post请求常用于向服务器提交数据(往服务器发送数据)</li>
<li>eg：登陆时向服务器提交登录信息</li>
</ul>
</blockquote>
<h2 id="jQuery中的AJAX"><a href="#jQuery中的AJAX" class="headerlink" title="jQuery中的AJAX"></a>jQuery中的AJAX</h2><h3 id="get-获取数据"><a href="#get-获取数据" class="headerlink" title="$.get()获取数据"></a>$.get()获取数据</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(url,[data],[callback])</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>url          字符串型    <strong>必须</strong>    要请求的资源地址</li>
<li>data         Object      <strong>非必须</strong>  请求资源期间要携带的参数</li>
<li>callback     function    <strong>非必须</strong>  请求成功时回调函数</li>
</ul>
</blockquote>
<p><strong>代码示例：</strong></p>
<p><strong>发起不带参数的请求：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnGet&quot;</span>&gt;</span>发起不带参数的请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#btnGet&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">get</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//res 是请求服务器返回来的数据</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>发起带参数的请求：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnGet&quot;</span>&gt;</span>发起带参数的请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#btnGet&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">get</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,&#123;<span class="attr">id</span>:<span class="number">1</span>&#125;,<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 此时的res是服务器id为1的对象数据</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="post-发送post请求"><a href="#post-发送post请求" class="headerlink" title="$.post()发送post请求"></a>$.post()发送post请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">post</span>(url,[data],[callback])</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>url          字符串型    <strong>必须</strong>    提交数据的地址</li>
<li>data         Object      <strong>非必须</strong>  要提交的数据</li>
<li>callback     function    <strong>非必须</strong>  数据提交成功的回调函数</li>
</ul>
</blockquote>
<p><strong>代码示例：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;postBtn&quot;</span>&gt;</span>post提交数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#postBtn&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">post</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/addbooks&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">bookname</span>: <span class="string">&#x27;水浒传&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">author</span>: <span class="string">&#x27;施耐庵&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">publisher</span>: <span class="string">&#x27;天津出版社&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;, <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="ajax-函数"><a href="#ajax-函数" class="headerlink" title="$ajax()函数"></a>$ajax()函数</h2><blockquote>
<p>相比于$.get0 和$.post0函数, jQuery中提供的$.ajax()函数,是一个功能比较综合的函数， 它允许我们对Ajax请求进行更详细的配置。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//请求的方式 如 get 或 post</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//请求的url地址</span></span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;, <span class="comment">//这次请求携带的数据</span></span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;, <span class="comment">//请求完成过后回调函数</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>代码示例：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//GET请求</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#ajaxGet&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//POST请求</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#ajaxPost&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;PSOT&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/addbooks&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">bookname</span>: <span class="string">&#x27;水浒传&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">author</span>: <span class="string">&#x27;施耐庵&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">publisher</span>: <span class="string">&#x27;天津出版社&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><blockquote>
<p>使用Ajax请求数据时，被请求的URL地址，就叫做数据接口(简称接口)。同时，每个接口必须有请求方式(get&#x2F;post)。</p>
<p><a href="https://web.postman.co/workspace/My-Workspace~71c70ac7-23a9-4d8c-8f5b-ccd1b8d539e6/overview?workspaceOnboarding=show">接口测试工具 Postman</a></p>
</blockquote>
<h3 id="什么是接口文档？"><a href="#什么是接口文档？" class="headerlink" title="什么是接口文档？"></a>什么是接口文档？</h3><blockquote>
<p>接口文档，顾名思义就是接口的说明文档，它是我们调用接口的依据。好的接口文档包含了对接口URL,参数以及输出内容的说明,我们参照接口文档就能方便的知道接口的作用，以及接口如何进行调用。</p>
</blockquote>
<p>接口文档可以包含很多信息，也可以按需进行精简，不过, 一个合格的接口文档,应该包含以下6项内容,从而为接口的调用提供依据:</p>
<blockquote>
<ol>
<li><p>接口名称：用来标识各个接口的简单说明，如登录接口，获取图书列表接口等。</p>
</li>
<li><p>接口URL：接口的调用地址。</p>
</li>
<li><p>调用方式： 接口的调用方式，如<strong>GET</strong>或<strong>POST</strong>.</p>
</li>
<li><p>参数格式：接口需要传递的参数，每个参数必须包含参数名称、参数类型、是否必选、参数说明这4项内容。</p>
</li>
<li><p>响应格式：接口的返回值的详细描述，一 般包含数据名称、数据类型、说明3项内容。</p>
</li>
<li><p>返回示例 (可选)：通过对象的形式，例举服务器返回数据的结构。</p>
</li>
</ol>
</blockquote>
<h2 id="form表单"><a href="#form表单" class="headerlink" title="form表单"></a>form表单</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表单标签 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表单域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text &quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password &quot;</span> <span class="attr">name</span>=<span class="string">&quot; &quot;</span> <span class="attr">id</span>=<span class="string">&quot; &quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表单提交 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送 &quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>form的属性:</strong><br><strong>action</strong>  规定当提交表单时候向何处发送表单数据  如果没有内容则默认当前URL地址</p>
<table>
<thead>
<tr>
<th align="center">target：</th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">_blank</td>
<td align="center">在新窗口中打开</td>
</tr>
<tr>
<td align="center">_self</td>
<td align="center">默认在相同框架中打开</td>
</tr>
<tr>
<td align="center">_parent</td>
<td align="center">在父框架集中打开</td>
</tr>
<tr>
<td align="center">_top</td>
<td align="center">在整个窗口中打开</td>
</tr>
<tr>
<td align="center">framename</td>
<td align="center">在指定的框架中打开</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">method:</th>
<th align="center">GET&#x2F;POST</th>
</tr>
</thead>
<tbody><tr>
<td align="center">GET</td>
<td align="center">get适合提交少量简单数据</td>
</tr>
<tr>
<td align="center">POST</td>
<td align="center">post适合提交大量复杂包含文件上传的数据</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">enctype:</th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">application&#x2F;x-www-form-urlencoded</td>
<td align="center">在发送前编码所有字符</td>
</tr>
<tr>
<td align="center">multipart&#x2F;form-data</td>
<td align="center">部队字符编码 在使用包含文件上传控件的表单时必须使用该值(文件上传)</td>
</tr>
<tr>
<td align="center">text&#x2F;plain</td>
<td align="center">空格转换为“+”加号 但不对特殊字符编码</td>
</tr>
</tbody></table>
<h3 id="什么是表单的同步提交"><a href="#什么是表单的同步提交" class="headerlink" title="什么是表单的同步提交"></a>什么是表单的同步提交</h3><p>通过点击submit按钮 触发表单提交的操作 从而使页面跳转到action URL的行为叫做表单的同步提交:</p>
<p><strong>同步提交缺点:</strong></p>
<blockquote>
<ol>
<li>整个页面跳转 </li>
<li>页面之前的状态和数据会丢失</li>
</ol>
</blockquote>
<p><strong>解决方法:</strong></p>
<blockquote>
<ul>
<li>表单只负责采集数据</li>
<li>Ajax负责将数据提交到服务器</li>
</ul>
</blockquote>
<h3 id="监听表单提交事件和阻止默认行为"><a href="#监听表单提交事件和阻止默认行为" class="headerlink" title="监听表单提交事件和阻止默认行为"></a>监听表单提交事件和阻止默认行为</h3><blockquote>
<p><strong>serialize( )</strong> 获取表单中的所有数据</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">id</span>=<span class="string">&quot;f1&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 监听表单提交事件</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 第一种方式</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// $(&quot;#f1&quot;).submit(function(e) &#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     alert(&#x27;第一种&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     // 第一种阻止表单默认提交行为</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     e.preventDefault();</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 第二种方式</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#f1&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;第二种&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 第二种阻止表单默认提交行为(跟第一种一样)</span></span></span><br><span class="line"><span class="language-javascript">                e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 利用serialize()获取表单中的所有数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 前提是被获取表单必须有name属性</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> shujv = $(<span class="variable language_">this</span>).<span class="title function_">serialize</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(shujv);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="jQuery文件上传"><a href="#jQuery文件上传" class="headerlink" title="jQuery文件上传"></a>jQuery文件上传</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文件选择框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上传文件按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnUpload&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../loadingImgGif/20140524124233131.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;loading&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ajaxStart监听到Ajax请求被发起了</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">document</span>).<span class="title function_">ajaxStart</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#loading&#x27;</span>).<span class="title function_">show</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ajaxStop监听到AJAX完成的事件</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">document</span>).<span class="title function_">ajaxStop</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#loading&#x27;</span>).<span class="title function_">hide</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#btnUpload&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 将jQuery转换为DOM</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> files = $(<span class="string">&#x27;#file&#x27;</span>)[<span class="number">0</span>].<span class="property">files</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (files.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;请选择文件后上传&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 向formData中追加文件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript">            fd.<span class="title function_">append</span>(<span class="string">&#x27;avatar&#x27;</span>, files[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 发起jQuery的AJAX请求，上传文件</span></span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/upload/avatar&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: fd,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 不修改content-type属性，使用FormData默认的Content-Type值</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">processData</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 不对FormData中的数据进行url编码，而是将FormData数据原样发送到服务器</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">contentType</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="初识XMLHttpRequest"><a href="#初识XMLHttpRequest" class="headerlink" title="初识XMLHttpRequest"></a>初识XMLHttpRequest</h1><blockquote>
<p><strong>XMLHttpRequest</strong> (简称xhr) 是浏览器提供的Javascript 对象，通过它，可以请求服务器上的数据资源。之前所学的jQuery中的Ajax函数，就是基于xhr对象封装出来的。</p>
</blockquote>
<h2 id="使用xhr发送get请求"><a href="#使用xhr发送get请求" class="headerlink" title="使用xhr发送get请求"></a>使用xhr发送get请求</h2><p><strong>步骤：</strong></p>
<blockquote>
<ol>
<li>创建xhr对象</li>
<li>调用xhr.open()函数</li>
<li>调用xhr.send()函数</li>
<li>监听xhr.onreadystatechange事件</li>
</ol>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1.创建xhr对象</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">// 2.调用xhr.open()函数</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>);</span><br><span class="line">    <span class="comment">// 3.调用xhr.send()函数</span></span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">    <span class="comment">// 4.监听xhr.onreadystatechange事件</span></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 固定判断条件</span></span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取服务器相应的数据成功</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">            <span class="comment">// 传过来一个JSON结构的字符串</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="XMLHttpRequest对象的readyState属性："><a href="#XMLHttpRequest对象的readyState属性：" class="headerlink" title="XMLHttpRequest对象的readyState属性："></a>XMLHttpRequest对象的readyState属性：</h3><table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">状态</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">UNSENT</td>
<td align="center">XMLHttpRequest对象已被创建，但尚未调用open方法</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">OPENED</td>
<td align="center">open()方法已经被调用</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">HEADERS_RECEIVED</td>
<td align="center">send()方法已经被调用,响应头也已经被接收</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">LOADING</td>
<td align="center">数据接收中,此时response属性中已经包含部分数据</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">DONE</td>
<td align="center">Ajax请求完成,这就意味着数据传输已经彻底完成或失败</td>
</tr>
</tbody></table>
<h2 id="发起带参数的get请求"><a href="#发起带参数的get请求" class="headerlink" title="发起带参数的get请求"></a>发起带参数的get请求</h2><p><strong>代码示例：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 在url末尾添加向服务器发送信息的字符串  ?id=1</span></span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks?id=1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 固定判断条件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取服务器相应的数据成功</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>带一个参数</p>
<p><a href="http://www.liulongbin.top:3006/api/getbooks?id=1">http://www.liulongbin.top:3006/api/getbooks?id=1</a></p>
<p>带二个参数</p>
<p><a href="http://www.liulongbin.top:3006/api/getbooks?id=1&amp;bookname=%E8%A5%BF%E6%B8%B8%E8%AE%B0">http://www.liulongbin.top:3006/api/getbooks?id=1&amp;bookname=西游记</a></p>
</blockquote>
<p><strong>GET请求携带参数的本质:</strong></p>
<blockquote>
<p>无论使用$.ajax(), 还是使用$.get(),又或者直接使用xhr对象发起GET请求，当需要携带参数的时候，本质上,都是直<br>接将参数以查询字符串的形式，追加到URL地址的后面，发送到服务器的。</p>
</blockquote>
<h3 id="URL的编码与解码"><a href="#URL的编码与解码" class="headerlink" title="URL的编码与解码"></a>URL的编码与解码</h3><blockquote>
<p>1.什么是URL编码：</p>
<ul>
<li>URL地址中，只允许出现英文相关的字母、标点符号、数字,因此，在URL地址中不允许出现中文字符。</li>
<li>如果URL中需要包含中文这样的字符，则必须对中文字符进行编码(转义)。</li>
<li>URL编码的原则:使用安全的字符(没有特殊用途或者特殊意义的可打印字符)去表示那些不安全的字符。</li>
<li>URL编码原则的通俗理解:使用英文字符去表示非英文字符。</li>
</ul>
</blockquote>
<p><code>http://www.liulongbin.top:3006/api/getbooks?id=1&amp;bookname=西游记</code></p>
<p>👇👇👇经过url编码之后，url地址变成了如下格式👇👇👇</p>
<p><code>http://www.liulongbin.top:3006/api/getbooks?id=1&amp;bookname=%E8%A5%BF%E6%B8%B8%E8%AE%B0</code></p>
<blockquote>
<p>2.如何对URL进行编码与解码</p>
<ul>
<li>浏览器提供了URL编码与解码的API,分别是:</li>
<li><strong>encodeURI( )</strong>  编码的函数</li>
<li><strong>decodeURI( )</strong>  解码的函数</li>
</ul>
</blockquote>
<p><strong>示例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">encodeURI</span>(<span class="string">&#x27;黑马程序员&#x27;</span>)); <span class="comment">//%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">decodeURI</span>(<span class="string">&#x27;%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98&#x27;</span>)); <span class="comment">// 黑马程序员</span></span><br></pre></td></tr></table></figure>

<h2 id="使用xhr发送post请求"><a href="#使用xhr发送post请求" class="headerlink" title="使用xhr发送post请求"></a>使用xhr发送post请求</h2><blockquote>
<p>步骤:</p>
<ol>
<li>创建<strong>xhr</strong>对象</li>
<li>调用 <strong>xhr.open()</strong> 函数</li>
<li>设置<strong>Content-Type</strong>属性(固定写法)</li>
<li>调用 <strong>xhr.send()</strong> 函数，同时指定要发送的数据（携带的参数）</li>
<li>监听<strong>xhr.onreadystatechange</strong>事件</li>
</ol>
</blockquote>
<p><strong>代码示例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.创建xhr对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">// 2.调用.open()方法</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>);</span><br><span class="line"><span class="comment">// 3.设置Content-Type属性(固定写法)</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="line"><span class="comment">// 4.调用xhr.send()函数</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;bookname=三体&amp;author=刘慈欣&amp;publisher=河南图书&#x27;</span>);</span><br><span class="line"><span class="comment">// 5.监听事件</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据交换格式："><a href="#数据交换格式：" class="headerlink" title="数据交换格式："></a>数据交换格式：</h2><p><strong>什么是XML?</strong><br>XML的英文全称是EXtensible Markup Language,即可扩展标记语言。因此，XML 和HTML类似，也是一种标记语言。</p>
<blockquote>
<ul>
<li>虽然html和XML都是标记语言.但是两者没有任何关系</li>
<li>HTML被设计用来描述网页上的内容,就是网页内容的载体 </li>
<li>XML被设计用来传输和 存储数据，是数据的载体</li>
</ul>
</blockquote>
<p><strong>XML缺点：</strong></p>
<blockquote>
<ul>
<li>XML格式臃肿,和数据无关的代码多,体积大，传输效率低</li>
<li>在Javascript中解析XML比较麻烦 –&gt;</li>
</ul>
</blockquote>
<p><strong>什么是JSON?:</strong></p>
<blockquote>
<p>概念:</p>
<p>JSON的英文全称是JavaScript Object Notation,即”JavaScript 对象表示法”。简单来讲,JSON就是Javascript对象和数组的字符串表示法，它使用文本表示一个JS对象或数组的信息，因此,JSON的本质是字符串。</p>
</blockquote>
<blockquote>
<p>作用: </p>
<p>JSON 是一种轻量级的文本数据交换格式，在作用上类似于XML,专门用于存储和传输数据，但是JSON比XML更小更快、更易解析。</p>
</blockquote>
<blockquote>
<p>现状: </p>
<p>JSON是在2001年开始被推广和使用的数据格式，到现今为止，JSON已经成为了主流的数据交换格式。</p>
</blockquote>
<h2 id="JSON的两种结构"><a href="#JSON的两种结构" class="headerlink" title="JSON的两种结构"></a>JSON的两种结构</h2><p><strong>1.对象结构:</strong></p>
<blockquote>
<p>对象结构在JSON中表示为{}括起来的内容。数据结构为 <u>{ key: value, key: value, …}</u> 的键值对结构。其中, key 必须是使用英文的双引号包事的字符串, value 的数据类型可以是数字、字符串、布尔值、null. 数组、对象6种类型。</p>
</blockquote>
<p><strong>2.数组结构:</strong></p>
<blockquote>
<p>数组结构:数组结构在JSON中表示为[]括起来的内容。数据结构为 <u>[“java””javascript”, 30, true … ]</u> 数组中数据的类型可以是数字、字符串、布尔值、null. 数组、对象6种类型。</p>
</blockquote>
<p><strong>3. JSON语法注意事项</strong></p>
<blockquote>
<ol>
<li>属性名必须使用双引号包裹</li>
<li>字符串类型的值必须使用双引号包裹</li>
<li>JSON中不允许使用单引号表示字符串</li>
<li>JSON中不能写注释</li>
<li>JSON的最外层必须是对象或数组格式</li>
<li>不能使用undefined或函数作为JSON的值</li>
</ol>
</blockquote>
<blockquote>
<ul>
<li><strong>JSON的作用:</strong> 在计算机与网络之间存储和传输数据。</li>
<li><strong>JSON的本质:</strong> 用字符串来表示Javascript对象数据或数组数据</li>
</ul>
</blockquote>
<h3 id="JSON和js对象的关系"><a href="#JSON和js对象的关系" class="headerlink" title="JSON和js对象的关系"></a>JSON和js对象的关系</h3><blockquote>
<p>JSON是JS对象的字符串表示法，它使用文本表示个JS对象的信息，本质是一个字符串。</p>
</blockquote>
<p><strong>例如:</strong></p>
<ul>
<li><strong>JSON.stringify(obj2)</strong>&amp;emsp;&amp;emsp;序列化(对象转换为字符串)</li>
<li><strong>JSON.parse(jsonStr)</strong>&amp;emsp;&amp;emsp;反序列化 (字符串转换为对象)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是一个对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 这是一个json字符串，本质上是一个字符串</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;a&quot;:&quot;hello&quot;,&quot;b&quot;:&quot;world&quot;&#125;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JSON和js对象互转</span></span><br><span class="line"><span class="keyword">var</span> jsonStr = <span class="string">&#x27;&#123;&quot;a&quot;:&quot;hello&quot;,&quot;b&quot;:&quot;world&quot;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON转换为js  叫做反序列化 (字符串转换为对象)</span></span><br><span class="line"><span class="keyword">var</span> objnew = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objnew);</span><br><span class="line"></span><br><span class="line"><span class="comment">// js转换为JSON  叫做序列化(对象转换为字符串)</span></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">    <span class="attr">c</span>: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> string = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="演示JSON-parse函数的应用场景"><a href="#演示JSON-parse函数的应用场景" class="headerlink" title="演示JSON.parse函数的应用场景"></a>演示JSON.parse函数的应用场景</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>);</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 固定判断条件</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取服务器相应的数据成功</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">        <span class="comment">// 传输过来JSON结构的字符串</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 被转换成对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="XMLHttpRequest-Level2的新特性"><a href="#XMLHttpRequest-Level2的新特性" class="headerlink" title="XMLHttpRequest Level2的新特性"></a>XMLHttpRequest Level2的新特性</h2><p>旧版<strong>XMLHttpRequest</strong>的缺点</p>
<blockquote>
<p>只支持文本数据传输，无法用来读取和上传文件传送和接收数据时，没有进度信息，只提示有没有完成</p>
</blockquote>
<p><strong>-XMLHttpRequest Level2的新特性</strong></p>
<blockquote>
<ol>
<li>可以设置HTTP请求的时限</li>
<li>可以使用formData对象管理表单数据</li>
<li>可以上传文件</li>
<li>可以获得数据传输的进度信息</li>
</ol>
</blockquote>
<p>有时，Ajax 操作很耗时，而且无法预知要花少时间。如果网速很慢，用户可能要等很久。新版本的XMLHttpRequest对象，增加了timeout 属性，可以设置HTTP请求的时限:</p>
<h3 id="设置HTTP请求的时限"><a href="#设置HTTP请求的时限" class="headerlink" title="设置HTTP请求的时限:"></a>设置HTTP请求的时限:</h3><p><strong>代码示例：</strong></p>
<ul>
<li>设置超时时间10ms<ul>
<li><strong>xhr.timeout &#x3D; 10;</strong></li>
</ul>
</li>
<li>设置超时后触发的函数<ul>
<li><strong>xhr.ontimeout &#x3D; function( ) { };</strong></li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1.创建xhr对象</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">// 设置超时时间为10毫秒</span></span><br><span class="line">    xhr.<span class="property">timeout</span> = <span class="number">10</span>;</span><br><span class="line">    xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求超时!&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 2.调用xhr.open()函数</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>);</span><br><span class="line">    <span class="comment">// 3.调用xhr.send()函数</span></span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">    <span class="comment">// 4.监听xhr.onreadystatechange事件</span></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 固定判断条件</span></span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取服务器相应的数据成功</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">            <span class="comment">// 传过来一个JSON结构的字符串</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="FormData对象的基本使用："><a href="#FormData对象的基本使用：" class="headerlink" title="FormData对象的基本使用："></a>FormData对象的基本使用：</h3><blockquote>
<ol>
<li>调用 <strong>append</strong> 函数向fd中追加数据</li>
<li>向 <strong>send( )</strong> 函数中追加数据</li>
</ol>
</blockquote>
<p>代码示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建FormData实例</span></span><br><span class="line"><span class="keyword">var</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line"><span class="comment">// 调用append函数 向fd中追加数据</span></span><br><span class="line">fd.<span class="title function_">append</span>(<span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;zs&#x27;</span>);</span><br><span class="line">fd.<span class="title function_">append</span>(<span class="string">&#x27;upwd&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/formdata&#x27;</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>(fd);</span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 固定判断条件</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取服务器相应的数据成功</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>));</span><br><span class="line">        <span class="comment">// 传过来一个JSON结构的字符串</span></span><br><span class="line">        <span class="comment">// 使用反序列化转换</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="FormData获取表单中的数据："><a href="#FormData获取表单中的数据：" class="headerlink" title="FormData获取表单中的数据："></a>FormData获取表单中的数据：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upwd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 通过dom操作获取到form表单元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#form1&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        form.<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 阻止表单默e认提交</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            e.<span class="title function_">preventDefault</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 创建formData 快速获取到form表单中的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>(form);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/formdata&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="title function_">send</span>(fd);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 固定判断条件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// 获取服务器相应的数据成功</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// 传过来一个JSON结构的字符串</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// 使用反序列化转换</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="XMLHttpRequest-Level2上传文件"><a href="#XMLHttpRequest-Level2上传文件" class="headerlink" title="XMLHttpRequest Level2上传文件"></a>XMLHttpRequest Level2上传文件</h3><p>新版XML HttpRequest对象，不仅可以发送文本信息，还可以上传文件</p>
<p><strong>实现步骤:</strong></p>
<ol>
<li>定义UI结构</li>
<li>验证是否选择了文件</li>
<li>向FormData中追加文件</li>
<li>使用xhr发起上传文件的请求</li>
<li>监听onreadystatechange事件</li>
</ol>
<p><strong>代码示例：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.定义UI结构 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上传文件按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnUpload&quot;</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- img标签 显示上传后的图片 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.验证是否选择了文件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取上传文件的按钮</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btnUpload = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btnUpload&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 添加点击事件</span></span></span><br><span class="line"><span class="language-javascript">        btnUpload.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取到用户选择的文件列表</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> files = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#file1&#x27;</span>).<span class="property">files</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(files);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (files.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;请选择上传的文件&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3.向FormData中追加文件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript">            fd.<span class="title function_">append</span>(<span class="string">&#x27;avatar&#x27;</span>, files[<span class="number">0</span>]); <span class="comment">//avatar翻译为头像</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 4.使用xhr发起上传文件的请求</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/upload/avatar&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">send</span>(fd);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 5.监听onreadystatechange事件</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (data.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 上传成功</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;上传成功&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#img&#x27;</span>).<span class="property">src</span> = <span class="string">&#x27;http://www.liulongbin.top:3006&#x27;</span> + data.<span class="property">url</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 上传失败</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;图片上传失败&#x27;</span> + data.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="显示文件上传进度"><a href="#显示文件上传进度" class="headerlink" title="显示文件上传进度"></a>显示文件上传进度</h3><p><strong>主要使用到：</strong></p>
<ol>
<li><strong>onprogress</strong>文件上传中事件</li>
<li><strong>onload</strong>文件上传成功事件</li>
<li>以及内置<strong>event</strong>对象<ul>
<li><u>e.lengthComputable</u>返回布尔值  <em>判断传输数据是否是可以计算长度</em></li>
<li><u>e.loaded</u>已经上传的进度</li>
<li><u>e.total</u>总进度</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.定义UI结构 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上传文件按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnUpload&quot;</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- bootstrap中的进度条 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:500px; margin:10px; &quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar progress-bar-striped active&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 0%&quot;</span> <span class="attr">id</span>=<span class="string">&quot;percent&quot;</span>&gt;</span></span><br><span class="line">            0%</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- img标签 显示上传后的图片 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.验证是否选择了文件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取上传文件的按钮</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btnUpload = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btnUpload&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 添加点击事件</span></span></span><br><span class="line"><span class="language-javascript">        btnUpload.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取到用户选择的文件列表</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> files = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#file1&#x27;</span>).<span class="property">files</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(files);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (files.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;请选择上传的文件&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3.向FormData中追加文件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript">            fd.<span class="title function_">append</span>(<span class="string">&#x27;avatar&#x27;</span>, files[<span class="number">0</span>]); <span class="comment">//avatar翻译为头像</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 4.使用xhr发起上传文件的请求</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 监听文件上传进度------------------------------------------------------------------</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// onprogress文件上传中事件</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">upload</span>.<span class="property">onprogress</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// e.lengthComputable返回布尔值  判断传输数据是否是可以计算长度</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (e.<span class="property">lengthComputable</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 计算出上传的进度</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// e.loaded 已将上传的进度</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// e.total  总进度</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> procent = <span class="title class_">Math</span>.<span class="title function_">ceil</span>((e.<span class="property">loaded</span> / e.<span class="property">total</span>) * <span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// console.log(procent + &#x27;%&#x27;);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// !!!!!!!!!!!!!!!动态设置进度条!!!!!!!!!!!!!!!</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// attr()jQuery封装的设置自定义属性方法</span></span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&#x27;#percent&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;width:&#x27;</span> + procent + <span class="string">&#x27;%&#x27;</span>).<span class="title function_">html</span>(procent + <span class="string">&#x27;%&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// onload文件上传成功事件</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">upload</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&#x27;#percent&#x27;</span>).<span class="title function_">removeClass</span>().<span class="title function_">addClass</span>(<span class="string">&#x27;progress-bar progress-bar-success&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 监听文件上传进度------------------------------------------------------------------</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/upload/avatar&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">send</span>(fd);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 5.监听onreadystatechange事件</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (data.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 上传成功</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;上传成功&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#img&#x27;</span>).<span class="property">src</span> = <span class="string">&#x27;http://www.liulongbin.top:3006&#x27;</span> + data.<span class="property">url</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 上传失败</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;图片上传失败&#x27;</span> + data.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="什么是Axios库"><a href="#什么是Axios库" class="headerlink" title="什么是Axios库"></a>什么是Axios库</h1><p><strong>1.什么是axios</strong></p>
<blockquote>
<p>Axios是专注于网络数据请求的库。<br>相比于原生的XMLHttpRequest对象，axios 简单易用。<br>相比于jQuery, axios 更加轻量化，只专注于网络数据请求。</p>
</blockquote>
<h2 id="发起get请求"><a href="#发起get请求" class="headerlink" title="发起get请求"></a>发起get请求</h2><p><img src="https://i.bmp.ovh/imgs/2022/06/24/7f26d3041bfe3351.png" alt="png"></p>
<h2 id="发起post请求"><a href="#发起post请求" class="headerlink" title="发起post请求"></a>发起post请求</h2><p><img src="https://i.bmp.ovh/imgs/2022/06/24/7f26d3041bfe3351.png" alt="png"></p>
<h2 id="Axios中的ajax请求"><a href="#Axios中的ajax请求" class="headerlink" title="Axios中的ajax请求"></a>Axios中的ajax请求</h2><h3 id="直接使用axios发起GET请求-类似于ajax中的-ajax"><a href="#直接使用axios发起GET请求-类似于ajax中的-ajax" class="headerlink" title="直接使用axios发起GET请求 类似于ajax中的$.ajax()"></a>直接使用axios发起GET请求 类似于ajax中的$.ajax()</h3><p><img src="https://i.bmp.ovh/imgs/2022/06/24/39b2bb46022a6ee5.png" alt="png"></p>
<h3 id="直接使用axios发起POST请求-类似于ajax中的-ajax"><a href="#直接使用axios发起POST请求-类似于ajax中的-ajax" class="headerlink" title="直接使用axios发起POST请求 类似于ajax中的$.ajax()"></a>直接使用axios发起POST请求 类似于ajax中的$.ajax()</h3><p><img src="https://i.bmp.ovh/imgs/2022/06/24/d2d956e157587721.png" alt="png"></p>
<h1 id="了解同源策略和跨域"><a href="#了解同源策略和跨域" class="headerlink" title="了解同源策略和跨域"></a>了解同源策略和跨域</h1><p><strong>1.什么是同源:</strong><br>如果两个页面的协议，域名和端口都相同，则两个页面具有相同的源。</p>
<p>例如:下表给出了相对于<code>http://www.test.com/index.html</code>页面的同源检测:<br><code>http://www.test.com:80/index.html(默认端口80)</code></p>
<p><strong>2.什么是同源策略:</strong><br>同源策略(英文全称Same origin policy) 是浏览器提供的一个安全功能。</p>
<p>MDN官方给定的概念:同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。 这是一个用于隔离潜在恶意文件的重要安全机制。</p>
<p>通俗的理解:浏览器规定，A网站的JavaScript, 不允许和非同源的网站C之间，进行资源的交互</p>
<blockquote>
<p>例如:</p>
<ol>
<li>无法读取非同源网页的Cookie. LocalStorage 和IndexedDB</li>
<li>无法接触非同源网页的DOM</li>
<li>无法向非同源地址发送Ajax请求</li>
</ol>
</blockquote>
<p><strong>什么是跨域:</strong></p>
<blockquote>
<p>同源指的是两个URL的协议、域名、端口-致，反之，则是跨域。<br>出现跨域的根本原因:浏览器的同源策略不允许非同源的URL之间进行资源的交互。<br>网页: <code>http://www.test.com/index.html</code><br>接口: <code>http://www.api.com/userlist</code></p>
</blockquote>
<p><strong>如何实现跨域数据请求:</strong></p>
<blockquote>
<p>现如今,实现跨域数据请求，最主要的两种解决方案，分别是JSONP和CORS.</p>
</blockquote>
<blockquote>
<p><strong>JSONP</strong>:出现的早,兼容性好(兼容低版本IE)。是前端程序员为 了解决跨域问题，被迫想出来的一种临时解决方案。缺点是只支持GET请求,不支持POST请求。</p>
</blockquote>
<blockquote>
<p><strong>CORS</strong>:出现的较晚，它是W3C标准，属于跨域Ajax请求的根本解决方案。支持GET和POST请求。缺点是不兼容某些低版本的浏览器。</p>
</blockquote>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6新特性</title>
    <url>/found404.io/2022/06/30/ES6%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="ES6新特性🥳🥳"><a href="#ES6新特性🥳🥳" class="headerlink" title="ES6新特性🥳🥳"></a>ES6新特性🥳🥳</h1><h2 id="let，const新的声明方式🧐🧐"><a href="#let，const新的声明方式🧐🧐" class="headerlink" title="let，const新的声明方式🧐🧐"></a>let，const新的声明方式🧐🧐</h2><h3 id="Let"><a href="#Let" class="headerlink" title="Let"></a>Let</h3><blockquote>
<ol>
<li>变量不能重复声明</li>
<li>块级作用域</li>
<li>不存在变量提升</li>
<li>不影响作用域链</li>
</ol>
</blockquote>
<span id="more"></span>

<h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><blockquote>
<ol>
<li>一定要赋初始值</li>
<li>一般常量是用大写（潜规则）</li>
<li>常量的值不能修改</li>
<li>块级作用域</li>
<li>对于数组和对象的元素修改，不算是对常量的修改，不会报错</li>
</ol>
</blockquote>
<h2 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h2><blockquote>
<p>ES6 允许按照一定模式从数组和对象中提取值,对变量进行赋值这被称为<strong>结构赋值</strong></p>
</blockquote>
<p><strong>数组的结构：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.数组的结构</span></span><br><span class="line"><span class="keyword">const</span> f4 = [<span class="string">&#x27;小沈阳&#x27;</span>, <span class="string">&#x27;刘能&#x27;</span>, <span class="string">&#x27;赵四&#x27;</span>, <span class="string">&#x27;宋小宝&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [xiao, liu, zhao, song] = f4;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xiao);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(liu);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zhao);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(song);</span><br></pre></td></tr></table></figure>

<p><strong>对象的结构：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">     name,</span><br><span class="line">     age,</span><br><span class="line">     xiaopin</span><br><span class="line">&#125; = zhao;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(xiaopin);</span><br><span class="line">   <span class="title function_">xiaopin</span>();</span><br></pre></td></tr></table></figure>

<p>相当于 zhao.xiaopin(); 替换成了 xiaopin( );不用重复书写zhao.</p>
<h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>不同于es5中的字符串用+拼接，es6的模板字符串可以使用&#96;&#96;符号和${变量名}进行拼接</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;沈腾&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;玛丽&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;魏翔&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;/ul&gt;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.变量拼接</span></span><br><span class="line"><span class="keyword">let</span> lovest = <span class="string">&#x27;魏翔&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> out = <span class="string">`将<span class="subst">$&#123;lovest&#125;</span>替换成lovest`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(out);</span><br></pre></td></tr></table></figure>

<h2 id="对象的简化写法"><a href="#对象的简化写法" class="headerlink" title="对象的简化写法"></a>对象的简化写法</h2><blockquote>
<p>ES6 允许在大括号内直接写入变量和函数 作为对象的属性和方法，这样的书写更加简洁</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> change = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以改变你&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    name,</span><br><span class="line">    change,</span><br><span class="line">    <span class="comment">//旧的写法:</span></span><br><span class="line">    <span class="comment">// import: function() &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(&#x27;声明方法&#x27;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// es6写法:</span></span><br><span class="line">    <span class="keyword">import</span> () &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;声明方法&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(school);</span><br></pre></td></tr></table></figure>

<h2 id="箭头函数以及声明特点🏹🏹"><a href="#箭头函数以及声明特点🏹🏹" class="headerlink" title="箭头函数以及声明特点🏹🏹"></a>箭头函数以及声明特点🏹🏹</h2><blockquote>
<p>es6 允许使用[箭头] (&#x3D;&gt;) 定义函数.</p>
</blockquote>
<p><strong>声明一个函数：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line"><span class="keyword">let</span> reslut = <span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reslut); <span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<ol>
<li>this是静态的,this始终是指向函数声明时所在作用域下的this的值（其父级作用域的this）</li>
<li>不能做为构造实例化对象  就是无法构造函数</li>
<li>不能使用arguments 变量</li>
</ol>
<h3 id="箭头函数的简写"><a href="#箭头函数的简写" class="headerlink" title="箭头函数的简写"></a>箭头函数的简写</h3><p><strong>(1)省略小括号,当形参有且只有一个时候</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">add</span> = n =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> n + n;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>)); <span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<p><strong>(2)省略花括号,当代码只有一条语句时候,此时return必须省略</strong></p>
<p>而且语句的执行结果就是函数的返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">pow</span> = n =&gt; n * n;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">pow</span>(<span class="number">9</span>)); <span class="comment">//81</span></span><br></pre></td></tr></table></figure>

<h3 id="箭头函数的this指向问题"><a href="#箭头函数的this指向问题" class="headerlink" title="箭头函数的this指向问题"></a>箭头函数的this指向问题</h3><p>this是静态的,this始终是指向函数声明时所在作用域下的this的值<strong>（其父级作用域的this）</strong></p>
<p>何为父级作用域的this，一个简单的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;id&#x27;</span>, <span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">    <span class="comment">// setTimeout(function() &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(&#x27;id&#x27;, this.id);</span></span><br><span class="line">    <span class="comment">// &#125;, 500)</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> id = <span class="number">10</span>;</span><br><span class="line">foo.<span class="title function_">call</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">50</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p><em>箭头函数</em>的结果是50</p>
</li>
<li><p><em>普通函数</em>的结果是10</p>
</li>
</ul>
<p><strong>foo.call(  )<strong>方法改变了foo函数的this指向，定时器中的函数this指向的是window，所以普通函数的</strong>this.id</strong>为window下的10。而箭头函数因为foo函数的this改变使得其this也改变成了对象**{id:50}**</p>
<h2 id="函数参数的默认值和rest参数"><a href="#函数参数的默认值和rest参数" class="headerlink" title="函数参数的默认值和rest参数"></a>函数参数的默认值和rest参数</h2><h3 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h3><blockquote>
<p>ES6 允许给函数参数赋值初始值</p>
</blockquote>
<ol>
<li>形参初始值  具有默认值的参数  一般位置要靠后(潜规则)</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c = <span class="number">2</span></span>) &#123; <span class="comment">//此处给形参设置默认值</span></span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">//当没有第三个实参传入时,可以在形参中设置默认值,否则就是NaN</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>与结构赋值结合</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">    host,</span></span><br><span class="line"><span class="params">    username,</span></span><br><span class="line"><span class="params">    password,</span></span><br><span class="line"><span class="params">    port</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(host);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(username);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(password);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(port);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">connect</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h3><p>es6 引入 <strong>rest</strong> 参数 用于获取函数的实参 用来替代<strong>arguments</strong></p>
<p>es5获取函数实参的方法是 <strong>arguments</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rest 参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">date</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args); <span class="comment">//filter some every map方法</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">date</span>(<span class="string">&#x27;黑&#x27;</span>, <span class="string">&#x27;白&#x27;</span>, <span class="string">&#x27;灰&#x27;</span>); <span class="comment">//数组</span></span><br></pre></td></tr></table></figure>

<p>rest参数 必须 放在<strong>参数末尾</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//rest参数 必须 放在参数最后</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b, ...args</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><p><strong>[…] <strong>扩展运算符能将[数组]转换为逗号分割的</strong>[参数序列]</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个数组 ... </span></span><br><span class="line"><span class="keyword">const</span> colors = [<span class="string">&#x27;黑&#x27;</span>, <span class="string">&#x27;白&#x27;</span>, <span class="string">&#x27;灰&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors); <span class="comment">// [&#x27;黑&#x27;, &#x27;白&#x27;, &#x27;灰&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...colors); <span class="comment">// 黑 白 灰</span></span><br></pre></td></tr></table></figure>

<h3 id="扩展运算符的运用"><a href="#扩展运算符的运用" class="headerlink" title="扩展运算符的运用"></a>扩展运算符的运用</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1. 数组的合并 黑 白 灰</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> anSe = [<span class="string">&#x27;黑&#x27;</span>, <span class="string">&#x27;白&#x27;</span>, <span class="string">&#x27;灰&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> liangSe = [<span class="string">&#x27;红&#x27;</span>, <span class="string">&#x27;黄&#x27;</span>, <span class="string">&#x27;绿&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//老方法 使用concat拼接数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const heBing = anSe.concat(liangSe);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> heBing = [...anSe, ...liangSe];</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(heBing);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2.数组的克隆</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> q1 = [<span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;M&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> q2 = [...q1];</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(q2);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//3.将伪数组转换为真正的数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(divs); <span class="comment">//此时还为伪数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> divArr = [...divs]; <span class="comment">//转换</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(divArr);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>es6</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM/BOM</title>
    <url>/found404.io/2022/06/28/DOM-BOM/</url>
    <content><![CDATA[<h1 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h1><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654481169296-a0d9f0e5-2ada-4ab7-ad58-2d34e893cd58.png" alt="img"></p>
<span id="more"></span>

<p>DOM最根本的对象<strong>document</strong> (实际上是<strong>window . document</strong>)， 表示文档对象</p>
<p>每个载入浏览器的HTML文档都会称为document对象，把文档中每个标签都解析为对象</p>
<p>“document对象可以从脚本中对HTML页面中所有的元素进行访问”</p>
<h2 id="1-getElementById-x2F-getElementsByTagName"><a href="#1-getElementById-x2F-getElementsByTagName" class="headerlink" title="1.getElementById( ) &#x2F; getElementsByTagName( )"></a>1.getElementById( ) &#x2F; getElementsByTagName( )</h2><h3 id="getElementById-通过-id-获取节点"><a href="#getElementById-通过-id-获取节点" class="headerlink" title="getElementById( )   通过 id 获取节点"></a>getElementById( )   <em>通过</em> <em><strong>id</strong></em> <em>获取节点</em></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span>&gt;</span>2019-9-9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.因为文档页面从上往下加载，所以script写到标签下面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.get 获得 element 元素 by 通过 驼峰命名法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.参数 id大小写敏感的字符串</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4.返回的是一个元素对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> time = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;time&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(time);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> time);<span class="comment">//Object</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 5.console.dir 打印返回的元素对象 更好的查看里面的属性和方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">dir</span>(time);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="getElementsByTagName"><a href="#getElementsByTagName" class="headerlink" title="getElementsByTagName( )"></a>getElementsByTagName( )</h3><p><em>获取过来元素对象的集合 以</em><em><strong>伪数组</strong></em><em>形式储存</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>演示文档1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>演示文档2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>演示文档3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>演示文档4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>演示文档5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">id</span>=<span class="string">&quot;ol&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>01<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>02<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>03<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>04<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.返回的是 获取过来元素对象的集合 以伪数组形式储存</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(lis);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.依次打印里面的对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[i]);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//3.如果页面中只有一个li 返回的还是伪数组形式</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//4.如果页面没有这个元素 返回的是空的伪数组</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//5.element.getElementsByTagName(&#x27;标签名&#x27;); 父元素必须是指定的单个元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var ol = document.getElementsByTagName(&#x27;ol&#x27;);//[ol]</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(ol[0].getElementsByTagName(&#x27;li&#x27;));</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ol = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ol&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="getElementByName"><a href="#getElementByName" class="headerlink" title="getElementByName();"></a>getElementByName();</h3><p>接受一个参数**(属性name的值)** ,这个方法会返回带有给定<strong>name</strong>特性的所有元素.</p>
<h2 id="2-H5新增获取节点方法"><a href="#2-H5新增获取节点方法" class="headerlink" title="2.H5新增获取节点方法"></a>2.H5新增获取节点方法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>盒子1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>盒子2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.getElementsByClassName 根据类名获取某些元素集合</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> boxs = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(boxs);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.querySelector返回指定选择器的第一个元素对象 切记 选择器要加符号 .box #nav</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> firstBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(firstBox);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> nav = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#nav&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(nav);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(li);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//3.querySelectorAll()指定选择器所有元素对象集合</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> allBox = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(allBox);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(lis);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><strong>getElementsByClassName(‘box’);</strong> <strong>根据类名获取某些元素集合</strong></li>
<li><strong>querySelector(‘.box’);</strong> <strong>返回指定选择器的第一个元素对象 (<strong><strong>切记 选择器要加符号 .box #nav</strong></strong>)</strong></li>
<li><strong>querySelectorAll(‘.box’);</strong> <strong>指定选择器所有元素对象集合</strong></li>
</ol>
<h2 id="3-body-html获取"><a href="#3-body-html获取" class="headerlink" title="3.body,html获取"></a>3.body,html获取</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.获取 body元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> bodyEle = <span class="variable language_">document</span>.<span class="property">body</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(bodyEle);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.获取 html元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> htmlEle = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(htmlEle);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-获取伪元素"><a href="#4-获取伪元素" class="headerlink" title="4.获取伪元素"></a>4.获取伪元素</h2><h3 id="1-getComputedStyle"><a href="#1-getComputedStyle" class="headerlink" title="(1)getComputedStyle()"></a>(1)getComputedStyle()</h3><p>虽然js中没有明确的获取伪元素的方法，但是却可以通过**getComputedStyle()**获取伪元素的属性</p>
<p><strong>语法：	getComputedStyle(‘元素’,’伪类’)</strong>	</p>
<p><strong>getComputedStyle(‘元素’,null)</strong> <em><strong>获取元素</strong></em></p>
<h3 id="2-getPropertyValue"><a href="#2-getPropertyValue" class="headerlink" title="(2)getPropertyValue()"></a>(2)getPropertyValue()</h3><p>获取该伪元素的属性值</p>
<p><strong>语法：getPropertyValue(‘css属性’)</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&quot;伪元素&quot;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> divAfter = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> sty = <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(divAfter, <span class="string">&quot;:after&quot;</span>).<span class="property">content</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(sty); <span class="comment">// &quot;伪元素&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> sty1 = <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(divAfter, <span class="string">&quot;:after&quot;</span>).<span class="title function_">getPropertyValue</span>(<span class="string">&#x27;font-size&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(sty1); <span class="comment">// 20px</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="事件三要素"><a href="#事件三要素" class="headerlink" title="事件三要素"></a>事件三要素</h1><ol>
<li><strong>事件源</strong>     <em>事件被触发的对象</em></li>
<li><strong>事件类型</strong>   <em>如何触发什么事件</em></li>
<li><strong>事件处理程序</strong>   <em>触发什么事件</em></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>演示按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//点击按钮 弹出对话框</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.事件有三部分：事件源 事件类型 事件处理程序 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//(1) 事件源 事件被触发的对象   谁  按钮</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//(2) 事件类型 如何触发 什么事件 比如鼠标点击(onclick) 经过 键盘按下</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//(3) 事件处理程序 如何触发 什么事件</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;弹出框&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="innerXXX修改元素内容"><a href="#innerXXX修改元素内容" class="headerlink" title="innerXXX修改元素内容"></a>innerXXX修改元素内容</h1><h2 id="innerText和innerHTML的区别"><a href="#innerText和innerHTML的区别" class="headerlink" title="innerText和innerHTML的区别"></a>innerText和innerHTML的区别</h2><ol>
<li><strong>innerText</strong> 不识别html标签 非标准</li>
<li><strong>innerHTML</strong> 识别标签  W3C标准</li>
<li>outerHTML 获取节点本身和其里面的内容</li>
<li>textContent  仅仅获取文本   （类似innerText）</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        我是文字</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//innerText和innerHTML的区别</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. innerText 不识别html标签 非标准</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// div.innerText = &#x27;今天是:2022&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. innerHTML 识别标签  W3C标准</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;b&gt;今天是:&lt;/b&gt;2022&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 两个属性可读写 可以获取元素里面的内容 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">innerText</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">innerHTML</span>); <span class="comment">//会保留换行 空格</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="修改元素属性"><a href="#修改元素属性" class="headerlink" title="修改元素属性"></a>修改元素属性</h1><h2 id="1-修改节点属性"><a href="#1-修改节点属性" class="headerlink" title="1.修改节点属性"></a>1.修改节点属性</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../../img/图片/cs (1).webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;p1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//修改 元素属性 src</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> p1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;p1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> p2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;p2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.注册事件</span></span></span><br><span class="line"><span class="language-javascript">        p2.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">src</span> = <span class="string">&#x27;../../../img/图片/cs (2).webp&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">title</span> = <span class="string">&#x27;p2&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        p1.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">src</span> = <span class="string">&#x27;../../../img/图片/cs (1).webp&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">title</span> = <span class="string">&#x27;p1&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>获取到元素节点存放到一个<strong>变量</strong>后可以直接<strong>打点调用</strong>这个节点的<strong>属性</strong>更改</p>
<h2 id="2-修改表单属性"><a href="#2-修改表单属性" class="headerlink" title="2.修改表单属性"></a>2.修改表单属性</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;输入内容&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.注册事件</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// input.innerHTML = &#x27;点击了&#x27;; 普通盒子 比如div才可用</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 表单里面的值 文字通过 val 来修改</span></span></span><br><span class="line"><span class="language-javascript">            input.<span class="property">value</span> = <span class="string">&#x27;点击了&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//如果想要某个表单被禁用 不能被点击 disable 想要按钮button被禁用</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// btn.disabled = true;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this指向的是事件函数的调用者 就是btn自己</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>如果想要某个表单被禁用 不能被点击 disable 想要按钮button被禁用</strong></p>
<p><strong>btn.disabled &#x3D; true</strong><strong>;</strong></p>
<h2 id="3-修改样式属性"><a href="#3-修改样式属性" class="headerlink" title="3.修改样式属性"></a>3.修改样式属性</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.注册事件 处理程序</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//里面的属性采取驼峰命名法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//触发事件 将样式改为行内样式</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;black&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;250px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>触发事件 将样式改为****行内样式</strong></p>
<h2 id="4-className修改样式属性"><a href="#4-className修改样式属性" class="headerlink" title="4.className修改样式属性"></a>4.className修改样式属性</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.change</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;first&quot;</span>&gt;</span>文本内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.注册事件 处理程序</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.style.backgroundColor = &#x27;black&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.style.color = &#x27;#fff&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.style.fontSize = &#x27;25px&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 当前元素的类名class改为了&#x27;change&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;change&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 会直接更改 覆盖原先的class类名</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//如果想要保留原先的类名 可以如下做法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;first change&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>通过</strong><strong>.className****修改节点类名</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654486021557-a62f87cc-7e9b-4726-972a-b0162de620d6.png" alt="img"></p>
<p><strong>关于classList</strong></p>
<p><a href="https://blog.csdn.net/qq_37304197/article/details/81748349?ops_request_misc=%7B%22request_id%22:%22165450310816781685361768%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165450310816781685361768&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81748349-null-null.142%5Ev11%5Econtrol,157%5Ev13%5Econtrol&utm_term=classList&spm=1018.2226.3001.4187"><strong>🔗🔗classList🔗🔗</strong></a>   <em>node存放接收节点的变量</em></p>
<ol>
<li><strong>node.classList   						返回一个Object里面存放类名</strong></li>
<li><strong>node.classList.add(‘类名’)   			添加新的类名</strong></li>
<li><strong>node.classList.remove(‘类名’)  		删除对另类名</strong></li>
<li><strong>node.classList.item(索引)</strong>   </li>
<li><strong>node.classList.toggle(“类名”); 	引号中的类名，有就删除，没有就添加</strong></li>
</ol>
<h2 id="5-排他思想案例"><a href="#5-排他思想案例" class="headerlink" title="5.排他思想案例"></a>5.排他思想案例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//btns得到伪数组</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            btns[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//(1)先发所有的按钮背景颜色去除</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    btns[i].<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//(2)然后被点击的按钮变色</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.首先先排除其他</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="获取-x2F-设置自定义属性"><a href="#获取-x2F-设置自定义属性" class="headerlink" title="获取&#x2F;设置自定义属性"></a>获取&#x2F;设置自定义属性</h1><h2 id="H5之前的获取-x2F-设置自定义属性"><a href="#H5之前的获取-x2F-设置自定义属性" class="headerlink" title="H5之前的获取&#x2F;设置自定义属性"></a>H5之前的获取&#x2F;设置自定义属性</h2><h3 id="getAttribute-‘属性’-获取"><a href="#getAttribute-‘属性’-获取" class="headerlink" title=".getAttribute(‘属性’)  获取"></a>.getAttribute(‘属性’)  获取</h3><p><strong>get(得到)</strong></p>
<p><strong>attribute(属性)</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.获取元素的属性值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// (1) element.属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">id</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// (2) element.getAttribute(&#x27;属性&#x27;) get得到 attribute属性的意思</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     程序员自己添加的属性称为自定义属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;id&#x27;</span>)); <span class="comment">//demo</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;index&#x27;</span>)); <span class="comment">//1</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="setAttribute-‘属性’-’值’-设置"><a href="#setAttribute-‘属性’-’值’-设置" class="headerlink" title=".setAttribute(‘属性’,’值’)  设置"></a>.setAttribute(‘属性’,’值’)  设置</h3><p><strong>set(设置)</strong></p>
<p><strong>attribute(属性)</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2. 设置元素属性值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// (1) element.属性=&#x27;值&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">id</span> = <span class="string">&#x27;text&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// (2) element.setAttribute(&#x27;属性&#x27;,&#x27;值&#x27;); 主要针对于自定义属性</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;3&#x27;</span>); <span class="comment">//也可以改class</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="removeAttribute-属性-删除"><a href="#removeAttribute-属性-删除" class="headerlink" title=".removeAttribute(属性)  删除"></a>.removeAttribute(属性)  删除</h3><p><strong>remove(删除)</strong></p>
<p><strong>attribute(属性)</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//3. 移除属性 removeAttribute(属性)</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;index&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="attributes获取属性集合-所有属性"><a href="#attributes获取属性集合-所有属性" class="headerlink" title=".attributes获取属性集合  (所有属性)"></a>.attributes获取属性集合  <em>(所有属性)</em></h3><h2 id="H5自定义属性"><a href="#H5自定义属性" class="headerlink" title="H5自定义属性"></a>H5自定义属性</h2><p><strong>##H5规定自定义属性data-开头做为属性名并且赋值##</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">getTime</span>=<span class="string">&quot;20&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">data-list-name</span>=<span class="string">&quot;andy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(div.getTime);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;getTime&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// H5规定自定义属性data-开头做为属性名并且赋值。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-index&#x27;</span>, <span class="string">&#x27;data-index:20&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-index&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// h5新增获取自定义属性方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// dataset是一个集合里面存放了所有以data开头的自定义属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>.<span class="property">index</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>[<span class="string">&#x27;index&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 如果自定义属性里面有多个-链接的单词，我们获取的时候采取驼峰命名法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>.<span class="property">listName</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>[<span class="string">&#x27;listName&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>h5新增获取自定义属性方法</p>
<h3 id="dataset获取自定义属性-data开头属性"><a href="#dataset获取自定义属性-data开头属性" class="headerlink" title="dataset获取自定义属性  data开头属性"></a><strong>dataset获取自定义属性</strong>  <em><strong>data开头属性</strong></em></h3><p><strong>dataset</strong>是一个集合里面存放了所有以data开头的自定义属性</p>
<p>如果自定义属性里面有多个**-链接<strong>的单词，我们获取的时候采取</strong>驼峰命名法**</p>
<h1 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h1><h2 id="父子节点"><a href="#父子节点" class="headerlink" title="父子节点"></a>父子节点</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 节点的优点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;erweima&quot;</span>&gt;</span>X<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var box = document.querySelector(&#x27;.box&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.dir(box);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.父节点 parentNote</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> erweima = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.erweima&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var box=document.querySelector(&#x27;.box&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 得到的是离元素最近的父级节点(亲父级) 如果找不到就返回空 null</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(erweima.<span class="property">parentNode</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// DOM提供的方法(API)获取</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 子节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// (1)子节点 childNotes 所有的子节点 包含 元素节点 文本节点等等</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">childNodes</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//.nodeType 节点类型 不同数字对应不同类型</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">childNodes</span>[<span class="number">0</span>].<span class="property">nodeType</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// (2)子节点 children 获取所有的子元素节点 实际开发常用的</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">children</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// (3)子节点 firstChild 子节点第一个</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//  文本节点涵盖空格和文字</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">firstChild</span>); <span class="comment">//#text 文本节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">lastChild</span>); <span class="comment">//#text 文本节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// (4)子节点 firstElementChild 返回第一个子元素节点 ie9以上支持</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">firstElementChild</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// (5)实际开发中 既没有兼容性问题又返回第一个子元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">children</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">children</span>[ul.<span class="property">children</span>.<span class="property">length</span> - <span class="number">1</span>]); <span class="comment">//最后一个</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="父节点"><a href="#父节点" class="headerlink" title="父节点"></a>父节点</h3><p>node 节点</p>
<p><strong>node.parentNote</strong>得到的是离元素最近的父级元素节点(亲父级) 如果找不到就返回空 null</p>
<p><em>(只包含元素节点)</em></p>
<p><strong>node.parentElement</strong>得到的是离元素最近的父级元素节点(亲父级) 如果找不到就返回空 null</p>
<p><em>(只包含元素节点)</em></p>
<h3 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h3><p><strong>node.childNodes</strong>	得到node所有的子节点*(既包含元素节点、文本节点、注释节点)*</p>
<p><strong>node.childNodes[0].nodeType</strong>	 该节点的节点类型（返回一个数值）</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26760678/1654505958781-d7e3ba30-4a4b-49b1-9fc4-9edf0feb4e00.png" alt="img"></p>
<p><strong>node.children</strong>			获取node所有的子元素节点 实际开发常用的*(只包含元素节点)*</p>
<p><strong>node.firstChild</strong>			子节点第一个节点*(既包含元素节点、文本节点、注释节点)*</p>
<p><strong>node.lastChild</strong>			子节点最后一个节点*(既包含元素节点、文本节点、注释节点)*</p>
<p><strong>childElementCount</strong>		返回子元素（不包括文本节点和注释）的个数</p>
<p>实际开发中获取方法</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654505851064-e1bc2453-f6e7-44f8-acf2-ac4af638c071.png" alt="img"></p>
<h3 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 兼容问题</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// nextSibling 下一个兄弟节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">nextSibling</span>); <span class="comment">//文本节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// previousSibling上一个兄弟节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">previousSibling</span>); <span class="comment">//文本节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.nextElementSibling 的到下一个兄弟元素节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">nextElementSibling</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">previousElementSibling</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">getNextElementSibling</span>(<span class="params">element</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> el = element;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">while</span> (el = el.<span class="property">nextSibling</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (el.<span class="property">nodeType</span> === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> el;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>node.nextSibling</strong> 	下一个兄弟节点:<em>(既包含元素节点、文本节点、注释节点)</em></p>
<p><strong>node.previousSibling</strong>	获取node的上一个兄弟节点*:(既包含元素节点、文本节点、注释节点)*</p>
<p><strong>node.nextElementSibling</strong> 	获取node的下一个兄弟元素节点*:(只包含元素节点)*</p>
<p><strong>node.previousElementSibling</strong>	获取node的上一个兄弟元素节点*:(只包含元素节点)*</p>
<h2 id="创建添加节点"><a href="#创建添加节点" class="headerlink" title="创建添加节点"></a>创建添加节点</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.创建元素节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.添加节点 node.appendChild(child) node父级 child 是子级 后面追加元素 类似于数组中的push</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        ul.<span class="title function_">appendChild</span>(li);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.node.insrtBefore(child,指定元素) 在指定元素的前面添加元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lili = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        ul.<span class="title function_">insertBefore</span>(lili, ul.<span class="property">children</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4.要在页面添加一个新的元素 1.创建元素 2.添加元素</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-创建节点"><a href="#1-创建节点" class="headerlink" title="1.创建节点"></a>1.创建节点</h3><p><strong>document.createElement</strong><strong>(‘<strong><strong>标签</strong></strong>‘)</strong>      <em>自动识别单双标签</em></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654500294447-65413060-d499-4261-9e18-f9e61dd1140d.png" alt="img"></p>
<h3 id="2-添加节点"><a href="#2-添加节点" class="headerlink" title="2.添加节点"></a>2.添加节点</h3><p><strong>node.appendChild</strong><strong>(child)</strong>  <em>node父级 child 是子级 后面追加元素 类似于数组中的push</em></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654500409758-399b3fe0-d79f-496f-a54f-5962e3066d78.png" alt="img"></p>
<p><strong>node.insrtBefore</strong><strong>(child,指定元素)</strong>  <em>在指定元素的前面添加元素</em></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654500572591-be97b45a-33ff-445f-9670-0694c7b0daa3.png" alt="img"></p>
<h3 id="3-替换节点"><a href="#3-替换节点" class="headerlink" title="3.替换节点"></a>3.替换节点</h3><p><strong>node.replaceChild</strong><strong>(child,指定元素)</strong> <em>要替换的节点从文档中删除,同时要插入的节点占据它的位置</em></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654573225003-2d51c9be-41d8-42c6-9303-67c60c9e0051.png" alt="img"></p>
<h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>熊大<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>熊二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>光头强<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 删除元素 node.removeChild(child)</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (ul.<span class="property">children</span>.<span class="property">length</span> == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                ul.<span class="title function_">removeChild</span>(ul.<span class="property">children</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>删除元素 node.removeChild(child)</strong></p>
<h2 id="复制克隆节点"><a href="#复制克隆节点" class="headerlink" title="复制克隆节点"></a>复制克隆节点</h2><p>**node.cloneNode( )**只复制标签 不复制内容</p>
<p>**node.cloneNode(true)**内容标签全部复制</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// node.cloneNode()只复制标签 不复制内容 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 添加true 深克隆 内容也克隆</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.克隆节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lili = ul.<span class="property">children</span>[<span class="number">0</span>].<span class="title function_">cloneNode</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.在ul中添加节点</span></span></span><br><span class="line"><span class="language-javascript">        ul.<span class="title function_">appendChild</span>(lili);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="注册-x2F-删除事件"><a href="#注册-x2F-删除事件" class="headerlink" title="注册&#x2F;删除事件"></a>注册&#x2F;删除事件</h1><h2 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h2><h3 id="1-传统注册事件-唯一性"><a href="#1-传统注册事件-唯一性" class="headerlink" title="1.传统注册事件  唯一性"></a>1.传统注册事件  唯一性</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654567236574-e6b523aa-e666-4350-94b4-d826f751382f.png" alt="img"></p>
<h3 id="2-方法监听注册事件-addEventListener-ie9以上"><a href="#2-方法监听注册事件-addEventListener-ie9以上" class="headerlink" title="2.方法监听注册事件  addEventListener  ie9以上"></a>2.方法监听注册事件  addEventListener  ie9以上</h3><ul>
<li>里面的事件类型是字符串必定加引号而月不带on</li>
<li>同一个元素同一个事件可以添加多个侦听器( 事件处理程序)</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654567353359-44fcc364-cb25-489c-a585-3e1c1c986b98.png" alt="img"></p>
<h3 id="3-attachEvent事件监听方式-仅了解不提倡使用"><a href="#3-attachEvent事件监听方式-仅了解不提倡使用" class="headerlink" title="3.attachEvent事件监听方式   仅了解不提倡使用"></a>3.attachEvent事件监听方式   仅了解不提倡使用</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654567401400-06a31444-ae07-47d4-baf5-57705c2bed99.png" alt="img"></p>
<h2 id="删除事件"><a href="#删除事件" class="headerlink" title="删除事件"></a>删除事件</h2><h3 id="1-传统方式解绑-node’元素’"><a href="#1-传统方式解绑-node’元素’" class="headerlink" title="1.传统方式解绑   node’元素’"></a>1.传统方式解绑   <em>node’元素’</em></h3><p><strong>node.onclick&#x3D;null</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654567648988-1f888cf6-0c10-4f84-ba95-c8ab39d4bc48.png" alt="img"></p>
<h3 id="2-removeEventListener-删除事件"><a href="#2-removeEventListener-删除事件" class="headerlink" title="2.removeEventListener 删除事件"></a>2.removeEventListener 删除事件</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654567684924-10492efa-f2d8-43b8-a08c-c2a19e4ea166.png" alt="img"></p>
<h3 id="3-老办法attachEvent-仅在ie9之前可用"><a href="#3-老办法attachEvent-仅在ie9之前可用" class="headerlink" title="3.老办法attachEvent 仅在ie9之前可用"></a>3.老办法attachEvent <em>仅在ie9之前可用</em></h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654567728098-295e58e4-b1a9-4ad5-a861-d411f15ca038.png" alt="img"></p>
<h1 id="DOM事件流代码验证"><a href="#DOM事件流代码验证" class="headerlink" title="DOM事件流代码验证"></a>DOM事件流代码验证</h1><p>dom事件流三个阶段</p>
<ol>
<li>JS代码中只能执行捕获或者冒泡其中的一个阶段。</li>
<li>onclick和attachEvent (ie)只能得到冒泡阶段。</li>
<li>捕获阶段 如果addEventListener第三个参数是true 那么则处于捕获阶段 <em>document-&gt;html-&gt;body-&gt;father-&gt;son</em></li>
</ol>
<h2 id="捕获阶段"><a href="#捕获阶段" class="headerlink" title="捕获阶段"></a>捕获阶段</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654568481514-ce930ecf-5199-4857-8d0c-86e81074eaf4.png" alt="img"></p>
<p>当点击<strong>son</strong>会依次触发<strong>从根元素到目标节点</strong>的事件</p>
<p>结果:  触发<strong>father - son</strong></p>
<h2 id="冒泡阶段"><a href="#冒泡阶段" class="headerlink" title="冒泡阶段"></a>冒泡阶段</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654569320445-d2ab52e1-5fd8-4334-8ece-27cb2779e880.png" alt="img"></p>
<p>当点击<strong>son</strong>会依次触发<strong>从目标元素到根节点</strong>的事件</p>
<p>结果:  触发<strong>son - father</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>,</span></span><br><span class="line"><span class="language-css">         <span class="selector-pseudo">:root</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: rebeccapurple;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// dom事件流三个阶段</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.JS代码中只能执行捕获或者冒泡其中的一个阶段。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.onclick和attachEvent (ie)只能得到冒泡阶段。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.捕获阶段 如果addEventListener第三个参数是true 那么则处于捕获阶段 document-&gt;html-&gt;body-&gt;father-&gt;son</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 捕获阶段</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4.冒泡阶段 如果addEventListener第三个参数是false或者省略 那么则处于冒泡阶段 相反</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 冒泡阶段</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var son = document.querySelector(&#x27;.son&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// son.addEventListener(&#x27;click&#x27;, function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     alert(&#x27;son&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;, false);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var father = document.querySelector(&#x27;.father&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// father.addEventListener(&#x27;click&#x27;, function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     alert(&#x27;father&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;, false);</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="e-target和this的区别-event对象"><a href="#e-target和this的区别-event对象" class="headerlink" title="e.target和this的区别   event对象"></a>e.target和this的区别   <em>event对象</em></h1><h2 id="e-target-x2F-this"><a href="#e-target-x2F-this" class="headerlink" title="e.target&#x2F;this"></a>e.target&#x2F;this</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        123</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//常见事件对象的属性和方法 this返回的的是绑定事件的对象(元素)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 区别: e.target 点击了那个元素，就返回那个元素;this 那个元素绑定了这个点击事件，那么就返回谁</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.e.target返回的是触发事件的对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 我们给ul绑定了事件 那么this就指向ul</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// e.target 指向我们点击的那个对象 谁触发了这个事件 我们点击的是1i e.target 指向的就是1i</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 了解兼容</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// div.onclick=function(e)&#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     e=e||window.event;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     var target = e.target || e.srcElement;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     console.log(target);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.了解跟this 有个非常相似的属性currentTarget ie678不认识</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>常见事件对象的属性和方法 this返回的的是绑定事件的对象(元素)</p>
<p>区别: 	</p>
<ul>
<li><strong>e.target</strong> 	点击了那个元素，就返回那个元素</li>
<li><strong>this</strong> 		哪个元素绑定了这个点击事件，那么就返回谁</li>
<li><strong>e.target.selectedIndex</strong>     获取被点击子元素的索引</li>
</ul>
<h2 id="e-button-返回被触发函数的鼠标被点击的下标"><a href="#e-button-返回被触发函数的鼠标被点击的下标" class="headerlink" title="e.button   返回被触发函数的鼠标被点击的下标"></a>e.button   返回被触发函数的鼠标被点击的下标</h2><h1 id="阻止默认行为-event对象"><a href="#阻止默认行为-event对象" class="headerlink" title="阻止默认行为  event对象"></a>阻止默认行为  <em>event对象</em></h1><h2 id="1-返回事件类型e-type"><a href="#1-返回事件类型e-type" class="headerlink" title="1.返回事件类型e.type"></a>1.返回事件类型e.type</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654588757570-3ddfdd50-4bfa-4aad-a4a2-b49b6af34bbb.png" alt="img"></p>
<p><strong>此时当触发事件时，就在控制台输出所触发的事件类型</strong></p>
<h2 id="2-阻止默认行为-事件"><a href="#2-阻止默认行为-事件" class="headerlink" title="2.阻止默认行为(事件)"></a>2.阻止默认行为(事件)</h2><p> <em>让链接不跳转 或者让提交按钮不提交</em></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654588902929-09afa0fd-12f3-4cd1-a229-bbcf9464a248.png" alt="img"></p>
<h2 id="3-传统方式-return-false"><a href="#3-传统方式-return-false" class="headerlink" title="3.传统方式 return false"></a>3.传统方式 return false</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654589028187-2885f65d-b02e-491d-86dd-affd651e2b45.png" alt="img"></p>
<h2 id="4-阻止冒泡"><a href="#4-阻止冒泡" class="headerlink" title="4.阻止冒泡"></a>4.阻止冒泡</h2><ul>
<li><strong>e.stopPropagation();</strong> 	<em>stop停止 Propagation 传播</em> <em>常规做法</em></li>
<li><strong>e.cancelBubble&#x3D;true;</strong> 	<em>cancle取消 bubble泡泡</em> <em>传统做法</em></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: rebeccapurple;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.冒泡阶段 如果addEventListener第三个参数是false或者省略 那么则处于冒泡阶段 相反</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// e.stopPropagation(); // stop停止 Propagation 传播 常规做法</span></span></span><br><span class="line"><span class="language-javascript">            e.<span class="property">cancelBubble</span> = <span class="literal">true</span>; <span class="comment">//cancle取消 bubble泡泡 传统做法</span></span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            e.<span class="title function_">stopPropagation</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;document&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-事件委托"><a href="#5-事件委托" class="headerlink" title="5.事件委托"></a>5.事件委托</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>点击弹框<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>点击弹框<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>点击弹框<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>点击弹框<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>点击弹框<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//事件委托核心原理 给父节点添加侦听器，利用事件冒泡影响每一个子节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// alert(&#x27;弹框&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                lis[i].<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="comment">//排他思想</span></span></span><br><span class="line"><span class="language-javascript">            e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>事件委托核心原理 <strong>给父节点添加侦听器，利用事件冒泡影响每一个子节点</strong></p>
<p><a href="https://blog.csdn.net/qq_38128179/article/details/86293394?ops_request_misc=%7B%22request_id%22:%22165465447016782388090175%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165465447016782388090175&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-86293394-null-null.142%5Ev11%5Econtrol,157%5Ev13%5Econtrol&utm_term=%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98&spm=1018.2226.3001.4187"><strong>🔗🔗事件委托🔗🔗</strong></a></p>
<h2 id="6-禁止选中和右键行为"><a href="#6-禁止选中和右键行为" class="headerlink" title="6.禁止选中和右键行为"></a>6.禁止选中和右键行为</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    演示文本-无法选中文本-无法右键菜单</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.contextmenu 禁止右键菜单</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;contextmenu&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.selectstart 禁止选中文字</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;selectstart&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="鼠标事件-x2F-坐标问题"><a href="#鼠标事件-x2F-坐标问题" class="headerlink" title="鼠标事件 &#x2F; 坐标问题"></a>鼠标事件 &#x2F; 坐标问题</h1><h2 id="1-client-鼠标在可视区域的坐标"><a href="#1-client-鼠标在可视区域的坐标" class="headerlink" title="1.client 鼠标在可视区域的坐标"></a>1.client 鼠标在可视区域的坐标</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654658100226-1994bb9f-58ba-42ae-a97b-a0bcf832d178.png" alt="img"></p>
<h2 id="2-page-鼠标在文档的坐标-兼容问题"><a href="#2-page-鼠标在文档的坐标-兼容问题" class="headerlink" title="2.page 鼠标在文档的坐标 兼容问题"></a>2.page 鼠标在文档的坐标 <em>兼容问题</em></h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654658136881-5af81d56-0e4e-4ad8-be02-18020060d94c.png" alt="img"></p>
<p>涵盖了被卷去的部分</p>
<h2 id="3-screen-鼠标在电脑屏幕的坐标"><a href="#3-screen-鼠标在电脑屏幕的坐标" class="headerlink" title="3.screen 鼠标在电脑屏幕的坐标"></a>3.screen 鼠标在电脑屏幕的坐标</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654658163694-f1ac6404-cc35-4def-8382-adfcd41dde55.png" alt="img"></p>
<ul>
<li>click：单击事件。</li>
<li>dblclick：双击事件。</li>
<li>mousedown：按下鼠标键时触发。</li>
<li>mouseup：松开按下的鼠标键时触发。</li>
<li>mousemove：鼠标移动事件。</li>
<li>mouseover：移入事件。</li>
<li>mouseout：移出事件。</li>
<li>mouseenter：移入事件。</li>
<li>mouseleave：移出事件。</li>
<li>contextmenu：右键事件。</li>
</ul>
<p>mouseover事件和mouseenter事件，都是鼠标进入一个节点时触发。两者的区别是，mouseenter事件只触发一次，而只要鼠标在节点内部移动，mouseover事件会在子节点上触发多次。</p>
<ul>
<li>在mouseover事件下，当鼠标移入父盒子会触发事件，但是从子盒子移入父盒子也会触发一次事件</li>
<li>在mouseenter事件下，当鼠标移入父盒子中的子盒子，再移出子盒子并不会触发两次</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: purple;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// mouseover鼠标经过自身盒子会触发.经过子盒子还会触发</span></span></span><br><span class="line"><span class="language-javascript">        father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// mouseenter只会经过自身盒子触发</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// mouseenter不会冒泡</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 配合使用mouseleave(鼠标离开)同样不会冒泡</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/qq_42669658/article/details/82531144"><strong>🔗🔗鼠标事件blog🔗🔗</strong></a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../CSS/touxiang.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> pic = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1.mousemove只要鼠标移动就会触发</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> x = e.<span class="property">pageX</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> y = e.<span class="property">pageY</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2.注意不要忘记添加px单位</span></span></span><br><span class="line"><span class="language-javascript">            pic.<span class="property">style</span>.<span class="property">left</span> = x - <span class="number">82</span> + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            pic.<span class="property">style</span>.<span class="property">top</span> = y - <span class="number">82</span> + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="仿京东放大镜案例"><a href="#仿京东放大镜案例" class="headerlink" title="仿京东放大镜案例"></a>仿京东放大镜案例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.preview_img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">285px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: move;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.preview_img</span>&gt;<span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.mask</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.big</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">5px</span> solid gray;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.big</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;preview_img&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./001.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;big&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./001.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 800px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bigImg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> preview_img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.preview_img&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> mask = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.mask&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> big = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.big&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 当我们鼠标经过preview_img 就显示和隐藏mask遮挡层和big大盒子</span></span></span><br><span class="line"><span class="language-javascript">        preview_img.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseover&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            mask.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            big.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        preview_img.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseout&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            mask.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            big.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 鼠标移动的时候，让黄色的盒子跟鼠标来走</span></span></span><br><span class="line"><span class="language-javascript">        preview_img.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// (1)先计算出鼠标在盒子内的坐标</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> x = e.<span class="property">pageX</span> - <span class="variable language_">this</span>.<span class="property">offsetLeft</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> y = e.<span class="property">pageY</span> - <span class="variable language_">this</span>.<span class="property">offsetTop</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// (2)mask.offsetWidth减去盒子的一半</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// (3)mask移动的距离</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> maskX = x - mask.<span class="property">offsetWidth</span> / <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> maskY = y - mask.<span class="property">offsetHeight</span> / <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// (4)如果x坐标小于0就让他停在0的位置</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> maskMax = preview_img.<span class="property">offsetWidth</span> - mask.<span class="property">offsetWidth</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (maskX &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                maskX = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maskX &gt;= maskMax) &#123;</span></span><br><span class="line"><span class="language-javascript">                maskX = maskMax;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (maskY &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                maskY = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maskY &gt;= preview_img.<span class="property">offsetHeight</span> - mask.<span class="property">offsetHeight</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                maskY = preview_img.<span class="property">offsetHeight</span> - mask.<span class="property">offsetHeight</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            mask.<span class="property">style</span>.<span class="property">left</span> = maskX + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            mask.<span class="property">style</span>.<span class="property">top</span> = maskY + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 大图片的移动距离=遮挡层移动距离*大图片最大移动距离/遮挡层的最大移动距离</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> bigImg = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.bigImg&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 大图片最大移动距离</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> bigMax = bigImg.<span class="property">offsetWidth</span> - big.<span class="property">offsetWidth</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 大图片距离</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> bigX = maskX * bigMax / maskMax;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> bigY = maskY * bigMax / maskMax;</span></span><br><span class="line"><span class="language-javascript">            bigImg.<span class="property">style</span>.<span class="property">left</span> = -bigX + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            bigImg.<span class="property">style</span>.<span class="property">top</span> = -bigY + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h1><h2 id="1-keyup-按键弹起的时候触发"><a href="#1-keyup-按键弹起的时候触发" class="headerlink" title="1. keyup 按键弹起的时候触发"></a>1. keyup 按键弹起的时候触发</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654669083014-96fd7257-2c5d-4185-a6d0-9911db9a56ee.png" alt="img"></p>
<h2 id="2-keydown-按键按下的时候触发"><a href="#2-keydown-按键按下的时候触发" class="headerlink" title="2. keydown 按键按下的时候触发"></a>2. keydown 按键按下的时候触发</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654669137983-6227fd61-01d8-48a9-aa31-f668d4304dbb.png" alt="img"></p>
<h2 id="3-keypress-按键按下的时候触发"><a href="#3-keypress-按键按下的时候触发" class="headerlink" title="3. keypress 按键按下的时候触发"></a>3. keypress 按键按下的时候触发</h2><ul>
<li><strong>keypress区分字母大小写</strong> </li>
<li><strong>不识别功能键 ctrl shift 方向键</strong></li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654669227779-a9316f92-4a36-4116-bc16-aca863c8ee03.png" alt="img"></p>
<p>执行顺序 keydown-keypress-keyup</p>
<h2 id="4-e-keyCode获取相应的ASCII码值"><a href="#4-e-keyCode获取相应的ASCII码值" class="headerlink" title="4.e.keyCode获取相应的ASCII码值"></a>4.e.keyCode获取相应的ASCII码值</h2><ul>
<li><strong>keyup</strong>和<strong>keydown</strong>不区分字母大小写</li>
<li><strong>keypress</strong>区分字母大小写</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654669720171-10e1c086-4485-4600-9869-1e493c15f514.png" alt="img"></p>
<h2 id="5-e-key获取按键的字符"><a href="#5-e-key获取按键的字符" class="headerlink" title="5.e.key获取按键的字符"></a>5.e.key获取按键的字符</h2><h2 id="6-e-ctrlKey判断是否为ctrl键-返回-布尔值"><a href="#6-e-ctrlKey判断是否为ctrl键-返回-布尔值" class="headerlink" title="6.e.ctrlKey判断是否为ctrl键  返回**布尔值"></a>6.e.ctrlKey判断是否为ctrl键  <em>返回**布尔值</em></h2><h1 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h1><h2 id="1-获取焦点onfocus"><a href="#1-获取焦点onfocus" class="headerlink" title="1.获取焦点onfocus"></a>1.获取焦点onfocus</h2><h2 id="2-失去焦点onblur"><a href="#2-失去焦点onblur" class="headerlink" title="2.失去焦点onblur"></a>2.失去焦点onblur</h2><h2 id="3-onchange下拉菜单选择时触发"><a href="#3-onchange下拉菜单选择时触发" class="headerlink" title="3.onchange下拉菜单选择时触发"></a>3.onchange下拉菜单选择时触发</h2><h2 id="4-输入时触发oninput"><a href="#4-输入时触发oninput" class="headerlink" title="4.输入时触发oninput"></a>4.输入时触发oninput</h2><h2 id="5-选择时触发onselect光标框选时"><a href="#5-选择时触发onselect光标框选时" class="headerlink" title="5.选择时触发onselect	光标框选时"></a>5.选择时触发onselect	<em>光标框选时</em></h2><h2 id="6-提交时触发onsubmit"><a href="#6-提交时触发onsubmit" class="headerlink" title="6.提交时触发onsubmit"></a>6.提交时触发onsubmit</h2><h2 id="7-重置时触发onreset"><a href="#7-重置时触发onreset" class="headerlink" title="7.重置时触发onreset"></a>7.重置时触发onreset</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onfocus</span>=<span class="string">&quot;focusFn()&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;获取焦点&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;blurFn()&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;失去焦点&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;01&quot;</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;02&quot;</span> <span class="attr">selected</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;03&quot;</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;04&quot;</span>&gt;</span>p4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">oninput</span>=<span class="string">&quot;inputFn(this)&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入时触发&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;h2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onselect</span>=<span class="string">&quot;selectFn(this)&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;选择时触发&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">&quot;submitFn()&quot;</span> <span class="attr">onreset</span>=<span class="string">&quot;resetFn()&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取焦点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">focusFn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;获取焦点&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 失去焦点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">blurFn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失去焦点了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// onchange</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> sel = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;select&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        sel.<span class="property">onchange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 输入时触发</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> h2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;h2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">inputFn</span>(<span class="params">self</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(self.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">            h2.<span class="property">innerHTML</span> = self.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 选择时触发</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">selectFn</span>(<span class="params">self</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(self.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 提交时触发</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">submitFn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;提交了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 重置时触发</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">resetFn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;重置了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="scroll滚动事件"><a href="#scroll滚动事件" class="headerlink" title="scroll滚动事件"></a>scroll滚动事件</h1><p>内容高度&#x2F;宽度 不包含边框 包含padding</p>
<h2 id="scrollTop折叠部分高度"><a href="#scrollTop折叠部分高度" class="headerlink" title="scrollTop折叠部分高度"></a>scrollTop折叠部分高度</h2><p><strong>scrollTop</strong>就是滚动条向下滚动上面被隐藏部分的高度  <em>并不适用于页面窗口</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        内容内容内容内容内容内容 内容内容内容内容内容内容 内容内容内容内容内容内容 内容内容内容内容内容内容 内容内容内容内容内容内容 内容内容内容内容内容内容 内容内容内容内容内容内容 内容内容内容内容内容内容 内容内容内容内容内容内容 内容内容内容内容内容内容 内容内容内容内容内容内容 内容内容内容内容内容内容 内容内容内容内容内容内容 内容内容内容内容内容内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// scroll 滚动事件</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">scrollTop</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// scrollTop就是滚动条向下滚动上面被隐藏部分的高度</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655188997507-ba126c1e-f1b9-4746-990c-13f599befabe.png" alt="img"></p>
<h1 id="页面加载事件"><a href="#页面加载事件" class="headerlink" title="页面加载事件"></a>页面加载事件</h1><p><strong>window.onload</strong>页面全部加载完毕才去执行</p>
<p>只能写一个会以最后一个为主</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// window.onload页面全部加载完毕才去执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 只能写一个会以最后一个为主</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;点击我&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用addEventListener可解决</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;点击我&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="number">33</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// load 等页面内容全部加载完毕，包含DOM元素 图片 flash css等等</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// DOMContentLoaded 是DOM加载完毕，不包含图片 flash css等就可以执行</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="调整窗口事件"><a href="#调整窗口事件" class="headerlink" title="调整窗口事件"></a>调整窗口事件</h1><p><strong>resize</strong> <em><strong>调整窗口触发</strong></em></p>
<ul>
<li><strong>window.innerWidth</strong>   		<em><strong>获取窗口宽度</strong></em></li>
<li><strong>window.innerHeight</strong>		<em><strong>获取窗口高度</strong></em></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// resize 窗口变化触发</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">innerHeight</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h2><p>语法规范：<strong>windows.setTimeout(调用函数，延时时间);</strong></p>
<ol>
<li>这个window在调用的时候可以省略</li>
<li>这个延时时间单位i毫秒 但可以省略 如果省略则默认为0</li>
<li>这个调用函数可以直接写函数 还可以写函数名 还有一个写法 ‘函数名()’</li>
<li>页面中可能有很多定时器,我们经常给定时器加标识符 (名字)</li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654681938149-c2710173-ee0c-4263-9aad-677b517c91a5.png" alt="img"></p>
<p>异步任务</p>
<h3 id="清除定时器clearTimeout-变量"><a href="#清除定时器clearTimeout-变量" class="headerlink" title="清除定时器clearTimeout(变量)"></a>清除定时器<strong>clearTimeout(变量)</strong></h3><p><strong>clearTimeout(变量)</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击停止定时器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> time = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;爆炸了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">5000</span>);</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearTimeout</span>(time);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h2><p><strong>window.setInterval(回调函数,[间隔毫秒数]);</strong></p>
<p>每隔**[间隔毫秒数]**触发一次函数</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654682117835-2678d70c-b9a3-4737-9b71-5766f853dcff.png" alt="img"></p>
<h3 id="清除定时器clearInterval-变量"><a href="#清除定时器clearInterval-变量" class="headerlink" title="清除定时器clearInterval(变量)"></a>清除定时器<strong>clearInterval(变量)</strong></h3><p><strong>clearInterval(变量)</strong></p>
<h1 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h1><p>this指向问题一般情况下this的最终指向的是那个调用它的对象</p>
<h2 id="1-全局作用域或者普通函数中this"><a href="#1-全局作用域或者普通函数中this" class="headerlink" title="1.全局作用域或者普通函数中this"></a>1.全局作用域或者普通函数中this</h2><p>指向全局对象<strong>window</strong>(注意定时器里面的this指向<strong>window</strong>)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// this指向问题一般情况下this的最终指向的是那个调用它的对象</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.全局作用域或者普通函数中this指向全局对象window(注意定时器甲面的this指向window)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//window</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2-函数中的this"><a href="#2-函数中的this" class="headerlink" title="2.函数中的this"></a>2.函数中的this</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654744499437-6ea6b88a-d412-4772-9064-e590f576ae41.png" alt="img"></p>
<p><strong>注：<strong><strong>匿名函数</strong></strong>中的<strong><strong>this</strong></strong>也同样指向****windows</strong></p>
<h2 id="3-定时器中的this"><a href="#3-定时器中的this" class="headerlink" title="3.定时器中的this"></a>3.定时器中的this</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654744551802-255f5ba4-a4a8-42b1-9baf-8d488175c3d1.png" alt="img"></p>
<h2 id="4-对象或者构造函数中的this"><a href="#4-对象或者构造函数中的this" class="headerlink" title="4.对象或者构造函数中的this"></a>4.对象或者构造函数中的this</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">     </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.调用中谁调用this指向谁</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> o = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// this指向的是o这个对象</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    o.<span class="title function_">sayHi</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.构造函数中this指向构造函数的实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">name, age</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//指向fun实例对象</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title function_">fun</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>对象中的<strong>this</strong>指向它本身</li>
<li>构造函数中的<strong>this</strong>指向它这个构造函数</li>
</ul>
<p><em>构造函数中的this因为new的过程使得this指向发生了转移</em></p>
<p><strong>new的整个过程：</strong></p>
<ol>
<li>new会在内存中创建一个新的空对像</li>
<li>new会让this指向这个新对象</li>
<li>执行构造函数中的代码</li>
<li>return这个新对象</li>
</ol>
<h2 id="5-绑定事件中的this"><a href="#5-绑定事件中的this" class="headerlink" title="5.绑定事件中的this"></a>5.绑定事件中的this</h2><p>谁绑定事件<strong>this</strong>就指向谁</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654744731772-a804b07f-d121-4b03-aa9c-57980de6fc8d.png" alt="img"></p>
<h2 id="6-箭头函数this指向特殊性"><a href="#6-箭头函数this指向特殊性" class="headerlink" title="6.箭头函数this指向	特殊性"></a>6.箭头函数this指向	<em>特殊性</em></h2><p>箭头函数的this指向它的父作用域，箭头函数声明在全局作用域下其this指向window，若不在全局作用域下，this指向其父作用域</p>
<p><strong>箭头函数的this永远指向其父作用域，箭头函数没有自己的this</strong></p>
<h3 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654746204921-fab4c532-3bae-4292-9e9d-b5f9d6d75eac.png" alt="img"></p>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654746238269-01e68480-a644-4ce2-9c57-d94c32499fe0.png" alt="img"></p>
<h1 id="改变this指向方法"><a href="#改变this指向方法" class="headerlink" title="改变this指向方法"></a>改变this指向方法</h1><h2 id="1-call-方法-常用于继承"><a href="#1-call-方法-常用于继承" class="headerlink" title="1.call()方法    常用于继承"></a>1.call()方法    <em>常用于继承</em></h2><p>call(无数个参数);</p>
<ul>
<li>第一个参数：改变this指向</li>
<li>第二个参数：实参</li>
<li>使用之后会自动执行该函数，不适合用在定时器处理函数或者事件处理函数</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655455484583-0d0dd80b-d5c2-4752-9623-fdd9cf6b7e47.png" alt="img"> </p>
<h2 id="2-apply-方法"><a href="#2-apply-方法" class="headerlink" title="2.apply()方法"></a>2.apply()方法</h2><p>apply（两个参数）</p>
<ul>
<li>第一个参数：改变this指向</li>
<li>第二个参数：数组或者伪数组（里面为实参）</li>
<li>特点：使用时候会自动执行函数，不适合用在定时器处理函数或者事件处理函数</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655457205108-985cd7e9-ae97-4743-942d-6a12deb83123.png" alt="img"></p>
<h2 id="3-bind-方法"><a href="#3-bind-方法" class="headerlink" title="3.bind()方法"></a>3.bind()方法</h2><p>bind（无数个参数）</p>
<ul>
<li>第一个参数：改变this指向</li>
<li>第二个参数之后：实参</li>
<li>返回值为一个新的函数</li>
<li>使用的时候需要手动调用下返回的新函数（不会自动执行）</li>
<li>作用：改变事件处理函数或者定时器处理函数的this指向</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655457422671-0e2884fe-92a5-449b-9deb-e42a3cccafab.png" alt="img"></p>
<h2 id="三者区别"><a href="#三者区别" class="headerlink" title="三者区别"></a>三者区别</h2><p><strong>call、apply</strong>与<strong>bind</strong>区别：前两个可以自动执行，<strong>bind</strong>不会自动执行，需要手动调用</p>
<p><strong>call、bind</strong>与<strong>apply</strong>区别：前两个都有无数个参数，<strong>apply</strong>只有两个参数，而且第二个参数为**[数组]**</p>
<h1 id="浏览器页面相关方法和事件"><a href="#浏览器页面相关方法和事件" class="headerlink" title="浏览器页面相关方法和事件"></a>浏览器页面相关方法和事件</h1><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><ul>
<li><strong>location.assign(‘url地址’)</strong>  	记录浏览记录，有后退功能</li>
<li><strong>location.replace(‘url地址’)</strong>  	不记录浏览记录，没有后退功能</li>
<li><strong>location.reload()</strong>			刷新页面</li>
<li><strong>location.href &#x3D;  ‘’</strong>			跳转页面</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 记录浏览记录，可实现后退功能</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// location.assign(&#x27;http://www.baidu.com&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 不记录浏览记录，没有后退功能</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// location.replace(&#x27;http://www.baidu.com&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 刷新页面</span></span></span><br><span class="line"><span class="language-javascript">            location.<span class="title function_">reload</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="history实现页面前进-仿浏览器前进页面"><a href="#history实现页面前进-仿浏览器前进页面" class="headerlink" title="history实现页面前进    仿浏览器前进页面"></a>history实现页面前进    <em>仿浏览器前进页面</em></h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;60-发送短信案例.html&quot;</span>&gt;</span>点击我去往页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            history.<span class="title function_">forward</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// history.go(1); // 也可以实现前进跳转</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>点击a标签跳转页面再返回此时再次点击前进按钮则会实现页面跳转</strong></p>
<p><em>实现浏览器前进后退效果</em></p>
<h2 id="pageshow事件"><a href="#pageshow事件" class="headerlink" title="pageshow事件"></a>pageshow事件</h2><p>当点击a标签跳转后，再退回后不会再触发alert方法，通过<strong>pageshow</strong>事件即可解决</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http//www.baidu.com&quot;</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 点击链接跳转下一界面后再退回正常情况并不会触发alert</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// pageshow事件完美解决这个问题</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// pageshow添加给window.</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pageshow&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="number">11</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="offset-x2F-scroll-x2F-client系列"><a href="#offset-x2F-scroll-x2F-client系列" class="headerlink" title="offset&#x2F;scroll&#x2F;client系列"></a>offset&#x2F;scroll&#x2F;client系列</h1><h2 id="1-offset"><a href="#1-offset" class="headerlink" title="1.offset"></a>1.offset</h2><h3 id="offsetTop-x2F-offsetLeft"><a href="#offsetTop-x2F-offsetLeft" class="headerlink" title="offsetTop&#x2F;offsetLeft"></a>offsetTop&#x2F;offsetLeft</h3><p><strong>可以得到元素的偏移位置返回的不带单位的数值</strong></p>
<p><strong>它以带有定位的父亲为准</strong> <strong>如果有父亲或者父亲没有定位</strong> <strong>则以body为准</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655470123512-aac4c250-3062-47ae-b896-44f7bac6f187.png" alt="img"></p>
<h3 id="window-pageYoffset-页面卷去的高度"><a href="#window-pageYoffset-页面卷去的高度" class="headerlink" title="window.pageYoffset  页面卷去的高度"></a>window.pageYoffset  页面卷去的高度</h3><h3 id="offsetWidth-x2F-offsetHeight"><a href="#offsetWidth-x2F-offsetHeight" class="headerlink" title="offsetWidth&#x2F;offsetHeight"></a>offsetWidth&#x2F;offsetHeight</h3><p>可以得到元素大小 宽度和高度 是包含 <strong>padding + border + width;</strong></p>
<p><strong>与style的区别:</strong></p>
<ul>
<li><strong>offset</strong>可以得到任意样式表中的样式值(数字型)		<em>包含padding值</em></li>
<li><strong>style</strong>只能得到行内样式表中的样式值(字符串型)		<em>不包含padding值</em></li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654755515627-807871ff-e068-4970-b901-6d1a9d16eaae.png" alt="img"></p>
<h3 id="offsetX-x2F-offsetY"><a href="#offsetX-x2F-offsetY" class="headerlink" title="offsetX &#x2F; offsetY"></a>offsetX &#x2F; offsetY</h3><p>元素距其<strong>父元素</strong>的偏移坐标</p>
<h3 id="offsetParent"><a href="#offsetParent" class="headerlink" title="offsetParent"></a>offsetParent</h3><p>返回带有定位的父亲 否则返回的是<strong>body</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: purple;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">45px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.w</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: royalblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">15px</span> solid red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;w&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// offset系列</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.可以得到元素的偏移位置返回的不带单位的数值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(father.<span class="property">offsetTop</span>); <span class="comment">//距离</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(father.<span class="property">offsetLeft</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 它以带有定位的父亲为准 如果有父亲或者父亲没有定位 则以body为准</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">offsetLeft</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> w = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.w&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.可以得到元素大小 宽度和高度 是包含 padding + border + width;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(w.<span class="property">offsetWidth</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(w.<span class="property">offsetHeight</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.返回带有定位的父亲 否则返回的是body</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">offsetParent</span>); <span class="comment">// 返回带有定位的父亲 否则返回的是body</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">parentNode</span>); <span class="comment">//返回父亲 是最近一级的父亲 亲爸爸 不管父亲有没有定位</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-scroll"><a href="#2-scroll" class="headerlink" title="2.scroll"></a>2.scroll</h2><p><strong>scroll</strong>计算出的高度或者宽度涵盖了被折叠部分</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655191086306-4064c008-e9c4-48f1-850d-d0a8729aaa9a.png" alt="img"></p>
<ul>
<li>document.documentElement**.scroll**(0, 100);</li>
<li>document.documentElement**.scrollTo**(0, 100);</li>
<li>document.documentElement**.scrollBy**(0, 100);</li>
</ul>
<ol>
<li><strong>scrollTo</strong>是’到达’，**.scrollTo**(0, 100)是固定到达100，当你已经在100则无法再次执行</li>
<li><strong>scrollBy</strong>是’执行’，**.scrollBy**(0, 100)是每当点击一次则移动100，可重复执行</li>
<li><strong>scroll</strong>和<strong>scrollTo</strong>一样，没什么区别</li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655194792765-550de9e9-0ab5-44a2-b030-b185bcc2029c.png" alt="img"></p>
<ul>
<li><strong>scrollTop</strong>指的是“元素中的内容”超出“元素上边界”的那部分的高度。</li>
</ul>
<h2 id="3-client"><a href="#3-client" class="headerlink" title="3.client"></a>3.client</h2><p>最大的区别就是<strong>client</strong>		不包含边框</p>
<p>输出的高度&#x2F;宽度是可视内容的高度&#x2F;宽度  <em>（人眼看到的部分大小</em><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655188997507-ba126c1e-f1b9-4746-990c-13f599befabe.png" alt="img"></p>
<p>[**🔗🔗clientX、offsetX、screenX、pageX的区别🔗🔗**](<a href="https://blog.csdn.net/Serena_tz/article/details/113939879?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=clientx">https://blog.csdn.net/Serena_tz/article/details/113939879?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=clientx</a> screenx pagex offsetx &amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-1-113939879.142^v16^control,157^v14^control&amp;spm&#x3D;1018.2226.3001.4187)</p>
<h2 id="案例-‘获取鼠标在盒子内坐标’"><a href="#案例-‘获取鼠标在盒子内坐标’" class="headerlink" title="案例 ‘获取鼠标在盒子内坐标’"></a>案例 ‘获取鼠标在盒子内坐标’</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(e.pageX); 鼠标在页面的x，y坐标</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(e.pageY);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(box.offsetLeft); 盒子距离页面左边距离</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> x = e.<span class="property">pageX</span> - <span class="variable language_">this</span>.<span class="property">offsetLeft</span>; <span class="comment">// 鼠标在盒子内的x坐标</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> y = e.<span class="property">pageY</span> - <span class="variable language_">this</span>.<span class="property">offsetTop</span>; <span class="comment">// 鼠标在盒子内的y坐标</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;x坐标是&#x27;</span> + x + <span class="string">&#x27;y坐标是&#x27;</span> + y;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655274453803-b3d6b959-aa7e-41a9-bfac-55cfba4ead26.png" alt="img"></p>
<h1 id="封装一个动画函数"><a href="#封装一个动画函数" class="headerlink" title="封装一个动画函数"></a>封装一个动画函数</h1><ol>
<li>获得盒子当前位置</li>
<li>让盒子在当前位置加上1个移动距离</li>
<li>加一个结束定时器的条件</li>
<li>注意此元素需要添加定位,才能使用element.style.left</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params">obj, target, callback</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(callback); callback = function()&#123;&#125; 调用的时候callback()</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span></span><br><span class="line"><span class="language-javascript">    obj.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 步长值写道定时器里面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 把步长值改为整数 不要出现小数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var step = Math.ceil((target - obj.offsetLeft) / 10);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> step = (target - obj.<span class="property">offsetLeft</span>) / <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">        step = step &gt; <span class="number">0</span> ? <span class="title class_">Math</span>.<span class="title function_">ceil</span>(step) : <span class="title class_">Math</span>.<span class="title function_">floor</span>(step);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (obj.<span class="property">offsetLeft</span> == target) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//停止动画 停止定时器</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//回调函数写道定时器结束里面</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// if (callback) &#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     //调用函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     callback();</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">            callback &amp;&amp; <span class="title function_">callback</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 短路运算</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 把每次加一这个步长值改为慢慢变小的值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 步长公式：(目标值 - 现在的位置)/10</span></span></span><br><span class="line"><span class="language-javascript">        obj.<span class="property">style</span>.<span class="property">left</span> = obj.<span class="property">offsetLeft</span> + step + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">20</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="节流和防抖"><a href="#节流和防抖" class="headerlink" title="节流和防抖"></a>节流和防抖</h1><h2 id="1-节流"><a href="#1-节流" class="headerlink" title="1.节流"></a>1.节流</h2><p>节流就是指连续触发事件但是在 n 秒中只执行一次函数。节流会稀释函数的执行频率</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all <span class="number">0.5s</span> ease;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> index = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 开启节流阀</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (flag) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 关闭节流阀</span></span></span><br><span class="line"><span class="language-javascript">            flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            index = index + <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">            div.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;index&#125;</span>px)`</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">500</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-防抖"><a href="#2-防抖" class="headerlink" title="2.防抖"></a>2.防抖</h2><p>防抖就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。连续点击按钮只会重置500ms，只有最后一次点击时500ms后才会执行方法。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all <span class="number">0.5s</span> ease;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> index = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (timer !== <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearTimeout</span>(timer);</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            index = index + <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">            div.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;index&#125;</span>px)`</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">500</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="移动端事件"><a href="#移动端事件" class="headerlink" title="移动端事件"></a>移动端事件</h1><ul>
<li><strong>touchstart</strong>	<strong>点击事件</strong></li>
<li><strong>touchmove</strong>	<strong>拖动事件</strong></li>
<li><strong>touchend</strong>	<strong>松手事件</strong></li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655262416536-b2fb10c6-f036-44bd-8536-e9eff70439b8.png" alt="img"></p>
<p><strong>targetTouches[0]</strong> 就可以得到触摸dom元素的第一个手指的相关信息 比如手指的坐标</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655262506029-4dcf0ee5-7ca7-4340-8508-3e3c0cdecb1b.png" alt="img"></p>
<p><a href="https://blog.csdn.net/weixin_42349568/article/details/109240923?ops_request_misc=%7B%22request_id%22:%22165526231616782184615037%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165526231616782184615037&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-3-109240923-null-null.142%5Ev16%5Econtrol,157%5Ev14%5Econtrol&utm_term=touchend&spm=1018.2226.3001.4187"><strong>🔗🔗关于移动端手指触发事件blog🔗🔗</strong></a></p>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><ul>
<li>利用RegExp对象创建 正则表达式	<strong>var regexp &#x3D; new RegExp(&#x2F;123&#x2F;)</strong>   &#x2F;&#x2F;要求输入123</li>
<li>利用字面量 创建正则表达式	<strong>var rg &#x3D; &#x2F;123&#x2F;</strong></li>
<li>test 方法用来检测字符串是否符合正则表达式要求规范  <strong>console.log(rg.test(123))</strong>  &#x2F;&#x2F;true</li>
</ul>
<p>var  rag &#x3D; &#x2F;abc&#x2F;</p>
<p><strong>只要含有abc这个字符串返回的都是true</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655862362465-cdda7a6c-2767-45d7-9029-32ced1e49684.png" alt="img"></p>
<h2 id="边界符"><a href="#边界符" class="headerlink" title="边界符 ^ $"></a>边界符 ^ $</h2><p>var  reg&#x3D;&#x2F;^abc&#x2F;</p>
<p><strong>^ 以谁开始 $ 以谁结束</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655862463627-749e1009-51e9-4dff-b886-f8dabf372fb9.png" alt="img"></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655862479079-e04808cb-491d-4486-8165-83d9017eb079.png" alt="img"></p>
<h2 id="字符类："><a href="#字符类：" class="headerlink" title="字符类："></a>字符类：</h2><p>var  reg2&#x3D;&#x2F;[abc]&#x2F;;</p>
<p><strong>[   ] 表示有一系列字符可供选择 只是匹配其中一个就可</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655862591463-437eaba3-7cbe-4b48-88b1-1636590b2ee4.png" alt="img"></p>
<p>var  reg3&#x3D;&#x2F;^[abc]$&#x2F;</p>
<p><strong>三选一 只有a 或是 b 或是 c 这三个字母才会返回true</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655862693221-db58825a-3940-4a03-9f02-e46c02b144cc.png" alt="img"></p>
<p>var  reg4&#x3D;&#x2F;^[a-z]$&#x2F;</p>
<p><strong>26个英文字母任何 一 个小写字母返回true</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655862747987-423af08f-aff7-46f0-bf89-45b8cf433961.png" alt="img"></p>
<p><strong>字符组合：</strong></p>
<p>var  reg5&#x3D;&#x2F;^[a-zA-Z0-9_-]$&#x2F;</p>
<p><strong>26个英文字母(大小全含)任何一字母返回true</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655863000533-b4e6bbb0-07c0-464d-8f5d-eb76b4131a93.png" alt="img"></p>
<p><strong>取反 ^ :</strong></p>
<p>var  reg6&#x3D;&#x2F;^[^a-zA-Z0-9_-]$&#x2F;</p>
<p><strong>最里面的^表示取反 不能含有 a-zA-Z0-9_-</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655863217971-d16a8def-8df9-44ed-a619-18f78ab70f41.png" alt="img"></p>
<h2 id="量次符："><a href="#量次符：" class="headerlink" title="量次符："></a>量次符：</h2><p>用来设定某个模式出现的次数（简单理解就是让下面的a字符重复多少次）</p>
<p>var  reg7&#x3D;&#x2F;^a*$&#x2F;</p>
<p>*** 相当于 &gt;&#x3D;0 可以出现0次或多次**</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655863360901-ace1d8df-221a-4578-a2c7-d762240e4351.png" alt="img"></p>
<p>var  reg8&#x3D;&#x2F;^a+$&#x2F;</p>
<p><strong>+ 相当于 &gt;&#x3D;1 可以出现1次或多次</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655863443298-681e69fb-8398-4d0b-8d51-d29f90ad1f38.png" alt="img"></p>
<p>var  reg9&#x3D;&#x2F;^a?$&#x2F;</p>
<p><strong>? 相当于 1 || 0 ，可以出现1次或0次</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655863558575-4a3e9616-b0e8-4249-b6c7-33967c1d0b57.png" alt="img"></p>
<p>var  rmg&#x3D;&#x2F;^a{3}$&#x2F;</p>
<p><strong>{3} 就是重复3次</strong></p>
<p><em>在谁后面就代表前面的可以重复几次</em></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655863611825-e99b1895-f790-47b7-a48a-7385e7012241.png" alt="img"></p>
<p>var  rmg1&#x3D;&#x2F;^a{3,}$&#x2F;</p>
<p><strong>{3,} 大于等于3次</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655863671440-f010ae03-4fca-4c3c-b7ca-5fb7a57f9eeb.png" alt="img"></p>
<p>var  rmg2&#x3D;&#x2F;^a{3,6}$&#x2F;</p>
<p><strong>{3,6} 大于等于3次 并且小于等于6次</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655863748367-0c39e2e1-43bf-4695-960c-d23aa88997d2.png" alt="img"></p>
<p><strong>(  )代表分组</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655870767795-6539b2dd-4d5b-437a-bf2c-8d6adef59336.png" alt="img"></p>
<h2 id="统一化字符："><a href="#统一化字符：" class="headerlink" title="统一化字符："></a>统一化字符：</h2><ul>
<li><strong>\d</strong>  匹配0-9之间任一数字,相当于  <strong>[0-9]</strong></li>
<li><strong>\D</strong>  匹配所有0-9之外的字符,相当于  <strong>[^0-9]</strong></li>
<li><strong>\w</strong>  匹配任意的字母,数字和下划线,相当于  <strong>[A-Za-z0-9_]</strong></li>
<li><strong>\W</strong>  除所有字母,数字和下划线外的字符,相当于  <strong>[^A-Za-z0-9_]</strong></li>
<li><strong>\s</strong>  匹配空格(包含换行符 制表符 空格符) 相当于  <strong>[\t\r\n\v\f]</strong></li>
<li><strong>\S</strong>  匹配非空格字符,相当于  <strong>[^\t\r\n\v\f]</strong></li>
</ul>
<h2 id="正则表达式替换"><a href="#正则表达式替换" class="headerlink" title="正则表达式替换"></a>正则表达式替换</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">style</span>=<span class="string">&quot;resize: none;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 替换 replace</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var str = &#x27;andy和red&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var newStr = str.replace(&#x27;andy&#x27;, &#x27;body&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var newStr = str.replace(/andy/, &#x27;body&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(newStr);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;textarea&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            div.<span class="property">innerHTML</span> = text.<span class="property">value</span>.<span class="title function_">replace</span>(<span class="regexp">/操|gay|9/g</span>, <span class="string">&#x27;*&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// g  属于全局匹配</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// i  忽略大小写</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// gi 全局匹配+忽略大小写</span></span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>g    属于全局匹配</li>
<li>i     忽略大小写</li>
<li>gi  全局匹配+忽略大小写</li>
</ul>
<h2 id="中文编码范围-x2F-u4e00-u9fa5-x2F"><a href="#中文编码范围-x2F-u4e00-u9fa5-x2F" class="headerlink" title="中文编码范围   &#x2F;[\u4e00-\u9fa5]&#x2F;"></a>中文编码范围   &#x2F;[\u4e00-\u9fa5]&#x2F;</h2><p><strong>&#x2F;[\u4e00-\u9fa5]&#x2F;</strong>   中文编码范围\u4e00是一个unicode编码</p>
<h2 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2><ul>
<li>手机号:   <strong>&#x2F;^1[3|4|5|6|7|8|9]\d{9}$&#x2F;</strong></li>
<li>密码:   <strong>&#x2F;^[a-zA-Z0-9_-]{6,16}$&#x2F;</strong></li>
</ul>
<h1 id="BOM操作扩展"><a href="#BOM操作扩展" class="headerlink" title="BOM操作扩展"></a>BOM操作扩展</h1><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/d4d075ee9982467290c30398aa3eee59.png" alt="img"><br><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/4d2bfa28bf4148d987d27444373e4d19.png" alt="img"></p>
<h2 id="什么是BOM？"><a href="#什么是BOM？" class="headerlink" title="什么是BOM？"></a>什么是BOM？</h2><p>BOM<code>（Browser Object Model）</code>即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其顶级对象是 window，并且每个对象都提供了很多方法与属性</p>
<h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><p>window 对象给我们提供了一个 location 属性用于获取或设置窗体的 URL，并且可以用于解析 URL</p>
<table>
<thead>
<tr>
<th><strong>location对象属性</strong></th>
<th><strong>返回值</strong></th>
</tr>
</thead>
<tbody><tr>
<td>location.href</td>
<td>获取或设置整个url地址</td>
</tr>
<tr>
<td>location.host</td>
<td>返回主机(域名) <a href="http://www.baidu.com/">www.baidu.com</a></td>
</tr>
<tr>
<td>location.port</td>
<td>获取或设置整个url地址</td>
</tr>
<tr>
<td>location.pathname</td>
<td>返回路径</td>
</tr>
<tr>
<td>location.search</td>
<td>返回参数</td>
</tr>
<tr>
<td>location.hash</td>
<td>返回片段 #后面内容，常用于链接锚点</td>
</tr>
<tr>
<td>location.protocol</td>
<td>返回协议</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>location对象方法</strong></th>
<th><strong>返回值</strong></th>
</tr>
</thead>
<tbody><tr>
<td>location.assign()</td>
<td>跟href一样，可以跳转页面(也称为重定向页面)</td>
</tr>
<tr>
<td>location.replace()</td>
<td>替换当前页面，因为不记录历史，所以不能后退页面</td>
</tr>
<tr>
<td>location.reload()</td>
<td>重新加载页面，相当于刷新按钮或者f5 如果参数为true 强制刷新ctrl+f5</td>
</tr>
</tbody></table>
<hr>
<h3 id="点击按钮跳转页面案例"><a href="#点击按钮跳转页面案例" class="headerlink" title="点击按钮跳转页面案例:"></a>点击按钮跳转页面案例:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>location<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         location.<span class="property">href</span> = <span class="string">&#x27;https://blog.csdn.net/WYF857446152/article/details/124860285?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165595085816782391824458%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165595085816782391824458&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-124860285-null-null.142^v20^control,157^v15^new_3&amp;utm_term=bom%E6%93%8D%E4%BD%9C&amp;spm=1018.2226.3001.4187&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="location-search接收返回的参数实现数据交互案例："><a href="#location-search接收返回的参数实现数据交互案例：" class="headerlink" title="location.search接收返回的参数实现数据交互案例："></a>location.search接收返回的参数实现数据交互案例：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;64-index.html&quot;</span>&gt;</span></span><br><span class="line">        用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">search</span>); <span class="comment">// ?uname=andy</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.先去掉？ substr(&#x27;起始的位置&#x27;,截取几个字符);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> params = location.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>); <span class="comment">// uname=andy</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(params);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.利用等号把字符串分割为数组 split(&#x27;=&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> arr = params.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.把数据写进div中</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">innerHTML</span> = arr[<span class="number">1</span>] + <span class="string">&#x27;欢迎您!&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><p>navigator 对象包含有关浏览器的信息，它有很多属性，我们最常用的是 <code>userAgent</code>，该属性可以返回由客户机发送服务器的 <code>user-agent</code> 头部的值。</p>
<h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><p>window对象给我们提供了一个 history对象，与浏览器历史记录进行交互。该对象包含用户（在浏览器窗口中）访问过的URL。</p>
<table>
<thead>
<tr>
<th><strong>history对象方法</strong></th>
<th><strong>返回值</strong></th>
</tr>
</thead>
<tbody><tr>
<td>back()</td>
<td>可以后退功能</td>
</tr>
<tr>
<td>forward()</td>
<td>前进功能</td>
</tr>
<tr>
<td>go(参数)</td>
<td>前进后退功能 参数如果是1前进一个页面如果是-1后退一个页面</td>
</tr>
</tbody></table>
<h1 id="webstorag"><a href="#webstorag" class="headerlink" title="webstorag"></a>webstorag</h1><h2 id="会话存储之sessionStorage"><a href="#会话存储之sessionStorage" class="headerlink" title="会话存储之sessionStorage"></a>会话存储之sessionStorage</h2><p>用户上传的数据并不会传输到服务器而是保存在本地浏览器中*(浏览器历史记录原理)*</p>
<ul>
<li>sessionStorage.setItem(‘uname’, val);		<em>储存数据</em></li>
<li>sessionStorage.getItem(‘uname’);		<em>获取数据</em></li>
<li>sessionStorage.removeItem(‘uname’);	<em>删除数据</em></li>
<li>sessionStorage.clear( );					<em>清除所有数据</em></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;set&quot;</span>&gt;</span>储存数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;get&quot;</span>&gt;</span>获取数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;remove&quot;</span>&gt;</span>删除数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;del&quot;</span>&gt;</span>清空所有数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ipt = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> set = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.set&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> get = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.get&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> remove = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.remove&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> del = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.del&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        set.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 当我们点击之后 就可以把表单里面的值存储起来</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> val = ipt.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            sessionStorage.<span class="title function_">setItem</span>(<span class="string">&#x27;uname&#x27;</span>, val);</span></span><br><span class="line"><span class="language-javascript">            sessionStorage.<span class="title function_">setItem</span>(<span class="string">&#x27;pwd&#x27;</span>, val);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        get.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 当我们点击之后 就可以把表单里面的值获取过来</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(sessionStorage.<span class="title function_">getItem</span>(<span class="string">&#x27;uname&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        remove.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 当我们点击之后 就可以把表单里面的值删除</span></span></span><br><span class="line"><span class="language-javascript">            sessionStorage.<span class="title function_">removeItem</span>(<span class="string">&#x27;uname&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        del.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 当我们点击之后 清除所有数据</span></span></span><br><span class="line"><span class="language-javascript">            sessionStorage.<span class="title function_">clear</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="本地存储之localStorage"><a href="#本地存储之localStorage" class="headerlink" title="本地存储之localStorage"></a>本地存储之localStorage</h2><p>localStorage.setItem(‘username’, val)			<em>储存数据</em></p>
<p>localStorage.getItem(‘username’)				<em>获取数据</em></p>
<p>localStorage.removeItem(‘username’)		<em>删除数据</em></p>
<p>localStorage.clear( )							<em>清除所有数据</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;set&quot;</span>&gt;</span>储存数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;get&quot;</span>&gt;</span>获取数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;remove&quot;</span>&gt;</span>删除数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;del&quot;</span>&gt;</span>清空所有数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ipt = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> set = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.set&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> get = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.get&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> remove = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.remove&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> del = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.del&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        set.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> val = ipt.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;username&#x27;</span>, val);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        get.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        remove.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        del.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">localStorage</span>.<span class="title function_">clear</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="webStorage-和-cookie-的区别？"><a href="#webStorage-和-cookie-的区别？" class="headerlink" title="webStorage 和 cookie 的区别？"></a>webStorage 和 cookie 的区别？</h2><h3 id="共同点："><a href="#共同点：" class="headerlink" title="共同点："></a>共同点：</h3><p>都是保存在浏览器端，且同源的。<br>cookie:存储在用户本地终端上的数据。数据存储空间小。<br>localStorage:没有时间限制的数据存储，数据存储空间大<br>sessionStorage:针对一个 session 的数据存储,当用户关  闭浏览器窗口后，数据会被删除。</p>
<h3 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h3><p><strong>cookie：</strong>数据始终在同源的http请求中携带。cookie数据不能超  过4k，同时因为每次http请求都会携带cookie，所以cookie只适  合保存很小的数据。</p>
<p><strong>sessionStorage和localStorage</strong>不会自动把数据发给服务器，仅在本地保存。sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</p>
<ol>
<li><strong>大小不同</strong><br>cookie：数据不能超过4k。<br>sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</li>
<li><strong>有效期不同</strong><br>cookie:可设置过期时间，直到设置时间到达之前  ，浏览器窗口关闭时也保留数据。<br>localStorage:始终有效，即使浏览器窗口关闭。<br>sessionStorage:当浏览器窗口关闭前有效，不能持久保持</li>
<li><strong>作用域不同</strong><br>cookie:所有同源窗口中都是共享的。<br>localStorage:在所有同源窗口中都是共享的。<br>sessionStorage:不在不同的浏览器窗口中共享，即使是同一个  页面；</li>
</ol>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>BOM</tag>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>GIT</title>
    <url>/found404.io/2022/06/27/GIT/</url>
    <content><![CDATA[<h1 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git"></a>什么是Git</h1><p>Git是一个开源的分布式版本控制系统，是目前世界上最先进、最流行的版本控制系统。可以快速高效地处理从很小到非常大的项目版本管理。</p>
<p><a href="https://git-scm.com/">git官网</a></p>
<p><strong>特点:项目越大越复杂，协同开发者越多，越能体现出Git的高性能和高可用性!</strong></p>
<span id="more"></span>

<h2 id="Git的特性"><a href="#Git的特性" class="headerlink" title="Git的特性"></a>Git的特性</h2><p>Git之所以快速和高效，主要依赖于它的如下两个特性:</p>
<ul>
<li>直接记录快照，而非差异比较</li>
<li>近乎所有操作都是本地执行</li>
</ul>
<h2 id="Git记录快照"><a href="#Git记录快照" class="headerlink" title="Git记录快照"></a>Git记录快照</h2><p>Git快照是在原有文件版本的基础.上重新生成一份新的文件，类似于备份。为了效率,如果文件没有修改，Git不再重新存储该文件,而是只保留一个链接指向之前存储的文件。</p>
<p><strong>缺点：占用空间资源大</strong>	<em><strong>空间换时间</strong></em></p>
<h2 id="所有操作都是本地执行"><a href="#所有操作都是本地执行" class="headerlink" title="所有操作都是本地执行"></a>所有操作都是本地执行</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655534484451-4c0517e2-4d65-4b59-a4be-19d51a9ce9b0.png" alt="img"></p>
<h1 id="Git中的三个区域"><a href="#Git中的三个区域" class="headerlink" title="Git中的三个区域"></a>Git中的三个区域</h1><p>使用Git管理的项目，拥有三个区域，分别是<strong>工作区</strong>、<strong>暂存区</strong>、<strong>Git 仓库</strong>。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655534910353-c3fc5bf1-796d-4a11-8c14-0e75314464ba.png" alt="img"></p>
<h1 id="Git中的三个状态"><a href="#Git中的三个状态" class="headerlink" title="Git中的三个状态"></a>Git中的三个状态</h1><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655534960656-79a481e4-61a1-4fb7-8fd3-3c1357894a25.png" alt="img"></p>
<ul>
<li>工作区的文件被修改了,但还没有放到暂存区,就是<strong>已修改</strong>状态。</li>
<li>如果文件已修改并放入暂存区，就属于<strong>已暂存</strong>状态。</li>
<li>如果Git仓库中<strong>保存着特定版本</strong>的文件,就属于<strong>已提交</strong>状态。</li>
</ul>
<h1 id="基本的Git工作流程"><a href="#基本的Git工作流程" class="headerlink" title="基本的Git工作流程"></a>基本的Git工作流程</h1><p><strong>WorkingDirectory</strong>	（工作区,相当于开发人员电脑）</p>
<p><strong>StagingArea</strong>	（暂存区）</p>
<p>**.git directory(Repository)**（Git仓库）</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655535118711-22e89a62-12eb-4c50-90f3-d1d0b4c1df5d.png" alt="img"></p>
<p>基本的Git工作流程如下:</p>
<p>①在工作区中修改文件</p>
<p>②将你想要下次提交的更改进行暂存</p>
<p>③提交更新,找到暂存区的文件,将快照永久性存储到Git仓库</p>
<h1 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h1><h2 id="配置Git用户信息"><a href="#配置Git用户信息" class="headerlink" title="配置Git用户信息"></a>配置Git用户信息</h2><p>安装完Git之后，要做的第一件事就是设置自己的用户名和邮件地址。因为通过Git对项目进行版本管理的时候，Git需要使用这些基本信息，来记录是谁对项目进行了操作:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655535398516-456da10e-f08d-4d89-8ae0-8771737d2c9f.png" alt="img"></p>
<p>–golbal选项只需执行一次就可以永久生效</p>
<h2 id="Git的全局配置文件"><a href="#Git的全局配置文件" class="headerlink" title="Git的全局配置文件"></a>Git的全局配置文件</h2><p>通过<strong>git config –global user.name</strong>和<strong>git config –global user.email</strong>配置的用户名和邮箱地址,会被写入到C:&#x2F;Users&#x2F;用户名文件夹&#x2F;.gitconfig文件中。这个文件是Git 的<strong>全局配置文件，配置- -次即可永久生效。</strong></p>
<p>可以使用记事本打开此文件，从而查看自己曾经对Git做了哪些全局性的配置。</p>
<h2 id="检查配置信息"><a href="#检查配置信息" class="headerlink" title="检查配置信息"></a>检查配置信息</h2><p>除了使用记事本查看全局的配置信息之外,还可以运行如下的终端命令,快速的查看Git的全局配置信息:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655535635403-14eac1d4-2f97-41cc-bc07-f457d2df43a3.png" alt="img"></p>
<h1 id="获取帮助信息"><a href="#获取帮助信息" class="headerlink" title="获取帮助信息"></a>获取帮助信息</h1><p>可以使用**git help <verb>**命令,无需联网即可在浏览器中打开帮助手册，例如:</verb></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655535684182-9e2812e8-61e4-4484-8550-e5f1d78b8dd3.png" alt="img"></p>
<p>如果不想查看完整的手册，那么可以用-h选项获得更简明的”help” 输出:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655535742912-3076a012-e2d7-4b6e-bbc0-f816bfa87f20.png" alt="img"></p>
<h1 id="获取Git仓库两种方式"><a href="#获取Git仓库两种方式" class="headerlink" title="获取Git仓库两种方式"></a>获取Git仓库两种方式</h1><p>①将尚未进行版本控制的本地目录转换为Git仓库</p>
<p>②从其它服务器克隆一个已存在的Git仓库</p>
<p>以上两种方式都能够在自己的电脑上得到一一个可用的Git仓库</p>
<h2 id="1-在现有目录中初始化仓库"><a href="#1-在现有目录中初始化仓库" class="headerlink" title="1.在现有目录中初始化仓库"></a>1.在现有目录中初始化仓库</h2><p>如果自己有一个尚未进行版本控制的项目目录，想要用Git来控制它，需要执行如下两个步骤:</p>
<p><strong>①在项目目录中，通过鼠标右键打开”<strong><strong>Git Bash</strong></strong>“</strong></p>
<p><strong>②执行</strong>  <strong>git init</strong>  <strong>命令将当前的目录转化为Git仓库</strong></p>
<p>git init命令会创建一个名为 .git 的隐藏目录,这个.git目录就是当前项目的Git仓库，里面包含了初始的必要</p>
<p>文件，这些文件是Git仓库的必要组成部分。</p>
<h1 id="工作区中文件的4种状态"><a href="#工作区中文件的4种状态" class="headerlink" title="工作区中文件的4种状态"></a>工作区中文件的4种状态</h1><p>工作区中的每一个文件可能有4种状态,这四种状态共分为两大类,如图所示:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655536027484-d2c17c61-7fce-4532-a47d-a2cf89550de5.png" alt="img"></p>
<p>未跟踪	??</p>
<p>已暂存  	A</p>
<p>被修改	M</p>
<p>被修改并且放入暂存	M </p>
<h1 id="Git中对文件的操作-必须先初始化仓库"><a href="#Git中对文件的操作-必须先初始化仓库" class="headerlink" title="Git中对文件的操作  必须先初始化仓库"></a>Git中对文件的操作  <em>必须先初始化仓库</em></h1><h2 id="检查文件状态-git-status"><a href="#检查文件状态-git-status" class="headerlink" title="检查文件状态  git status"></a>检查文件状态  <strong>git status</strong></h2><p>可以使用<strong>git status</strong> 命令查看文件处于什么状态，例如：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655536242631-7e6024cf-3551-46e6-a1af-c197aa7d0427.png" alt="img"></p>
<p>在状态报告中可以看到新建的<strong>index.html</strong>文件出现在<strong>Untracked files</strong> (未跟踪的文件)下面。</p>
<p><strong>以精简的方式显示文件状态</strong></p>
<p>使用git status输出的状态报告很详细，但有些繁琐。如果希望以精简的方式显示文件的状态，可以使用如下两条完全等价的命令，其中-s是–short的简写形式:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655536349500-52f5969f-2a0a-432d-983c-b128289b4b69.png" alt="img"></p>
<h2 id="跟踪新文件-（向暂存区添加文件）-git-add-文件"><a href="#跟踪新文件-（向暂存区添加文件）-git-add-文件" class="headerlink" title="跟踪新文件  （向暂存区添加文件） git add 文件"></a>跟踪新文件  <em>（向暂存区添加文件）</em> <strong>git add 文件</strong></h2><p>使用命令 <strong>git add</strong> 开始跟踪一个文件 所以要跟踪<strong>index.html</strong>文件，运行如下的命令即可</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655536474765-050a37a1-b18d-4eeb-ad43-182702bf06f0.png" alt="img"></p>
<p>此时再运行<strong>git status</strong>命令,会看到index.html文件在Changes to be committed这行的下面，说明已被跟踪，并处于暂存状态:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655536517820-ce82dd36-123e-4949-8082-6c9c42cc0873.png" alt="img"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26760678/1655536538806-8c2c13f3-9b86-4353-b730-9a535f08e209.png" alt="img"></p>
<h2 id="向暂存区中一次性添加多个文件-git-add"><a href="#向暂存区中一次性添加多个文件-git-add" class="headerlink" title="向暂存区中一次性添加多个文件    git add ."></a>向暂存区中一次性添加多个文件    <strong>git add</strong> .</h2><p>如果需要被暂存的文件比较多，可以使用   <strong>git add</strong> .  命令一次性向暂存区提交多个文件</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655537763425-fa5cefe1-3afe-4669-a1de-0c8de68e25dc.png" alt="img"></p>
<p>项目开发常用命令，将新增和修改后的文件放入暂存区</p>
<h2 id="提交更新-git-commit-m-“提示text”"><a href="#提交更新-git-commit-m-“提示text”" class="headerlink" title="提交更新  git commit -m “提示text”"></a>提交更新  <strong>git commit -m “提示text”</strong></h2><p>现在暂存区中有一个<strong>index.html</strong>文件等待被提交到Git仓库中进行保存。可以执行<strong>git commit</strong>命令进行提交，其中 <strong>-m</strong> 选项后面是本次的提交消息，用来对提交的内容做进一步的描述:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655536628213-900af14e-f287-401f-bd5b-487edcd8cb5c.png" alt="img"></p>
<p>提交成功后会显示如下信息：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655536671600-652b2a80-4b04-4d9c-938f-0134cae6c4ec.png" alt="img"></p>
<h2 id="对已提交的文件进行修改后-M标记"><a href="#对已提交的文件进行修改后-M标记" class="headerlink" title="对已提交的文件进行修改后 M标记"></a>对已提交的文件进行修改后 M标记</h2><p>目前，<strong>index.html</strong> 文件已经被Git跟踪,并且工作区和Git仓库中的<strong>index.html</strong>文件内容保持一致。 当我们</p>
<p>修改了工作区中<strong>index.html</strong>的内容之后,再次运行<strong>git status</strong>和<strong>git status -s</strong>命令,会看到如下的内容:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655536867487-488a48d8-014e-4539-8579-5f821b019fa1.png" alt="img"></p>
<p>文件index.html出现在<strong>Changes not staged for commit</strong>这行下面，说明<strong>已跟踪文件的内容发生了变化,</strong></p>
<p><strong>但还没有放到暂存区。</strong></p>
<p><strong>注意：修改过的，没有放入暂存区的文件前面有****红色的M标记</strong></p>
<h2 id="暂存已修改的文件-git-add"><a href="#暂存已修改的文件-git-add" class="headerlink" title="暂存已修改的文件  git add"></a>暂存已修改的文件  <strong>git add</strong></h2><p>目前，工作区中的<strong>index.html</strong>文件已被修改,如果要暂存这次修改,需要再次运行  <strong>git  add</strong>  命令,这个命令</p>
<p>是个多功能的命令，主要有如下3个功效:</p>
<ol>
<li>可以用它开始跟踪新文件</li>
<li>把已跟踪的、且已修改的文件放到暂存区</li>
<li>把有冲突的文件标记为已解决状态</li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655537072502-c6038e2f-1e37-4e23-bc76-8393f9199a64.png" alt="img"></p>
<h2 id="提交已暂存的文件-git-commit-m-“提交消息”"><a href="#提交已暂存的文件-git-commit-m-“提交消息”" class="headerlink" title="提交已暂存的文件 git commit -m “提交消息”"></a>提交已暂存的文件 <strong>git commit -m “提交消息”</strong></h2><p>再次运行 <strong>git commit -m “提交消息”</strong> 命令,即可将暂存区中记录的index.html的快照，提交到Git仓库中进行保存:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655537193259-ae4c4898-310f-42b9-8b05-6b728edbad64.png" alt="img"></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655537207921-7b41145a-0590-4cfc-9d86-6d372bb94316.png" alt="img"></p>
<h2 id="撤销对文件的修改-git-checkout-–-index-html"><a href="#撤销对文件的修改-git-checkout-–-index-html" class="headerlink" title="撤销对文件的修改  git checkout – index.html"></a>撤销对文件的修改  git checkout – index.html</h2><p>撤销对文件的修改指的是:把对工作区中对应文件的修改，还<strong>原成</strong>Git仓库中所保存的版本。</p>
<p>操作的结果:所有的修改会丢失，且无法恢复!   <strong>危险性比较高,请慎重操作!</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655537502602-d29f7b89-de20-4d61-a077-394510ed3d47.png" alt="img"></p>
<h2 id="取消暂存的文件gti-reset-HEAD-要移除的文件名称"><a href="#取消暂存的文件gti-reset-HEAD-要移除的文件名称" class="headerlink" title="取消暂存的文件	gti reset HEAD 要移除的文件名称"></a>取消暂存的文件	gti reset HEAD 要移除的文件名称</h2><p>如果需要从暂存区中移除对应的文件，可以使用如下命令：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655538293353-e0645ac8-e007-4c52-8bd5-b9f2e6f24d1d.png" alt="img"></p>
<h2 id="跳过使用暂存区域"><a href="#跳过使用暂存区域" class="headerlink" title="跳过使用暂存区域"></a>跳过使用暂存区域</h2><p>Git标准的工作流程是工作区→暂存区→Git仓库，但有时候这么做略显繁琐,此时可以跳过暂存区，直接将工作区中的修改提交到Git仓库,这时候Git工作的流程简化为了工作区→Git仓库。</p>
<p>Git提供了一个跳过使用暂存区域的方式，只要在提交的时候， 给git commit加上-a选项，Git 就会自动把</p>
<p>所有已经跟踪过的文件暂存起来一并提交， 从而跳过git add步骤:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655538525145-487fc07b-f18d-4e8e-a042-a268a447b3e6.png" alt="img"></p>
<h1 id="Git仓库移除文件"><a href="#Git仓库移除文件" class="headerlink" title="Git仓库移除文件"></a>Git仓库移除文件</h1><h2 id="1-从Git仓库和工作区中同时移除对应的文件"><a href="#1-从Git仓库和工作区中同时移除对应的文件" class="headerlink" title="1.从Git仓库和工作区中同时移除对应的文件"></a>1.从Git仓库和工作区中同时移除对应的文件</h2><h2 id="2-只从Git仓库中移除指定的文件，但保留工作区中对应的文件"><a href="#2-只从Git仓库中移除指定的文件，但保留工作区中对应的文件" class="headerlink" title="2.只从Git仓库中移除指定的文件，但保留工作区中对应的文件"></a>2.只从Git仓库中移除指定的文件，但保留工作区中对应的文件</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655538736242-5b2f6c78-ed58-49dc-b5df-c33ef3d89d32.png" alt="img"></p>
<h1 id="Git忽略文件"><a href="#Git忽略文件" class="headerlink" title="Git忽略文件"></a>Git忽略文件</h1><p>一般我们总会有些文件无需纳入Git的管理，也不希望它们总出现在未跟踪文件列表。在这种情况下，我们可以创建一一个名为 <strong>.gitignore</strong> 的配置文件,列出要忽略的文件的匹配模式。</p>
<p>文件.gitignore的格式规范如下: .</p>
<p>①以  <strong>#开头</strong>  的是注释</p>
<p>②以  <strong>&#x2F;结尾</strong>  的是目录</p>
<p>③以  <strong>&#x2F;开头</strong>  防止递归</p>
<p>④以  <strong>!开头</strong>  表示取反</p>
<p>⑤可以使用  <strong>glob模式</strong>  进行文件和文件夹的匹配	(glob指简化了的正则表达式)</p>
<p><strong>glob模式</strong>是指简化了的正则表达式：</p>
<p>①<strong>星号*<strong>匹配</strong>零个或多个任意字符</strong></p>
<p>②**[abc]** 匹配<strong>任何- -个列在方括号中的字符</strong>(此案例匹配-个a或匹配-一个b或匹配一个c)</p>
<p>③<strong>问号?<strong>只</strong>匹配-一个任意字符</strong></p>
<p>④在方括号中使用<strong>短划线</strong>分隔两个字符，表示所有在这两个字符范围内的都可以匹配( 比如[0-9]表示匹配</p>
<p>所有0到9的数字)</p>
<p>⑤<em>*两个星号*<em><strong>表示</strong>匹配任意中间目录</em>*(比如a&#x2F;</em>*&#x2F;z可以匹配a&#x2F;z、a&#x2F;b&#x2F;z 或a&#x2F;b&#x2F;C&#x2F;z等)</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655539134717-62f9b9a8-0d07-4695-9d43-e5c6367b220a.png" alt="img"></p>
<h1 id="查看提交历史-git-log"><a href="#查看提交历史-git-log" class="headerlink" title="查看提交历史  git log"></a>查看提交历史  git log</h1><p>如果希望回顾项目的提交历史，可以使用 <strong>git log</strong> 这个简单且有效的命令。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655540439882-5c0019d9-017d-4580-9488-e89d21a4777d.png" alt="img"></p>
<h1 id="回退指定版本"><a href="#回退指定版本" class="headerlink" title="回退指定版本"></a>回退指定版本</h1><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655540509352-742697e3-97db-45dd-986b-ecf6f5f9c910.png" alt="img"></p>
<p><strong>注意：回退到旧版本后不能再使用</strong> <strong>git log –pretty&#x3D;oneline</strong> <strong>查看历史版本</strong></p>
<h1 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h1><p>从主线分支出复线，可以多分支操作项目。类似于平行宇宙，不同分支不会相互影响，完成某个功能后再次合并到主线上。</p>
<h2 id="1-查看分支-git-branch"><a href="#1-查看分支-git-branch" class="headerlink" title="1.查看分支  git branch"></a>1.查看分支  git branch</h2><p><strong>git branch</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655794971836-6b024cbb-625a-4a4a-8013-806aede16780.png" alt="img"></p>
<p>运行结果：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655794998394-960a866f-286f-48d0-8785-bac32fed26db.png" alt="img"></p>
<p><strong>“*“</strong>	代表当前所在分支</p>
<h2 id="2-创建分支-git-branch-分支名"><a href="#2-创建分支-git-branch-分支名" class="headerlink" title="2.创建分支 git branch 分支名"></a>2.创建分支 git branch 分支名</h2><p><strong>git branch 分支名</strong>	<em><strong>在当前分支下创建新的分支，新分支代码与主线代码一致</strong></em></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655795283613-3591bcd4-05ae-4ece-8367-b34ae1f20807.png" alt="img"></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655795312903-e4b3a760-9cb6-4ea0-9a8e-782e780b64a5.png" alt="img"></p>
<p>注意：创建新分支后用户还是处于主分支</p>
<h2 id="3-切换分支-git-checkout-分支名"><a href="#3-切换分支-git-checkout-分支名" class="headerlink" title="3.切换分支 git checkout 分支名"></a>3.切换分支 git checkout 分支名</h2><p><strong>git checkout 分支名</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655795725098-fd973b51-11bb-4a02-ab61-1ac3cc2b8c1d.png" alt="img"></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655795739155-a1a5da02-ccd8-45e1-9e9f-59023346b641.png" alt="img"></p>
<h2 id="4-分支快速创建和切换-git-checkout-b-分支名称"><a href="#4-分支快速创建和切换-git-checkout-b-分支名称" class="headerlink" title="4.分支快速创建和切换 git checkout -b 分支名称"></a>4.分支快速创建和切换 <strong>git checkout -b 分支名称</strong></h2><p><strong>git checkout -b 分支名称</strong> </p>
<p><em>一条命令就可以实现创建和切换分支</em></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655796283829-de628c8b-3ffb-46a9-a41b-4ad6fad49920.png" alt="img"></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655796301800-20be8833-9f84-4c93-a82c-e4f25ee61499.png" alt="img"></p>
<h2 id="5-合并分支-git-merge-分支名"><a href="#5-合并分支-git-merge-分支名" class="headerlink" title="5.合并分支 git merge 分支名"></a>5.合并分支 git merge 分支名</h2><p>功能分支代码开发测试完毕后可以使用如下命令将完成后的代码合并到master主分支上：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655796632441-012816cc-597e-4bcc-8543-4623a25c05e6.png" alt="img"></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655796857424-d7bc8441-26f5-4cdc-9f38-12118a8393c3.png" alt="img"></p>
<p>在分支上进行的操作不会对主分支造成影响，所以切换到主分支后不会看到在复分支上的更改，需要合并之后才可以看见。</p>
<h2 id="6-删除分支-git-branch-d-分支名称"><a href="#6-删除分支-git-branch-d-分支名称" class="headerlink" title="6.删除分支  git branch -d 分支名称"></a>6.删除分支  git branch -d 分支名称</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655797401189-c413a9df-a8ff-442f-ab23-8906389ec3b7.png" alt="img"></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655797408858-262143f2-692c-43e3-8da7-c2a09b6169d8.png" alt="img"></p>
<p>不能在所在的分支上删除分支</p>
<h2 id="7-遇到冲突时合并分支"><a href="#7-遇到冲突时合并分支" class="headerlink" title="7.遇到冲突时合并分支"></a>7.遇到冲突时合并分支</h2><p>两个分支都同时对同一个文件进行了修改，在合并时候会报错。此时就需要打开冲突文件<strong>手动解决冲突</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655798284761-bcef2de9-69d5-407c-b507-486b4cff44f8.png" alt="img"></p>
<h2 id="8-将本地分支推送到远程仓库"><a href="#8-将本地分支推送到远程仓库" class="headerlink" title="8.将本地分支推送到远程仓库"></a>8.将本地分支推送到远程仓库</h2><p>如果是第一次将本地分支推送到远程仓库，需要执行以下命令：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655799013068-80d834d0-0c1a-4aff-b6a7-4dbb05774cdb.png" alt="img"></p>
<p>第一次推送分支需要带-u参数，此后可直接使用 git push 推送代码到远程仓库分支</p>
<h2 id="9-查看远程仓库中所有分支列表"><a href="#9-查看远程仓库中所有分支列表" class="headerlink" title="9.查看远程仓库中所有分支列表"></a>9.查看远程仓库中所有分支列表</h2><p><strong>git remote show 远程仓库名称</strong></p>
<h2 id="10-跟踪分支"><a href="#10-跟踪分支" class="headerlink" title="10.跟踪分支"></a>10.跟踪分支</h2><p>从远程仓库中，把远程分支下载到本地仓库中。需要运行如下命令：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655799401956-a80fc3cf-9069-4a65-bfa7-f18707d98165.png" alt="img"></p>
<h2 id="11-拉取远程仓库的最新代码"><a href="#11-拉取远程仓库的最新代码" class="headerlink" title="11.拉取远程仓库的最新代码"></a>11.拉取远程仓库的最新代码</h2><p>使用 <strong>git pull</strong> 把远程分支最新的代码下载到本地对应的分支中</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655799988876-2a85802d-c4c3-4808-b2a7-a6ff1ff160b8.png" alt="img"></p>
<h2 id="12-删除远程分支"><a href="#12-删除远程分支" class="headerlink" title="12.删除远程分支"></a>12.删除远程分支</h2><p><em>删除远程分支命令</em></p>
<p><strong>git push origin –delete 远程分支名</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655800654249-572fb3ec-b22a-424e-9fb1-8e81db9d1741.png" alt="img"></p>
<h1 id="Gitbub"><a href="#Gitbub" class="headerlink" title="Gitbub"></a>Gitbub</h1><h2 id="1-什么是开源"><a href="#1-什么是开源" class="headerlink" title="1.什么是开源"></a>1.什么是开源</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655541135151-d8670571-d0b9-473a-9cf7-e053671c2ef6.png" alt="img"></p>
<h2 id="2-什么是开源许可协议"><a href="#2-什么是开源许可协议" class="headerlink" title="2.什么是开源许可协议"></a>2.什么是开源许可协议</h2><p><strong>常见的五种开源许可协议</strong></p>
<ol>
<li><p>BSD (Berkeley Software Distribution)</p>
</li>
<li><p>Apache Licence 2.0</p>
</li>
<li><p>GPL ( GNU General Public License)</p>
</li>
<li><ol>
<li>具有传染性的一种开源协议，不允许修改后和衍生的代码做为闭源的商业软件发布和销售</li>
<li>使用 GPL的最著名的软件项目是: Linux</li>
</ol>
</li>
<li><p>LGPL (GNU Lesser General Public License)</p>
</li>
<li><p>MIT (Massachusetts Institute of Technology, MIT)</p>
</li>
<li><ol>
<li>是目前限制最少的协议，唯- -的条件:在修改后的代码或者发行包中，必须包含原作者的许可信息</li>
<li>使用 MIT的软件项目有: jquery. Node.js</li>
</ol>
</li>
</ol>
<h2 id="3-开源项目托管平台"><a href="#3-开源项目托管平台" class="headerlink" title="3.开源项目托管平台"></a>3.开源项目托管平台</h2><p>专门用于免费存放开源项目源代码的网站，叫做开源项目托管平台。目前世界上比较出名的开源项目托管平台主要有以下3个:</p>
<ul>
<li>Github (全球最牛的开源项目托管平台，没有之一 )</li>
<li>Gitlab (对代码私有性支持较好，因此企业用户较多)</li>
<li>Gitee (又叫做码云,是国产的开源项目托管平台。访问速度快、纯中文界面、使用友好)</li>
</ul>
<p>注意:以上3个开源项目托管平台,只能托管以Git管理的项目源代码,因此，它们的名字都以Git开头。</p>
<h2 id="4-远程仓库的两种访问方式"><a href="#4-远程仓库的两种访问方式" class="headerlink" title="4.远程仓库的两种访问方式"></a>4.远程仓库的两种访问方式</h2><p>Github.上的远程仓库，有两种访问方式，分别是HTTPS和SSH。它们的区别是:</p>
<p>①HTTPS:零配置;但是每次访问仓库时，需要重复输入Github的账号和密码才能访问成功</p>
<p>②SSH: 需要进行额外的配置;但是配置成功后，每次访问仓库时,不需重复输入Github的账号和密码</p>
<p>注意:在实际开发中，推荐使用SSH的方式访问远程仓库。</p>
<h2 id="5-关于Git上传库"><a href="#5-关于Git上传库" class="headerlink" title="5.关于Git上传库"></a>5.关于Git上传库</h2><h3 id="HTTPS上传："><a href="#HTTPS上传：" class="headerlink" title="HTTPS上传："></a>HTTPS上传：</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655549171898-6d827579-7eac-4f0b-90a9-30e09cd76d97.png" alt="img"></p>
<ol>
<li>在Github官网创建新的库之后首选HTTPS上传方式</li>
<li>在你要上传的库中打开 Git Bash控制台</li>
<li>依次输入官方提示的命令</li>
<li>在弹出框中输入你的密钥</li>
</ol>
<p><strong>注意：要先在官网绑定令牌</strong></p>
<p>绑定令牌的方式：</p>
<p>1.找到”C:\Users\无敌暴龙战士.ssh”路径下两个文件  id_rsa.pub  后缀的为私人令牌</p>
<p>2.在github官网个人设置中找到绑定令牌</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655549534866-d9084c9c-e9fc-4261-a379-96b7c6bdec34.png" alt="img"></p>
<p>3.选择new SSH key 添加绑定令牌</p>
<h2 id="6-上传修改后的仓库"><a href="#6-上传修改后的仓库" class="headerlink" title="6.上传修改后的仓库"></a>6.上传修改后的仓库</h2><p>如果想要上传本地被修改后的仓库需要将修改后的文件全部提交并且使用 <strong>git push</strong> 命令上传，同时也要注意，在弹出框输入<strong>密钥</strong><em>(并非令牌)</em></p>
<p>关于密钥的生成：</p>
<ol>
<li><p>个人设置中的Developer settings</p>
</li>
<li><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655554230182-4c6d1140-8cfb-40e4-af72-5456c597a6c9.png" alt="img"></p>
</li>
<li><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655554297252-5680c8ab-4f67-42e7-9e03-3d2b7480e07c.png" alt="img"></p>
</li>
</ol>
<h2 id="7-克隆已上传的库"><a href="#7-克隆已上传的库" class="headerlink" title="7.克隆已上传的库"></a>7.克隆已上传的库</h2><p>使用 <strong>git clone 远程库地址</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655737899273-d316d6df-6e0d-4a56-b5c6-abaadface510.png" alt="img"></p>
<h1 id="Git-FLS"><a href="#Git-FLS" class="headerlink" title="Git FLS"></a>Git FLS</h1><p><a href="https://blog.csdn.net/wq_0708/article/details/121611239"><strong>##Git flsBlog##</strong></a></p>
<h1 id="多库共存"><a href="#多库共存" class="headerlink" title="多库共存"></a>多库共存</h1><p>要想实现单个库连接多个平台可以使用多库连接的方式，比如当更新一个项目后想要同时上传GitHub和Gitee就可以避免繁琐的操作，同时绑定不同的SSH地址。在push或者pull的时候就可以同时上传&#x2F;获取</p>
<p>原帖子：<a href="https://blog.csdn.net/s_156/article/details/120975674"><strong>##git实现多库共存##</strong></a></p>
<h2 id="方法-1：每次push-x2F-pull时需分开操作"><a href="#方法-1：每次push-x2F-pull时需分开操作" class="headerlink" title="方法 1：每次push&#x2F;pull时需分开操作"></a>方法 1：每次push&#x2F;pull时需分开操作</h2><p>首先，指令 <strong>git remote -v</strong> 查看本地仓库所关联的远程仓库：</p>
<p><strong>git remote rm origin</strong> 删除远程库</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655706799778-d145bcc5-bc99-40e0-ae97-e84614d42f88.png" alt="img"></p>
<p>然后，用 <strong>git remote add (name)</strong> 添加一个远程仓库，其中name可以任意指定（对应上面的origin部分），比如：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655707455484-be8d2b92-9dcf-45e7-a522-ca12eb07b040.png" alt="img"></p>
<p>再次查看本地仓库所关联的远程仓库，可以发现成功关联了两个远程仓库：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655707507827-f921d99b-70b8-4b83-bf0f-18f51750a347.png" alt="img"></p>
<p>此后，若需进行<strong>push</strong>操作，则需要指定目标仓库，<strong>git push</strong> ，对这两个远程仓库分别操作：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655707541452-46421b8e-085d-4d73-a083-66ffbf3994c7.png" alt="img"></p>
<p>同理，<strong>pull</strong>操作也需要指定从哪个远程仓库拉取，<strong>git pull</strong> ，从这两个仓库中选择其一：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655707568939-7274d046-eabb-44a9-8c70-65b6b32c679d.png" alt="img"></p>
<h2 id="方法-2：每次push-x2F-pull时可以同时操作"><a href="#方法-2：每次push-x2F-pull时可以同时操作" class="headerlink" title="方法 2：每次push&#x2F;pull时可以同时操作"></a>方法 2：每次push&#x2F;pull时可以同时操作</h2><p>首先，指令 <strong>git remote -v</strong> 查看本地仓库所关联的远程仓库：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655706799778-d145bcc5-bc99-40e0-ae97-e84614d42f88.png" alt="img"></p>
<p>然后，不额外添加远程仓库，而是给现有的远程仓库添加额外的 URL。使用 <strong>git remote set-url -add</strong> ，已有的名为<strong>name</strong>的远程仓库添加一个远程地址，比如：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655707655729-c692b8da-a686-4e3b-ae63-f552f6457e45.png" alt="img"></p>
<p>再次查看所关联的远程仓库：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655707688970-e1d0cd08-1915-4359-8d8d-dafa3e338850.png" alt="img"></p>
<p>可以看到，我们并没有如方法 1 一般增加远程仓库的数目，而是给一个远程仓库赋予了多个地址（或者准确地说，多个用于push的地址）。</p>
<p>因此，这样设置后的push 和pull操作与最初的操作完全一致，不需要进行调整。</p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql数据库</title>
    <url>/found404.io/2022/07/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h1 id="Mysql基本概念"><a href="#Mysql基本概念" class="headerlink" title="Mysql基本概念"></a>Mysql基本概念</h1><h2 id="1-什么是数据库-🤔"><a href="#1-什么是数据库-🤔" class="headerlink" title="1.什么是数据库 🤔"></a>1.什么是数据库 🤔</h2><p>数据库(database)是用来组织。存储和营理数据的仓库。<br>当今世界是一个充满着数据的互联网世界，充斥着大量的数据。数据的来源有很多，比如出行记录、消费记录、浏览的网页、发送的消息等等.除了文本类型的数据，图像。音乐。声音都是数据。<br>为了方便管理互联网世界中的数据，就有了数据库管理系统的概念(简称:数据库) .用户可以对数据库中的数据进行新增、查询、更新、删除等操作。</p>
<span id="more"></span>

<h2 id="2-常见的数据库以及分类"><a href="#2-常见的数据库以及分类" class="headerlink" title="2.常见的数据库以及分类"></a>2.常见的数据库以及分类</h2><p>市面上最常见的数据库：</p>
<ul>
<li>MySQL数据库(目前使用最广泛流行度最高的开源免费数据库; Community(社区版免费) + Enterprise(企业版))</li>
<li>Oracle数据库(收费)</li>
<li>SQL Server数据库(收费)</li>
<li>Mongodb数据库(Community + Enterprise)</li>
</ul>
<p>其中，MySQL. Oracle. SQL Server 属于传统型数据库(又叫做:关系型数据库或SQL数据库)，这三者的<br>设计理念相同，用法比较类似。</p>
<p>而Mongodb属于新型数据库(又叫做:非关系型数据库或NoSQL数据库)，它在一 定程度 上弥补了传统型<br>数据库的缺陷。</p>
<h2 id="3-传统型数据库的数据阻止结构"><a href="#3-传统型数据库的数据阻止结构" class="headerlink" title="3.传统型数据库的数据阻止结构"></a>3.传统型数据库的数据阻止结构</h2><h3 id="1-Excel的数据组织结构"><a href="#1-Excel的数据组织结构" class="headerlink" title="1.Excel的数据组织结构"></a>1.Excel的数据组织结构</h3><p>每个Excel中,数据的组织结构分别为<strong>工作簿、工作表、数据行、列</strong>这4大部分组成。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220712230648045.png" alt="image-20220712230648045"></p>
<ol>
<li>整个Excel叫做工作簿</li>
<li>users和books是工作表</li>
<li>users工作表中有3行数据</li>
<li>每行数据由6列信息组成</li>
<li>每列信息都有对应的数据类型</li>
</ol>
<h3 id="2-传统型数据库的数据组织结构"><a href="#2-传统型数据库的数据组织结构" class="headerlink" title="2.传统型数据库的数据组织结构"></a>2.传统型数据库的数据组织结构</h3><p>在传统型数据库中，数据的组织结构分为**数据库(database)、数据表(table). 数据行(row)、 字段(field)**这 4大部分组成。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220712230855197.png" alt="image-20220712230855197"></p>
<ol>
<li>数据库类似于Excel的工作簿</li>
<li>数据表类似于Excel的工作表</li>
<li>数据行类似于 Excel的每- -行数据</li>
<li>字段类似于Excel的列</li>
<li>每个字段都有对应的数据类型</li>
</ol>
<h3 id="3-实际开发中库、表、行、字段的关系"><a href="#3-实际开发中库、表、行、字段的关系" class="headerlink" title="3.实际开发中库、表、行、字段的关系"></a>3.实际开发中库、表、行、字段的关系</h3><ol>
<li>在实际项目开发中，-般情况下，每个项目都对应独立的数据库。</li>
<li>不同的数据，要存储到数据库的不同表中,例如:用户数据存储到users表中，图书数据存储到books表中。</li>
<li>每个表中具体存储哪些信息，由字段来决定，例如:我们可以为users表设计id、username、 password 这3个字段。</li>
<li>表中的行，代表每一条具体的数据。</li>
</ol>
<h1 id="安装并配置MySQL"><a href="#安装并配置MySQL" class="headerlink" title="安装并配置MySQL"></a>安装并配置MySQL</h1><h2 id="了解需要安装哪些MySQL相关的软件"><a href="#了解需要安装哪些MySQL相关的软件" class="headerlink" title="了解需要安装哪些MySQL相关的软件"></a>了解需要安装哪些MySQL相关的软件</h2><p>对于开发人员来说，只需要安装MySQL Server和MySQL Workbench这两个软件，就能满足开发的需要了。</p>
<ul>
<li>MySQL Server:专门用来提供数据存储和服务的软件。</li>
<li>MySQL Workbench:可视化的MySQL管理工具，通过它，可以方便的操作存储在MySQL Server中的数据。</li>
</ul>
<h2 id="MySQL在Windows环境下的安装"><a href="#MySQL在Windows环境下的安装" class="headerlink" title="MySQL在Windows环境下的安装"></a>MySQL在Windows环境下的安装</h2><p>跳过</p>
<h1 id="使用MySQL-Workbench管理数据库"><a href="#使用MySQL-Workbench管理数据库" class="headerlink" title="使用MySQL Workbench管理数据库"></a>使用MySQL Workbench管理数据库</h1><h2 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713192404034.png" alt="image-20220713192404034"></p>
<h2 id="2-创建数据表"><a href="#2-创建数据表" class="headerlink" title="2.创建数据表"></a>2.创建数据表</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713192913904.png" alt="image-20220713192913904"></p>
<p>DataType数据类型：</p>
<ol>
<li><strong>int</strong>整数</li>
<li>**varchar(len”长度“)**字符串</li>
<li>**tinyint(1)**布尔值</li>
</ol>
<p>字段的特殊标识：</p>
<ol>
<li>**PK (Primary Key)**主键、唯一标识</li>
<li><strong>NN (Not Null)</strong> 值不允许为空</li>
<li><strong>UQ (Unique)</strong> 值唯一</li>
<li><strong>Al (Auto Increment)</strong> 值自动增长</li>
<li><strong>Default&#x2F;Expression</strong>默认值</li>
</ol>
<h2 id="3-向表中写入数据"><a href="#3-向表中写入数据" class="headerlink" title="3.向表中写入数据"></a>3.向表中写入数据</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713194136724.png" alt="image-20220713194136724"></p>
<h1 id="什么是SQL"><a href="#什么是SQL" class="headerlink" title="什么是SQL"></a>什么是SQL</h1><p>SQL (英文全称: Structured Query Language)是结构化查询语言，专门用来访问和处理数据库的编程语言。能够让我们以编程的形式，操作数据库里面的数据。</p>
<blockquote>
<p>三个关键点:</p>
<ol>
<li>SQL是一门数据库编程语言</li>
<li>使用SQL语言编写出来的代码，叫做SQL语句</li>
<li>SQL语言只能在关系型数据库中使用(例如MySQL、Oracle、 SQL Server)。非关系型数据库(例如Mongodb)不支持SQL语言</li>
</ol>
</blockquote>
<h2 id="SQL能做什么"><a href="#SQL能做什么" class="headerlink" title="SQL能做什么"></a>SQL能做什么</h2><ol>
<li>从数据库中查询数据</li>
<li>向数据库中插入新的数据</li>
<li>更新数据库中的数据</li>
<li>从数据库删除数据</li>
<li>可以创建新数据库</li>
<li>可在数据库中创建新表</li>
<li>可在数据库中创建存储过程、 视图</li>
<li>ete…</li>
</ol>
<h2 id="SQL的学习目标"><a href="#SQL的学习目标" class="headerlink" title="SQL的学习目标"></a>SQL的学习目标</h2><p>重点掌握如何使用SQL从数据表中:</p>
<blockquote>
<p>查询数据(select) 、 插入数据(insert into)、更新数据(update). 删除数据 (delete)</p>
</blockquote>
<p>额外需要掌握的4种SQL语法:</p>
<blockquote>
<p>where条件、and和or运算符、orderby排序、count(*) 函数</p>
</blockquote>
<h2 id="SQL语法"><a href="#SQL语法" class="headerlink" title="SQL语法"></a>SQL语法</h2><h3 id="SQL的SELECT语句"><a href="#SQL的SELECT语句" class="headerlink" title="SQL的SELECT语句"></a>SQL的SELECT语句</h3><h4 id="1-语法"><a href="#1-语法" class="headerlink" title="1.语法"></a>1.语法</h4><p>SELECT语句用于从表中查询数据。执行的结果被存储在一个结果表中(称为结果集) 语法格式如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713200549136.png" alt="image-20220713200549136"></p>
<p>注意：SQL语句中的关键字对大小写不敏感。SELECT 等效于select, FROM 等效于from.</p>
<h4 id="2-SELECT-示例"><a href="#2-SELECT-示例" class="headerlink" title="2.SELECT*示例"></a>2.SELECT*示例</h4><p>我们希望从users表中选取所有列，可以使用符号*取代列的名称，示例如下：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713201000975.png" alt="image-20220713201000975"></p>
<h4 id="3-SELECT列名称示例"><a href="#3-SELECT列名称示例" class="headerlink" title="3.SELECT列名称示例"></a>3.SELECT列名称示例</h4><p>如需获取名为”username”和”password”的列的内容(从名为”users”的数据库表)，请使用下面的SELECT语句: </p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713201821882.png" alt="image-20220713201821882"></p>
<h3 id="SQL的INSERT-INTO语句"><a href="#SQL的INSERT-INTO语句" class="headerlink" title="SQL的INSERT INTO语句"></a>SQL的INSERT INTO语句</h3><h4 id="1-语句"><a href="#1-语句" class="headerlink" title="1.语句"></a>1.语句</h4><p>INSERT INTO语句用于向数据表中插入新的数据行，语法格式如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713202552024.png" alt="image-20220713202552024"></p>
<h4 id="2-INSERT-INTO示例"><a href="#2-INSERT-INTO示例" class="headerlink" title="2.INSERT INTO示例"></a>2.INSERT INTO示例</h4><p>向users表中，插入一条username为tony stark, password 为098123的用户数据，示例如下: .</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713202637208.png" alt="image-20220713202637208"></p>
<h3 id="SQL的UPDATE语句"><a href="#SQL的UPDATE语句" class="headerlink" title="SQL的UPDATE语句"></a>SQL的UPDATE语句</h3><h4 id="1-语句-1"><a href="#1-语句-1" class="headerlink" title="1.语句"></a>1.语句</h4><p>Update语句用于修改表中的数据。语法格式如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713203137364.png" alt="image-20220713203137364"></p>
<h4 id="2-UPDATE示例-更新某一行中的一个列"><a href="#2-UPDATE示例-更新某一行中的一个列" class="headerlink" title="2.UPDATE示例-更新某一行中的一个列"></a>2.UPDATE示例-更新某一行中的一个列</h4><p>把users表中id为7的用户密码，更新为888888.示例如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713203310275.png" alt="image-20220713203310275"></p>
<h4 id="3-UPDATE示例-更新某一行中的若干列"><a href="#3-UPDATE示例-更新某一行中的若干列" class="headerlink" title="3.UPDATE示例-更新某一行中的若干列"></a>3.UPDATE示例-更新某一行中的若干列</h4><p>把users表中id为2的用户密码和用户状态，分别更新为admin123和1.示例如下: .</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713203839910.png" alt="image-20220713203839910"></p>
<h3 id="SQL的DELETE语句"><a href="#SQL的DELETE语句" class="headerlink" title="SQL的DELETE语句"></a>SQL的DELETE语句</h3><h4 id="1-语法-1"><a href="#1-语法-1" class="headerlink" title="1.语法"></a>1.语法</h4><p>DELETE语句用于删除表中的行。语法格式如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713204215255.png" alt="image-20220713204215255"></p>
<h4 id="2-DELETE示例"><a href="#2-DELETE示例" class="headerlink" title="2.DELETE示例"></a>2.DELETE示例</h4><p>从users表中，删除id为4的用户，示例如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713204302189.png" alt="image-20220713204302189"></p>
<p><strong>注意：一定要加where</strong></p>
<h3 id="SQL的WHERE子句"><a href="#SQL的WHERE子句" class="headerlink" title="SQL的WHERE子句"></a>SQL的WHERE子句</h3><h4 id="1-语法-2"><a href="#1-语法-2" class="headerlink" title="1.语法"></a>1.语法</h4><p>WHERE子句用于限定选择的标准。在SELECT、UPDATE、DELETE 语句中，皆可使用WHERE子句来限定选择的标准。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713204639112.png" alt="image-20220713204639112"></p>
<h4 id="2-可在where子句中使用的运算符"><a href="#2-可在where子句中使用的运算符" class="headerlink" title="2.可在where子句中使用的运算符"></a>2.可在where子句中使用的运算符</h4><p>下面的运算符可在where子句中使用，用来限定选择的标准：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713204859441.png" alt="image-20220713204859441"></p>
<p>注意：在某些版本sql中，操作符&lt;&gt;可以写为!&#x3D;</p>
<h4 id="3-WHERE子句示例"><a href="#3-WHERE子句示例" class="headerlink" title="3.WHERE子句示例"></a>3.WHERE子句示例</h4><p>可以通过WHERE子句来限定SELECT的查询条件:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713205003534.png" alt="image-20220713205003534"></p>
<h3 id="SQL的AND和OR运算符"><a href="#SQL的AND和OR运算符" class="headerlink" title="SQL的AND和OR运算符"></a>SQL的AND和OR运算符</h3><h4 id="1-语法-3"><a href="#1-语法-3" class="headerlink" title="1.语法"></a>1.语法</h4><p>AND和OR可在WHERE子语句中把两个或多个条件结合起来。</p>
<ul>
<li>AND表示必须同时满足多个条件,相当于JavaScript中的&amp;&amp;运算符,例如if(a!&#x3D;&#x3D; 10&amp;&amp;a!&#x3D;&#x3D; 20)</li>
<li>OR表示只要满足任意一个条件即可. 相当于JavaScript中的II运算符,例如if(a!&#x3D;&#x3D; 10||a!&#x3D;&#x3D; 20)</li>
</ul>
<h4 id="2-AND运算符示例"><a href="#2-AND运算符示例" class="headerlink" title="2.AND运算符示例"></a>2.AND运算符示例</h4><p>使用AND来显示所有status为0,并且id小于3的用户:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713205734070.png" alt="image-20220713205734070"></p>
<h4 id="3-OR运算符示例"><a href="#3-OR运算符示例" class="headerlink" title="3.OR运算符示例"></a>3.OR运算符示例</h4><p>使用OR来显示所有status为1,或者username为zs的用户:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713205927224.png" alt="image-20220713205927224"></p>
<h3 id="SQL的ORDER-BY子句"><a href="#SQL的ORDER-BY子句" class="headerlink" title="SQL的ORDER BY子句"></a>SQL的ORDER BY子句</h3><h4 id="1-语法-4"><a href="#1-语法-4" class="headerlink" title="1.语法"></a>1.语法</h4><ul>
<li>ORDER BY语句用于根据指定的列对结果集进行排序。</li>
<li>ORDER BY语句默认按照升序对记录进行排序。</li>
<li>如果您希望按照降序对记录进行排序，可以使用ASC（可省略）关键字。</li>
<li>如果您希望按照降序对记录进行排序，可以使用DESC关键字。</li>
</ul>
<h4 id="2-OPDER-BY-子句-升序排序"><a href="#2-OPDER-BY-子句-升序排序" class="headerlink" title="2.OPDER BY 子句-升序排序"></a>2.OPDER BY 子句-升序排序</h4><p>对users表中的数据，按照status字段进行升序排序，示例如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713210340012.png" alt="image-20220713210340012"></p>
<h4 id="3-ORDER-BY-子句-降序排序"><a href="#3-ORDER-BY-子句-降序排序" class="headerlink" title="3.ORDER BY 子句-降序排序"></a>3.ORDER BY 子句-降序排序</h4><p>对users表中的数据，按照id字段进行降序排序，示例如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713210729998.png" alt="image-20220713210729998"></p>
<h4 id="4-ORDER-BY子句-多重排序"><a href="#4-ORDER-BY子句-多重排序" class="headerlink" title="4.ORDER BY子句-多重排序"></a>4.ORDER BY子句-多重排序</h4><p>对users表中的数据，先按照status字段进行降序排序，再按照username的字母顺序，进行升序排序,示例如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713211027356.png" alt="image-20220713211027356"></p>
<h3 id="SQL的COUNT-函数"><a href="#SQL的COUNT-函数" class="headerlink" title="SQL的COUNT(*)函数"></a>SQL的COUNT(*)函数</h3><h4 id="1-语法-5"><a href="#1-语法-5" class="headerlink" title="1.语法"></a>1.语法</h4><p>COUNT()函数用于返回查询结果的总数据条数，语法格式如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713211522705.png" alt="image-20220713211522705"></p>
<h4 id="2-COUNT-实例"><a href="#2-COUNT-实例" class="headerlink" title="2.COUNT(*)实例"></a>2.COUNT(*)实例</h4><p>查询users表中status为0的总数据条数：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713211705196.png" alt="image-20220713211705196"></p>
<h4 id="2-使用AS为列设置别名"><a href="#2-使用AS为列设置别名" class="headerlink" title="2.使用AS为列设置别名"></a>2.使用AS为列设置别名</h4><p>如果希望给查询出来的列名称设置别名，可以使用AS关键字,示例如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713211857686.png" alt="image-20220713211857686"></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713212153424.png" alt="image-20220713212153424"></p>
<h1 id="在项目中操作数据库步骤"><a href="#在项目中操作数据库步骤" class="headerlink" title="在项目中操作数据库步骤"></a>在项目中操作数据库步骤</h1><h2 id="在项目中操作mySQL的步骤"><a href="#在项目中操作mySQL的步骤" class="headerlink" title="在项目中操作mySQL的步骤"></a>在项目中操作mySQL的步骤</h2><ol>
<li>安装操作MySQL数据库的第三方模块(mysql)</li>
<li>通过mysql模块连接到MySQL数据库</li>
<li>通过mysql模块执行SQL语句</li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713212735747.png" alt="image-20220713212735747"></p>
<h2 id="安装与配置musql模块"><a href="#安装与配置musql模块" class="headerlink" title="安装与配置musql模块"></a>安装与配置musql模块</h2><h3 id="1-安装mysql模块"><a href="#1-安装mysql模块" class="headerlink" title="1.安装mysql模块"></a>1.安装mysql模块</h3><p>mysql模块是托管于npm.上的第三方模块。它提供了在Node.js项目中连接和操作MySQL数据库的能力。</p>
<p>想要在项目中使用它，需要先运行如下命令,将mysql安装为项目的依赖包:</p>
<h3 id="2-配置mysql模块"><a href="#2-配置mysql模块" class="headerlink" title="2.配置mysql模块"></a>2.配置mysql模块</h3><p>在使用mysq|模块操作MySQL数据库之前，必须先对mysql模块进行必要的配置，主要的配置步骤如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713213356159.png" alt="image-20220713213356159"></p>
<h3 id="3-测试mysql模块能否正常工作"><a href="#3-测试mysql模块能否正常工作" class="headerlink" title="3.测试mysql模块能否正常工作"></a>3.测试mysql模块能否正常工作</h3><p>调用db.query()函数，指定要执行的SQL语句，通过回调函数拿到执行的结果：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713214251680.png" alt="image-20220713214251680"></p>
<blockquote>
<p>‘select 1’ 测试mysql这个模块能否正常工作</p>
</blockquote>
<h2 id="使用mysql模块操作mysql数据库"><a href="#使用mysql模块操作mysql数据库" class="headerlink" title="使用mysql模块操作mysql数据库"></a>使用mysql模块操作mysql数据库</h2><h3 id="1-查询数据"><a href="#1-查询数据" class="headerlink" title="1.查询数据"></a>1.查询数据</h3><p>查询users表中所有的数据:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713215003242.png" alt="image-20220713215003242"></p>
<blockquote>
<p>注意：如果执行的是<strong>select</strong>查询语句，则执行的结果是<strong>数组</strong></p>
</blockquote>
<h3 id="2-插入数据"><a href="#2-插入数据" class="headerlink" title="2.插入数据"></a>2.插入数据</h3><p>向users表中新增数据，其中username为Spider-Man, password 为pcc321.示例代码如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713215445821.png" alt="image-20220713215445821"></p>
<blockquote>
<p>?符号可以进行数据的占位</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向users表中新增一条数据，其中username的值为Spider-Man，password的值为pcc123</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;Spider-Man&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;pcc123&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 定义待执行的SQL语句</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;insert into users (usernams,password) values (?,?)&#x27;</span>;</span><br><span class="line"></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, [user.<span class="property">username</span>, user.<span class="property">password</span>], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 执行sql语句失败</span></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 执行成功</span></span><br><span class="line">    <span class="comment">// 注意：如果执行的是insert into插入语句，则results是一个对象</span></span><br><span class="line">    <span class="comment">// 可以通过affectedRows属性，来判断是否插入数据成功</span></span><br><span class="line">    <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;插入数据成功！&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>注意：如果执行的是insert into插入语句，则results是一个对象，可以通过affectedRows属性，来判断是否插入数据成功</li>
<li>注意：数据的id具有唯一性，所以添加的数据可能不是按照正确顺序添加，使用过某一id的    数据就算被删除其id也不能被替代</li>
</ol>
</blockquote>
<h3 id="3-插入数据的便捷方式"><a href="#3-插入数据的便捷方式" class="headerlink" title="3.插入数据的便捷方式"></a>3.插入数据的便捷方式</h3><p>向表中新增数据时，如果数据对象的每个属性和数据表的字段一一对应， 则可以通过如下方式快速插入数据:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713221320032.png" alt="image-20220713221320032"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 演示插入数据的便捷方式</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    <span class="attr">usernams</span>: <span class="string">&#x27;Spider-man2&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;pcc456&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 定义待执行的SQL语句</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;insert into users set ?&#x27;</span>;</span><br><span class="line"><span class="comment">// 执行SQL语句</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, user, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;插入数据成功！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="4-更新数据"><a href="#4-更新数据" class="headerlink" title="4.更新数据"></a>4.更新数据</h3><p>可以通过以下方法，更新表中的数据：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713222055845.png" alt="image-20220713222055845"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.要更新的数据对象</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">usernams</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;000&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 2.定义SQL语句</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;update users set usernams=?,password=? where id=?&#x27;</span>;</span><br><span class="line"><span class="comment">// 3.执行sql语句</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, [user.<span class="property">usernams</span>, user.<span class="property">password</span>, user.<span class="property">id</span>], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更新数据成功！&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：执行了update语句后，执行的结果，也是一个对象，可以通过affectedRows判断是否更新成功</p>
</blockquote>
<h3 id="5-更新数据的便捷方式"><a href="#5-更新数据的便捷方式" class="headerlink" title="5.更新数据的便捷方式"></a>5.更新数据的便捷方式</h3><p>更新表数据时，如果数据对象的每个属性和数据表的字段一-对应， 则可以通过如下方式快速更新表数据:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713223115964.png" alt="image-20220713223115964"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 演示更新数据的便捷方式</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">usernams</span>: <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;000&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 定义SQL语句</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;update users set ? where id=?&#x27;</span>;</span><br><span class="line"><span class="comment">// 执行sql语句</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, [user, user.<span class="property">id</span>], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更新数据成功！&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="6-删除数据"><a href="#6-删除数据" class="headerlink" title="6.删除数据"></a>6.删除数据</h3><p>在删除数据时，推荐根据id这样的唯一标识，来删除对应的数据。示例如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713223644939.png" alt="image-20220713223644939"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除id为5的用户</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;delete from users where id=?&#x27;</span>;</span><br><span class="line"></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, <span class="number">5</span>, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除数据成功！&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="7-标记删除"><a href="#7-标记删除" class="headerlink" title="7.标记删除"></a>7.标记删除</h3><p>使用DELETE语句，会把真正的把数据从表中删除掉。为了保险起见，推荐使用标记删除的形式，来模拟删除的动作。</p>
<p>所谓的标记删除，就是在表中设置类似于status这样的状态字段，来标记当前这条数据是否被删除。<br>当用户执行了删除的动作时，我们并没有执行DELETE语句把数据删除掉，而是执行了UPDATE语句,将这条数据对应的status字段标记为删除即可。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713224853028.png" alt="image-20220713224853028"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标记删除</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;update users set status=? where id=?&#x27;</span>;</span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, [<span class="number">1</span>, <span class="number">6</span>], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;标记数据成功！&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js</title>
    <url>/found404.io/2022/06/30/Node-js/</url>
    <content><![CDATA[<h1 id="什么是Node-js"><a href="#什么是Node-js" class="headerlink" title="什么是Node.js"></a>什么是Node.js</h1><p><strong>Node.js</strong>是一个基于Chrome V8引擎的JavaScript运行环境</p>
<h2 id="Node-js中的JavaScript运行环境"><a href="#Node-js中的JavaScript运行环境" class="headerlink" title="Node.js中的JavaScript运行环境"></a>Node.js中的JavaScript运行环境</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655822357450-119a84ee-f87e-471f-adeb-96b9c664695e.png" alt="img"></p>
<p>注意：</p>
<ol>
<li>浏览器是JavaScript的前端运行环境</li>
<li>Node.js是JavaScript的后端运行环境</li>
<li>Node.js中无法调用DOM和BOM等浏览器内置API</li>
</ol>
<span id="more"></span>

<h2 id="Node-js框架"><a href="#Node-js框架" class="headerlink" title="Node.js框架"></a>Node.js框架</h2><p>Node.js作为-个JavaScript的运行环境,仅仅提供了基础的功能和API。然而，基于Node.js提供的这些基础能，很多强大</p>
<p>的工具和框架如雨后春笋，层出不穷,所以学会了Node.jis ，可以让前端程序员胜任更多的工作和岗位:</p>
<p>①基于Express框架(<a href="http://www.expressjs.com.cn/">http://www.expressjs.com.cn/</a>) ，可以快速构建Web应用</p>
<p>②基于Electron框架(<a href="https://electronjs.org/">https://electronjs.org/</a>) , 可以构建跨平台的桌面应用</p>
<p>③基于restify框架<a href="http://restify.com/">http://restify.com/</a>) ，可以快速构建API接口项目</p>
<p>④读写和操作数据库、创建实用的命令行工具辅助前端开发、etc..</p>
<h1 id="关于终端"><a href="#关于终端" class="headerlink" title="关于终端"></a>关于终端</h1><p>转为开发人员设计，用于实现人机交互的一种方式。</p>
<ul>
<li>win+r 打开运行输入cmd打开终端</li>
<li>在文件路径中输入cmd打开终端</li>
<li>按住shift+右键有一个powershell终端</li>
</ul>
<p><strong>常用的终端命令：</strong></p>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">node -v</td>
<td align="center">查看node.js版本</td>
</tr>
<tr>
<td align="center">cd  &#x2F;</td>
<td align="center">进入根目录</td>
</tr>
<tr>
<td align="center">cd ..</td>
<td align="center">去到上一层目录</td>
</tr>
<tr>
<td align="center">f:</td>
<td align="center">进入F盘</td>
</tr>
<tr>
<td align="center">cls</td>
<td align="center">清空终端</td>
</tr>
</tbody></table>
<p><strong>终端快捷键：</strong></p>
<ol>
<li><strong>使用↑键可以快速定位到上一次执行的命令</strong></li>
<li><strong>使用tab键能够快速补全路径</strong></li>
<li><strong>使用esc键能够快速清空当前输入的命令</strong></li>
</ol>
<h1 id="fs文件系统模块"><a href="#fs文件系统模块" class="headerlink" title="fs文件系统模块"></a>fs文件系统模块</h1><p>fs模块是Node.js官方提供的，用来操作文件的模块，它提供了一系列的方法和属性。用来满足用户对文件的操作需求。</p>
<p>例如：</p>
<ul>
<li>**fs.readFile( )**方法，用来读取指定文件中的内容</li>
<li>**fs.writeFile( )**方法，用来向指定文件中写入内容</li>
</ul>
<p>如果在javaScript代码中，使用fs模块来操作文件，则需要使用如下方式导入他：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655904379652-fb60eeb1-f9a9-4703-864e-e83eea12097f.png" alt="img"></p>
<h2 id="fs-readFile-的语法格式-读取文件内容"><a href="#fs-readFile-的语法格式-读取文件内容" class="headerlink" title="fs.readFile()的语法格式      读取文件内容"></a>fs.readFile()的语法格式      <em>读取文件内容</em></h2><p>使用fs.readFile()方法，可以读取指定文件中的内容，语法格式如下：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/a205835e3c0951ef.png" alt="png"></p>
<p>参数解读：</p>
<ul>
<li>参数1：<strong>必选</strong>参数，字符串，表示文件的路径。</li>
<li>参数2：可选参数，表示以什么<strong>编码格式</strong>来读取文件。</li>
<li>参数3：<strong>必选</strong>参数，文件读取完成后，通过回调函数拿到读取的结果。</li>
</ul>
<p>示例代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入fs模块  来操作文件</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 调用fs.readFile()方法读取文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数1：读取文件的存放路径</span></span><br><span class="line"><span class="comment">// 参数2：读取文件时候采用的编码格式 一般默认指定utf8</span></span><br><span class="line"><span class="comment">// 参数3：回调函数，拿到读取失败和成功的结果 err dataStr</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./files/11.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, dataStr</span>) &#123;</span><br><span class="line">    <span class="comment">// 2.1 打印失败的结果</span></span><br><span class="line">    <span class="comment">//如果读取成功，则err的值为null</span></span><br><span class="line">    <span class="comment">//如果读取失败，则err的值为错误对象 dataStr的值为undefined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------&#x27;</span>);</span><br><span class="line">    <span class="comment">// 2.2 打印成功的结果</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(dataStr);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>成功：</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/e41f9d8c61cbe03b.png" alt="png"></p>
<p><strong>失败：</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/58cc12468873bbe8.png" alt="png"></p>
<p>优化写法：</p>
<blockquote>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1a6b2b72ed2946a8.png" alt="png"></p>
</blockquote>
<h2 id="fs-writeFile-的语法格式-写入文件内容"><a href="#fs-writeFile-的语法格式-写入文件内容" class="headerlink" title="fs.writeFile( )的语法格式      写入文件内容"></a>fs.writeFile( )的语法格式      <em>写入文件内容</em></h2><p>使用fs.writeFile()方法，可以向指定文件中写入内容。语法格式如下：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/adf82be76daf111c.png" alt="png"></p>
<p>参数解读：</p>
<ul>
<li>参数1：<strong>必选</strong>参数，指定一个文件路径的字符串，表示文件的存放路径。</li>
<li>参数2：<strong>必选</strong>参数，表示要写入的内容。</li>
<li>参数3：可选参数，表示以什么格式写入文件内容，默认utf8。</li>
<li>参数4：<strong>必选</strong>参数，文件写入完成后的回调函数。</li>
</ul>
<p>代码示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入fs文件系统模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用fs.writeFile()方法，写入文件内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//参数1：表示文件的存放路径</span></span><br><span class="line"><span class="comment">//参数2：表示要写入的内容</span></span><br><span class="line"><span class="comment">//参数3：省略</span></span><br><span class="line"><span class="comment">//参数4：回调函数</span></span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;f:/files/2.txt&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="comment">// 2.1如果文件写入成功，则err的值等于null</span></span><br><span class="line">    <span class="comment">// 2.2如果文件写入失败，则err的值等于一个错误对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>优化写法：</p>
<blockquote>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/edd1798ffc5eec30.png" alt="png"></p>
</blockquote>
<h2 id="dirname解决路径拼接错误"><a href="#dirname解决路径拼接错误" class="headerlink" title="__dirname解决路径拼接错误"></a>__dirname解决路径拼接错误</h2><p>有时候出现路径拼接错误是因为提供了.&#x2F;或者..&#x2F;开头的相对路径导致</p>
<blockquote>
<p>解决方法:</p>
<ul>
<li>提供一个完整路径</li>
<li>但是移植性差,不利用代码维护</li>
<li>使用__dirname</li>
<li>__dirname代表的是当前目录路径</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(__dirname + <span class="string">&#x27;/files/2.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, dataStr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取失败&#x27;</span> + err.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取成功&#x27;</span> + dataStr);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="path路径模块"><a href="#path路径模块" class="headerlink" title="path路径模块"></a>path路径模块</h1><blockquote>
<p><strong>path模块</strong>是Node.js官方提供的,用来<strong>处理路径</strong>的模块.它提供了一系列的方法和属性,用来满足用户对路径的处理需求.</p>
<p>例如:</p>
<ul>
<li>path.join()方法,用来<strong>将多个路径片段拼接成一个完整的路径字符串</strong></li>
<li>path.basename()方法,用来从路径字符串中,将文件名解析出来</li>
</ul>
</blockquote>
<p>如果要在JavaScript代码中使用path模块来处理路径,则需要使用如下方式导入他:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="path-join-的语法格式"><a href="#path-join-的语法格式" class="headerlink" title="path.join()的语法格式"></a>path.join()的语法格式</h2><p>使用path.join()方法,可以把多个路径片段拼接为完整的路径字符串,语法格式如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.<span class="title function_">join</span>([...paths])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>参数解读:</p>
<ul>
<li>..paths&lt; string &gt;路径片段的序列</li>
<li>返回值:&lt; string &gt;</li>
</ul>
</blockquote>
<p>代码示例:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/2883715f9505b5a9.png" alt="png"></p>
<h2 id="path-basename-的语法格式"><a href="#path-basename-的语法格式" class="headerlink" title="path.basename()的语法格式"></a>path.basename()的语法格式</h2><p>使用path.basename()方法,可以获取路径中的最后一部分,经常通过这个方法获取路径中的文件名,语法格式如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.<span class="title function_">basename</span>(path[,ext])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>参数解读:</p>
<ul>
<li>path<code>&lt;string&gt;</code>必选参数,表示一个路径的字符串</li>
<li>ext<code>&lt;string&gt;</code>可选参数,表示文件扩展名</li>
<li>返回:<code>&lt;string&gt;</code>表示路径中的最后一部分</li>
</ul>
</blockquote>
<p>示例代码：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/e6b7240594ea3cf6.png" alt="png"></p>
<h2 id="path-extname-代码示例"><a href="#path-extname-代码示例" class="headerlink" title="path.extname()代码示例"></a>path.extname()代码示例</h2><blockquote>
<p>使用path.extname()方法，可以获取路径中的扩展名部分</p>
</blockquote>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/6f381844b033d682.png" alt="png"></p>
<h1 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h1><blockquote>
<p>什么是客户端？什么是服务器？</p>
<ol>
<li>在网络节点中，负责消耗资源的电脑，叫做<strong>客户端</strong></li>
<li><u>负责对外提供网络资源的电脑</u>，叫做<strong>服务器</strong></li>
</ol>
</blockquote>
<p>http模块是Node.js官方提供的，用来创建web服务器的模块，通过http模块提供的http.createServer()方法，就能方便把一台普通的电脑，变成一台web服务器，从而对外提供web资源服务。</p>
<p>如果希望使用http模块创建Web服务器，则需要导入他：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="进一步理解http模块的作用"><a href="#进一步理解http模块的作用" class="headerlink" title="进一步理解http模块的作用"></a>进一步理解http模块的作用</h2><blockquote>
<p>服务器和普通电脑的区别在于，服务器上安装了web服务器插件。例如：IIS，Apache等。通过安装这些服务器软件，就能把一台普通电脑变成一台web服务器。</p>
</blockquote>
<blockquote>
<p>在node.js中我们不需要使用IIS、Apache等这些第三方web服务器软件，因为我们可以基于Node.js提供的http模块，通过几行代码就能轻松手写一个服务器软件，从而对外提供web服务。</p>
</blockquote>
<h2 id="服务器相关概念"><a href="#服务器相关概念" class="headerlink" title="服务器相关概念"></a>服务器相关概念</h2><h3 id="1-IP地址"><a href="#1-IP地址" class="headerlink" title="1.IP地址"></a>1.IP地址</h3><p>IP地址就是互联网上每台计算机的唯-地址,因此IP地址具有唯一性。 如果把“个人电脑”比作”-台电话”，那么”IP地址”就相当于“电话号码”，只有在知道对方IP地址的前提下，才能与对应的电脑之间进行数据通信。</p>
<p>IP地址的格式:通常用”点分十进制”表示成(a.b.c.d) 的形式，其中, a,b,c,d 都是0~255之间的十进制整数。例如:用点分十进表示的IP地址(192.168.1.1)</p>
<p><strong>注意：</strong></p>
<ol>
<li>互联网中每台Web服务器，都有自己的IP地址，例如:大家可以在Windows的终端中运行ping www baidu.com命令,即可查看到百度服务器的IP地址。</li>
<li>在开发期间，自己的电脑既是一台服务器, 也是-个客户端，为了方便测试，可以在自己的浏览器中输入127.0.0.1 这个IP地址,就能把自己的电脑当做一台服务 器进行访问了.</li>
</ol>
<h3 id="2-域名和域名服务器"><a href="#2-域名和域名服务器" class="headerlink" title="2.域名和域名服务器"></a>2.域名和域名服务器</h3><p>尽管IP地址能够唯-地标记网络上的计算机，但IP地址是一长串数字,不直观，而且不便于记忆，于是人们又发明了另一套字符型的地址方案，即所谓的域名(Domain Name)地址</p>
<p>IP地址和域名是一对应的关系， 这份对应关系存放在一种叫做域名服务器(DNS, Domain name server)的电脑中。使用者只需通过好记的域名访问对应的服务器即可，对应的转换工作由域名服务器实现。因此，域名服务器就是提供IP地址和域名之间的转换服务的服务器。</p>
<p><strong>注意：</strong></p>
<ol>
<li>单纯使用IP地址，互联网中的电脑也能够正常工作。但是有了域名的加持，能让互联网的世界变得更加方便。</li>
<li>在开发测试期间，<strong>127.0.0.1</strong> 对应的域名是<strong>localhost</strong>,它们都代表我们自己的这台电脑，在使用效果上没有任何区别。</li>
</ol>
<h3 id="3-端口号"><a href="#3-端口号" class="headerlink" title="3.端口号"></a>3.端口号</h3><p>计算机中的端口号,就好像是现实生活中的门牌号一样。 通过门牌号,外卖小哥可以在整栋大楼众多的房间中，准确把外卖送到你的手中。<br>同样的道理，在一台电脑中,可以运行成百上千个web服务。每个web服务都对应-个唯的端口号. 客户端发送过来的网络请求,通过端口号,可以被准确地交给<strong>对应的web服务</strong>进行处理。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220628214815281.png" alt="image-20220628214815281"></p>
<p><strong>注意：</strong></p>
<ol>
<li>每个端口号不能同时被多个web服务器占用</li>
<li>在实际运用中URL中的80端口可以被省略</li>
</ol>
<h2 id="创建最基本的web服务器"><a href="#创建最基本的web服务器" class="headerlink" title="创建最基本的web服务器"></a>创建最基本的web服务器</h2><p><strong>创建web服务器的基本步骤</strong></p>
<blockquote>
<ol>
<li>导入http模块</li>
<li>创建web服务器实例</li>
<li>为服务器实例绑定<strong>require</strong>事件，<strong>监听客户端的请求</strong></li>
<li>启动服务器</li>
</ol>
</blockquote>
<h3 id="步骤1-导入http模块"><a href="#步骤1-导入http模块" class="headerlink" title="步骤1-导入http模块"></a>步骤1-导入http模块</h3><p>如果希望在自己电脑上创建一个web服务器，从而对外提供web服务，则需要导入http模块：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="步骤2-创建web服务器实例"><a href="#步骤2-创建web服务器实例" class="headerlink" title="步骤2-创建web服务器实例"></a>步骤2-创建web服务器实例</h3><p>调用**http.sreateServer()**方法，即可快速创建一个web服务器实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>();</span><br></pre></td></tr></table></figure>

<h3 id="步骤3-为服务器实例绑定request事件"><a href="#步骤3-为服务器实例绑定request事件" class="headerlink" title="步骤3-为服务器实例绑定request事件"></a>步骤3-为服务器实例绑定request事件</h3><p>为服务器实例绑定request事件，即可监听客户端发送过来的网络请求：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用服务器实例的.on()方法，为服务器绑定一个request事件</span></span><br><span class="line">sever.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 只要有客户端来请求我们的服务器，就会触发request事件，从而调用这个事件处理函数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Someone visit our web server&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="req请求对象"><a href="#req请求对象" class="headerlink" title="req请求对象"></a>req请求对象</h4><p>只要服务器接收了客户端的请求，就会调用server.on()为服务器绑定的request事件处理函数。如果想在事件处理函数中，访问与客户端相关的<strong>数据</strong>或者<strong>属性</strong>，就可以使用如下方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="function">(<span class="params">req</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// req 是请求对象，它包含了与客户端相关的数据和属性，例如：</span></span><br><span class="line">    <span class="comment">// req.url 是客户端请求的url地址</span></span><br><span class="line">    <span class="comment">// req.method 是客户端的method请求类型</span></span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">`Your request url is <span class="subst">$&#123;req.url&#125;</span>,and request method is <span class="subst">$&#123;req.method&#125;</span>`</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="res响应对象"><a href="#res响应对象" class="headerlink" title="res响应对象"></a>res响应对象</h4><p>在服务器的request使事件处理函数中，如果想访问与服务器相关的<strong>数据</strong>或<strong>属性</strong>，可以使用如下方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//req是请求对象，包含了与客户端相关的数据和属性</span></span><br><span class="line">    <span class="comment">// req.url是客户端请求的url地址</span></span><br><span class="line">    <span class="keyword">const</span> url = req.<span class="property">url</span>;</span><br><span class="line">    <span class="comment">// req.method是客户端请求的method类型</span></span><br><span class="line">    <span class="keyword">const</span> method = req.<span class="property">method</span></span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">`Your request url is <span class="subst">$&#123;url&#125;</span>,and request method is <span class="subst">$&#123;method&#125;</span>`</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">    <span class="comment">// 调用res.end()方法向客户端响应一些内容</span></span><br><span class="line">    res.<span class="title function_">end</span>(str);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="解决中文乱码问题"><a href="#解决中文乱码问题" class="headerlink" title="解决中文乱码问题"></a>解决中文乱码问题</h4><p>当调用res.end()方法，向客户端发送中文内容时候，就会出现乱码问题，此时，需要手动设置内容的编码格式：</p>
<p><code>res.setHeader(&#39;Content-Type&#39;, &#39;text/html;charset=utf-8&#39;);</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 发送内容包含中文</span></span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">`你请求的url地址是<span class="subst">$&#123;req.url&#125;</span>,请求的method类型是<span class="subst">$&#123;req.method&#125;</span>`</span>;</span><br><span class="line">    <span class="comment">// 调用res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/html;charset=utf-8&#x27;)方法</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">    <span class="comment">// 调用res.end()方法向客户端响应一些内容</span></span><br><span class="line">    res.<span class="title function_">end</span>(str);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="步骤4-启动服务器"><a href="#步骤4-启动服务器" class="headerlink" title="步骤4-启动服务器"></a>步骤4-启动服务器</h3><p>调用服务器实例的.listen()方法，即可启动当前的web服务器实例:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用server.listen(端口号，callback回调函数)方法，即可启动web服务器</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http server running at http//127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="根据不同的url相应不同的html内容"><a href="#根据不同的url相应不同的html内容" class="headerlink" title="根据不同的url相应不同的html内容"></a>根据不同的url相应不同的html内容</h2><p><strong>核心实现步骤：</strong></p>
<ol>
<li>获取<strong>请求的url地址</strong></li>
<li>设置<strong>默认的响应内容</strong>为<u>404 Not found</u></li>
<li>判断用户请求的是否为**&#x2F;<strong>或</strong>&#x2F;index.html**首页</li>
<li>判断用户请求的是否为**&#x2F;about.html**关于页面</li>
<li>设置<strong>Content-Type响应头</strong>,防止中文乱码</li>
<li>使用**res.end( )**把内容响应给客户端</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 获取请求的url地址</span></span><br><span class="line">    <span class="keyword">const</span> url = req.<span class="property">url</span>;</span><br><span class="line">    <span class="comment">// 2. 设置默认的响应内容为&lt;u&gt;404 Not found&lt;/u&gt;</span></span><br><span class="line">    <span class="keyword">let</span> content = <span class="string">`&lt;h1&gt;404 Not Found&lt;/h1&gt;`</span>;</span><br><span class="line">    <span class="comment">// 3. 判断用户请求的是否为/或/index.html首页</span></span><br><span class="line">    <span class="comment">// 4. 判断用户请求的是否为/about.html关于页面</span></span><br><span class="line">    <span class="keyword">if</span> (url === <span class="string">&#x27;/&#x27;</span> || url === <span class="string">&#x27;/index.html&#x27;</span>) &#123;</span><br><span class="line">        content = <span class="string">`&lt;h1&gt;首页&lt;/h1&gt;`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">&#x27;/about.html&#x27;</span>) &#123;</span><br><span class="line">        content = <span class="string">`&lt;h1&gt;关于页面&lt;/h1&gt;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5. 设置Content-Type响应头,防止中文乱码</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>);</span><br><span class="line">    <span class="comment">// 6. 使用res.end( )把内容响应给客户端</span></span><br><span class="line">    res.<span class="title function_">end</span>(content);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 4. 启动服务器</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server running at http://127.0.0.1:8080&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><h2 id="什么是模块化？"><a href="#什么是模块化？" class="headerlink" title="什么是模块化？"></a>什么是模块化？</h2><p><strong>模块化</strong>是指解决一个复杂问题时，自顶向下逐层<strong>把系统划分为若干模块的过程</strong>。对整个系统来说，<strong>模块是可以组合，分解，更换的单元</strong>。</p>
<p>编程领域中的模块化，就是遵守固定的规则，把一个大文件拆分成独立并相互依赖的多个小模块：</p>
<blockquote>
<p>把代码进行模块化拆分的好处：</p>
<ol>
<li>提高了代码的<strong>复用性</strong></li>
<li>提高了代码的<strong>可维护性</strong></li>
<li>可以实现<strong>按需加载</strong></li>
</ol>
</blockquote>
<h2 id="模块化规范"><a href="#模块化规范" class="headerlink" title="模块化规范"></a>模块化规范</h2><p><strong>模块化规范</strong>就是对代码进行模块化的拆分与组合时，需要遵循的那些规则。</p>
<p>例如：</p>
<ul>
<li>使用什么样的语法格式来<em>引入模块</em></li>
<li>在模块中使用什么样的语法格式<em>向外暴露成员</em></li>
</ul>
<p><strong>模块化的好处</strong>：大家都遵循同样的模块化规范写代码，降低了沟通的成本，极大方便了各个模块之间的相互调用，利人利己。</p>
<h2 id="Node-js中模块的分类"><a href="#Node-js中模块的分类" class="headerlink" title="Node.js中模块的分类"></a>Node.js中模块的分类</h2><p>Node.js中根据模块来源的不同，将模块分为了3大类，分别是：</p>
<ul>
<li><strong>内置模块</strong>（内置模块是Node.js官方提供的，例如：fs，path，http等）</li>
<li><strong>自定义模块</strong>（用户创建的每个js文件，都是自定义模块）</li>
<li><strong>第三方模块</strong>（由第三方开发出来的模块，并非官方提供的内置模块，也不用用户创建的自定义模块。使用前要先下载）</li>
</ul>
<h2 id="加载模块"><a href="#加载模块" class="headerlink" title="加载模块"></a>加载模块</h2><p>使用强大的require()方法，可以加在需要的内置模块，用户自定义模块，第三方模块进行使用。例如：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220630212456568.png" alt="image-20220630212456568"></p>
<p><strong>注意：</strong>使用require()方法加载其他模块时候，会执行被加载模块中的代码。</p>
<h2 id="Node-js中的模块作用域"><a href="#Node-js中的模块作用域" class="headerlink" title="Node.js中的模块作用域"></a>Node.js中的模块作用域</h2><h3 id="1-什么是模块作用域"><a href="#1-什么是模块作用域" class="headerlink" title="1.什么是模块作用域"></a>1.什么是模块作用域</h3><p>和函数作用域类似，在自定义模块中定义的变量，方法。等成员，只能在当前模块内被访问，这种模块级别的访问限制，叫做<strong>模块作用域</strong>；</p>
<h3 id="2-模块作用域的好处"><a href="#2-模块作用域的好处" class="headerlink" title="2.模块作用域的好处"></a>2.模块作用域的好处</h3><p><strong>防止全局变量污染的问题</strong></p>
<p>当两个js文件中有相同的变量，就会造成全局变量污染</p>
<h3 id="3-向外共享模块作用域中的成员"><a href="#3-向外共享模块作用域中的成员" class="headerlink" title="3.向外共享模块作用域中的成员"></a>3.向外共享模块作用域中的成员</h3><h4 id="1-module对象"><a href="#1-module对象" class="headerlink" title="1.module对象"></a>1.module对象</h4><p>在每个.js自定义模块中都有一个module对象，它里面存储了和当前模块有关的信息，打印如下：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220630221520536.png" alt="image-20220630221520536"></p>
<h4 id="2-module-exports对象"><a href="#2-module-exports对象" class="headerlink" title="2.module.exports对象"></a>2.module.exports对象</h4><p>在自定义模块中。可以使用module.exports对象，将模块内的成员共享出去，供外界使用。</p>
<p>外界用**require( )**方法导入自定义模块时候。得到的就是module.exports所指向对象。</p>
<blockquote>
<p>如果想要公开自定义模块中的一部分，可以直接为<code>module.exports</code>添加属性或者方法</p>
</blockquote>
<h4 id="3-共享成员时的注意点"><a href="#3-共享成员时的注意点" class="headerlink" title="3.共享成员时的注意点"></a>3.共享成员时的注意点</h4><p>使用require()方法导入模块时，导入的结果，<strong>永远以module.exports指向的对象为准。</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220630223935943.png" alt="image-20220630223935943"></p>
<h4 id="4-exports对象"><a href="#4-exports对象" class="headerlink" title="4.exports对象"></a>4.exports对象</h4><p>由于module.exports单词写起来比较复杂，为了简化向外共享成员的代码，Node 提供了<strong>exports</strong> 对象。默认情况下，<strong>exports 和module.exports指向同一个对象</strong>。最终共享的结果，还是以<strong>module.exports</strong>指向的对象为准。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220630224730743.png" alt="image-20220630224730743"></p>
<p>注意：</p>
<p>最终共享的结果，还是以<strong>module.exports</strong>指向的对象为准。</p>
<blockquote>
<p>如果module.exports这个老六偷偷指向了另一个对象，则以它为准😅</p>
</blockquote>
<h4 id="5-exports和module-exports的使用误区"><a href="#5-exports和module-exports的使用误区" class="headerlink" title="5.exports和module.exports的使用误区"></a>5.exports和module.exports的使用误区</h4><p>时刻谨记，<strong>require()<strong>模块时,得到的永远是</strong>module exports</strong>指向的对象:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220630225810795.png" alt="image-20220630225810795"></p>
<h3 id="Node-js中的模块化规范"><a href="#Node-js中的模块化规范" class="headerlink" title="Node.js中的模块化规范"></a>Node.js中的模块化规范</h3><p>Node.js遵循了CommonJs模块化规范。CommonJS规定了<strong>模块的特性和各模块之间相互依赖。</strong></p>
<p>CommonJS规定：</p>
<ol>
<li>每个模块内部，<strong>module</strong>变量代表当前模块</li>
<li>module变量是一个对象，它的exports属性，（即<strong>module.exports）是对外的接口</strong></li>
<li>加载某个模块，其实就是加载该模块的module.exports属性，<strong>require()方法用于加载模块</strong>。</li>
</ol>
<h1 id="npm与包"><a href="#npm与包" class="headerlink" title="npm与包"></a>npm与包</h1><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><h3 id="什么是包"><a href="#什么是包" class="headerlink" title="什么是包"></a>什么是包</h3><blockquote>
<p>Node.js中的<strong>第三方模块</strong>又叫做<strong>包。</strong></p>
<p>就像电脑和计算机指的是相同的东西。第三方模块和包指的是同一个概念。只不过叫法不同</p>
</blockquote>
<h3 id="包的来源"><a href="#包的来源" class="headerlink" title="包的来源"></a>包的来源</h3><p>不同于Node.js中的内置模块与自定义模块，包是由第三方个人或团队开发出来的，免费供所有人使用。</p>
<blockquote>
<p>注意：Node.js中的包都是免费开源的，不需要付费即可免费下载使用。</p>
</blockquote>
<h3 id="为什么需要包"><a href="#为什么需要包" class="headerlink" title="为什么需要包"></a>为什么需要包</h3><p>由于Node.js的内置模块仅提供了一些底层的API，导致在基于内置模块进行项目开发的时候，效率低。包是基于内置模块封装出来的，提供了更高级，更方便的API，极大的提高了开发效率。</p>
<p>包和内置模块之间的关系，类似于<strong>jQuery</strong>和<strong>浏览器API</strong>之间的关系。</p>
<h3 id="从哪里下载包"><a href="#从哪里下载包" class="headerlink" title="从哪里下载包"></a>从哪里下载包</h3><p>国外有家IT公司,叫做npm, Inc.这家公司旗下有一个非常著名的网站: <a href="https://www.npmjs.com/">https://www.npmjs.com/</a> .它是全球最大的包共享平台，你可以从这个网站上搜索到任何你需要的包，只要你有足够的耐心!<br>到目前位置，全球约1100多万的开发人员，通过这个包共享平台，开发并共享了超过120多万个包供我们使用。<br>npm, Inc. 公司提供了一个地址为<a href="https://registy.npmjs.org/%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%9D%A5%E5%AF%B9%E5%A4%96%E5%85%B1%E4%BA%AB%E6%89%80%E6%9C%89%E7%9A%84%E5%8C%85%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E4%BB%8E%E8%BF%99%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E4%B8%8B%E8%BD%BD%E8%87%AA%E5%B7%B1%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E5%8C%85%E3%80%82">https://registy.npmjs.org/的服务器，来对外共享所有的包，我们可以从这个服务器上下载自己所需要的包。</a></p>
<p><strong>注意：</strong></p>
<ul>
<li>从 <a href="https://www.npmjs.com/%E7%BD%91%E7%AB%99%E4%B8%8A%E6%90%9C%E7%B4%A2%E8%87%AA%E5%B7%B1%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E5%8C%85">https://www.npmjs.com/网站上搜索自己所需要的包</a></li>
<li>从<a href="https://registy.npmjs.org服务器上下载自己需要的包/">https://registy.npmjs.org服务器上下载自己需要的包</a></li>
</ul>
<h3 id="如何下载包"><a href="#如何下载包" class="headerlink" title="如何下载包"></a>如何下载包</h3><p>npm, Inc.公司提供了-一个包管理工具,我们可以使用这个包管理工具，从<a href="https://registry.npmis/">https://registry.npmis</a> org&#x2F;服务器把需要的包下载到本地使用。<br>这个包管理”工具的名字叫做Node Package Manager (简称npm包管理工具)，这个包管理工具随着Node.js的安装包-起被安装到了用户的电脑上。<br>大家可以在终端中执行<strong>npm-v</strong>命令,来查看自己电脑上所安装的npm包管理工具的版本号:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702100627668.png" alt="image-20220702100627668"></p>
<h2 id="npm初体验"><a href="#npm初体验" class="headerlink" title="npm初体验"></a>npm初体验</h2><h3 id="格式化时间高级做法"><a href="#格式化时间高级做法" class="headerlink" title="格式化时间高级做法"></a>格式化时间高级做法</h3><ol>
<li>使用npm包管理工具，在项目中安装格式化时间的包moment ，使用<code>npm install moment</code>或者<code>npm i moment</code>命令</li>
<li>使用require( )导入格式化时间的包</li>
<li>参考moment的官方API文档对时间进行格式化</li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702105458124.png" alt="image-20220702105458124"></p>
<h3 id="初次安装后多出的文件"><a href="#初次安装后多出的文件" class="headerlink" title="初次安装后多出的文件"></a>初次安装后多出的文件</h3><p>初次装包完成后，在项目文件夹下多-个叫做 <strong>node_ modules</strong>的文件夹和<strong>package-lock.json</strong>的配置文件。</p>
<p><strong>其中：</strong></p>
<ul>
<li><strong>node_modules</strong>文件夹用来存放所有已安装到项目中的包。require()导入第三方包时,就是从这个目录中查找并加载包。</li>
<li><strong>package-lock.json</strong>配置文件用来记录node. _modules目录下的每一个包的下载信息， 例如包的名字、版本号、下载地址等。</li>
</ul>
<p>注意:程序员不要手动修改node_ modules 或package-lock.json文件中的任何代码，npm包管理工具会自动维护它们。</p>
<h3 id="安装指定版本的包"><a href="#安装指定版本的包" class="headerlink" title="安装指定版本的包"></a>安装指定版本的包</h3><p>默认情况下，使用npm install命令安装包的时候，会自动安装最新版本的包。如果需要安装指定版本的包,可以在包名之后,通过@符号指定具体的版本，例如:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702105945239.png" alt="image-20220702105945239"></p>
<h4 id="包的语义化版本规范"><a href="#包的语义化版本规范" class="headerlink" title="包的语义化版本规范"></a>包的语义化版本规范</h4><p>包的版本号是以”点分十进制”形式进行定义的,总共有三位数字,例如 <em>2.24.0</em><br>其中每一位数字所代表的的含义如下:</p>
<ul>
<li><p>第1位数字:大版本</p>
</li>
<li><p>第2位数字:功能版本</p>
</li>
<li><p>第3位数字: Bug修复版本</p>
</li>
</ul>
<p>版本号提升的规则:只要前面的版本号增长了，则后面的版本号归零。</p>
<h4 id="包管理配置文件"><a href="#包管理配置文件" class="headerlink" title="包管理配置文件"></a>包管理配置文件</h4><p>npm规定，在项目根目录中，必须提供-个叫做 package.json的包管理配置文件。用来记录与项目有关的一一些配置信息。例如:</p>
<ul>
<li>项目的名称、版本号、描述等</li>
<li>项目中都用到了哪些包</li>
<li>哪些包只在开发期间会用到</li>
<li>那些包在开发和部署时都需要用到</li>
</ul>
<h5 id="dependencies节点"><a href="#dependencies节点" class="headerlink" title="dependencies节点"></a>dependencies节点</h5><p>package.json文件中，有一个<strong>dependencies</strong>节点，专门用来记录您使用<strong>npm install</strong>命令安装了哪些包。</p>
<h4 id="快速生成package-json"><a href="#快速生成package-json" class="headerlink" title="快速生成package.json"></a>快速生成package.json</h4><p>npm包管理工具提供了一个快捷命令，可以在执行命令时所处的目录中，快捷创建package.json这个包管理配置文件：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702115625776.png" alt="image-20220702115625776"></p>
<p>注意：</p>
<p>①上述命令只能在英文的目录下成功运行!所以，项目文件夹的名称-定要使用英文命名,不要使用中文,不能出现空格。<br>②运行npm install命令安装包的时候，npm包管理工具会自动把包的名称和版本号,记录到package.json中。</p>
<h4 id="git合作开发遇到的问题"><a href="#git合作开发遇到的问题" class="headerlink" title="git合作开发遇到的问题"></a>git合作开发遇到的问题</h4><p>在实际上开发中，上传至git的前提下会自动屏蔽掉node_modules文件中的所有第三方包。通过<code>.gitignore</code>配置文件忽略掉该文件。避免项目文件过大。</p>
<p>而在拿到项目的时候，可以通过<code>npm install</code>或者<code>npm i</code>指令安装所有你需要的第三方包。</p>
<h3 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h3><p>可以运行<code>npm uninstall</code>命令，来卸载指定的包：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702143705150.png" alt="image-20220702143705150"></p>
<p>注意：npm uninstall 命令执行后，会把卸载的包，自动从package.json的dependencies中移除掉</p>
<h3 id="devDependencies节点"><a href="#devDependencies节点" class="headerlink" title="devDependencies节点"></a>devDependencies节点</h3><p>如果某些包之在项目开发中会用到，在项目上线后不会用到，则建议把这些包记录到devDependencies节点中。与之对应的，如果某些包在开发和项目上线之后都需要用到，则建议把这些包记录到dependencies节点中。</p>
<p>使用如下命令：<code>npm i 包名 -D</code></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702144612559.png" alt="image-20220702144612559"></p>
<h2 id="淘宝NPM镜像服务器"><a href="#淘宝NPM镜像服务器" class="headerlink" title="淘宝NPM镜像服务器"></a>淘宝NPM镜像服务器</h2><p>淘宝在国内搭建了-一个服务器，专门把国外官方服务器上的包同步到国内的服务器，然后在国内提供下包的服务。从而极大的提高了下包的速度。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702145215179.png" alt="image-20220702145215179"></p>
<p><strong>扩展：</strong></p>
<p>镜像是一种文件存储形式。一个磁盘上的数据在另一个磁盘上存在完全相同的副本即为镜像</p>
<h3 id="切换npm的下包镜像源"><a href="#切换npm的下包镜像源" class="headerlink" title="切换npm的下包镜像源"></a>切换npm的下包镜像源</h3><p>下包的镜像源，指的是下包的服务器地址</p>
<ul>
<li><code>npm config get registry</code> 查看当前下包镜像源</li>
<li><code>npm config set registry=https://registry.npm.taobao.org/</code>将下包的镜像源切换为淘宝镜像源</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702145804759.png" alt="image-20220702145804759"></p>
<h3 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h3><p>为了更方便的切换下包的镜像源，我们可以安装nrm这个小工具，利用nrm提供的终端命令,可以快速查看和切换下包的镜像源。</p>
<ul>
<li><code>npm i nrm -g</code>通过npm包管理器，将nrm安装为全局可用的工具</li>
<li><code>nrm ls</code>查看所有可用镜像源</li>
<li><code>nrm use taobao</code>将下包的镜像源切换为淘宝镜像</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702150232535.png" alt="image-20220702150232535"></p>
<h2 id="包的分类"><a href="#包的分类" class="headerlink" title="包的分类"></a>包的分类</h2><h3 id="项目包"><a href="#项目包" class="headerlink" title="项目包"></a>项目包</h3><p>那些被安装到项目的<strong>node _modules</strong>目录中的包，都是项目包。</p>
<p>项目包又分为两类，分别是；</p>
<ul>
<li><strong>开发依赖包</strong>(被记录到<em>devDependencies</em>节点中的包，只在开发期间会用到)</li>
<li><strong>核心依赖包</strong>(被记录到<em>dependencies</em>节点中的包，在开发期间和项目.上线之后都会用到)</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702152312713.png" alt="image-20220702152312713"></p>
<h3 id="全局包"><a href="#全局包" class="headerlink" title="全局包"></a>全局包</h3><p>在执行<code>npm install </code>命令时，如果提供了-g 参数，则会把包安装为全局包。<br>全局包会被安装到<strong>C:\Users\用户目录\AppData\Roaming\npm\node_ modules</strong> 目录下。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702152638662.png" alt="image-20220702152638662"></p>
<p>注意：</p>
<ol>
<li>只有<strong>工具性质的包</strong>，才有全局安装的必要性，因为它们提供了好用的终端命令。</li>
<li>判断某个包是否需要全局安装后再能使用，可以参考官方提供的使用说明即可。</li>
</ol>
<h3 id="i5ting-toc"><a href="#i5ting-toc" class="headerlink" title="i5ting_toc"></a>i5ting_toc</h3><p>iting_toc是一个可以把md文档转为html页面的小工具,使用步骤如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702152934464.png" alt="image-20220702152934464"></p>
<h2 id="规范包结构"><a href="#规范包结构" class="headerlink" title="规范包结构"></a>规范包结构</h2><p>在清楚了包的概念以及如何下载和使用包之后，接下来,我们深入了解一下包的内部结构。</p>
<p>一个规范的包，它的组成结构,必须符合以下3点要求:</p>
<ol>
<li>包必须以单独的目录而存在</li>
<li>包的顶级目录下要必须包含package.json 这个包管理配置文件</li>
<li>package.json 中必须包含name, version, main这三个属性,分别代表包的名字版本号、包的入口。</li>
</ol>
<p> 注意:以上3点要求是一个规范的包结构必须遵守的格式，关于更多的约束，可以参考网站</p>
<h2 id="发布包"><a href="#发布包" class="headerlink" title="发布包"></a>发布包</h2><p>在符合规范包结构的前提下就可以自己制作一个包并发布到npm网站。</p>
<h3 id="关于包的规范"><a href="#关于包的规范" class="headerlink" title="关于包的规范"></a>关于包的规范</h3><h4 id="关于package-json文件"><a href="#关于package-json文件" class="headerlink" title="关于package.json文件"></a>关于package.json文件</h4><ul>
<li>name 发布包时的包名字，不可以与他人重复</li>
<li>version 包版本</li>
<li>mian 入口文件</li>
<li>description 被检索时所展示的描述</li>
<li>keywords 被检索的关键字</li>
<li>license 开源协议</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702165535367.png" alt="image-20220702165535367"></p>
<h4 id="遵循模块化规范"><a href="#遵循模块化规范" class="headerlink" title="遵循模块化规范"></a>遵循模块化规范</h4><p>入口文件写入到<code>index.js</code>文件下，方法文件放入src文件中</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702165828338.png" alt="image-20220702165828338"></p>
<h4 id="关于入口文件index-js"><a href="#关于入口文件index-js" class="headerlink" title="关于入口文件index.js"></a>关于入口文件index.js</h4><ol>
<li>dateNew&#x2F;escape是对象</li>
<li>需要挂载到module.exports</li>
<li>使用<code>...</code>运算符展开这两个对象</li>
<li>让他们的所有属性交给新的对象module.exports</li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702165855497.png" alt="image-20220702165855497"></p>
<h3 id="发布包-1"><a href="#发布包-1" class="headerlink" title="发布包"></a>发布包</h3><p>在npm官网注册好账号后在终端登录账户</p>
<p>使用指令<code>npm login </code></p>
<p>依次输入用户名 - 密码 - 邮箱</p>
<p><strong>注意：</strong><u>镜像服务器必须是npm官方地址</u></p>
<h3 id="删除包"><a href="#删除包" class="headerlink" title="删除包"></a>删除包</h3><p>运行<code>npm unpublish 包名 --force</code>命令，即可从npm删除已发布的包。</p>
<p>注意：</p>
<ol>
<li><code>npm unpublish</code>命令只能删除72小时以内发布的包</li>
<li><code>npm unpublish</code>删除的包，在24小时内不允许重复发布</li>
<li>发布包的时候要慎重，尽量不要往npm上发布没有意义的包!</li>
</ol>
<h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><h2 id="Express简介"><a href="#Express简介" class="headerlink" title="Express简介"></a>Express简介</h2><h3 id="什么是Express"><a href="#什么是Express" class="headerlink" title="什么是Express"></a>什么是Express</h3><p>官方给出的概念: Express 是基于Node.js平台,快速、开放、极简的Web开发框架。<br>通俗的理解: Express 的作用和Node.js内置的http模块类似，是专门用来创建Web服务器的。<br>Express的本质:就是一个npm上的第三方包，提供了快速创建Web服务器的便捷方法。</p>
<blockquote>
<p>Express的中文官网:. <a href="http://www.expressjs.com.cn/">http://www.expressjs.com.cn/</a></p>
</blockquote>
<h2 id="EXpress基本使用"><a href="#EXpress基本使用" class="headerlink" title="EXpress基本使用"></a>EXpress基本使用</h2><h3 id="Express安装"><a href="#Express安装" class="headerlink" title="Express安装"></a>Express安装</h3><p>在项目所处目录中，使用<code>npm install express@4.17.1</code>安装指定版本或者<code>npm install express --save</code>安装最新版本</p>
<h3 id="创建基本的web服务器"><a href="#创建基本的web服务器" class="headerlink" title="创建基本的web服务器"></a>创建基本的web服务器</h3><ol>
<li>导入express模块</li>
<li>创建web服务器</li>
<li>启动web服务器</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.导入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 2.创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 3.启动web服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;express server running at http://127.0.0.1&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="监听GET请求"><a href="#监听GET请求" class="headerlink" title="监听GET请求"></a>监听GET请求</h3><p>通过<code>app.get()</code>方法，可以监听客户端的GET请求，具体的语法格式如下：</p>
<ul>
<li>参数1：客户端请求的URL地址</li>
<li>参数2：请求对应的处理函数<ul>
<li>​		req：请求对象（包含了与请求相关的属性和方法）</li>
<li>​        res：响应对象（包含了与响应相关的属性与方法）</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;请求URL&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;<span class="comment">/*处理函数*/</span>&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="监听POST请求"><a href="#监听POST请求" class="headerlink" title="监听POST请求"></a>监听POST请求</h3><p>通过<code>app.post()</code>方法，可以监听客户端的POST请求，具体语法如下：</p>
<ul>
<li>参数1：客户端请求的URL地址</li>
<li>参数2：请求对应的处理函数<ul>
<li>​		req：请求对象（包含了与请求相关的属性和方法）</li>
<li>​        res：响应对象（包含了与响应相关的属性与方法）<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;请求URL&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;<span class="comment">/*处理函数*/</span>&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="把内容响应给客户端"><a href="#把内容响应给客户端" class="headerlink" title="把内容响应给客户端"></a>把内容响应给客户端</h3><p>通过<code>res.send()</code>方法，可以把处理好的内容，发送给客户端：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 向客户端发送JSON请求</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">        <span class="attr">gender</span>:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 向客户端发送文本请求</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;请求成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="获取URL中携带的查询参数"><a href="#获取URL中携带的查询参数" class="headerlink" title="获取URL中携带的查询参数"></a>获取URL中携带的查询参数</h3><p>通过<code>req.query</code>对象，可以访问到客户端通过<strong>查询字符串</strong>的形式，发送到服务器的参数:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702200820315.png" alt="image-20220702200820315"></p>
<h3 id="获取URL中的动态参数"><a href="#获取URL中的动态参数" class="headerlink" title="获取URL中的动态参数"></a>获取URL中的动态参数</h3><p>通过req.params对象，可以访问到URL中，通过：匹配到的动态参数：</p>
<blockquote>
<p>:id并非固定写法，”:”才是，id是可变的</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// url地址中，可以通过:参数名的形式，匹配动态参数值</span></span><br><span class="line"><span class="comment">// 注意：这里的:id是一个动态的参数</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// req.params 是动态匹配到的URL参数，默认也是一个空对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 里面存放着通过:动态匹配到的参数值</span></span><br><span class="line">    res.<span class="title function_">send</span>(req.<span class="property">params</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="托管静态资源"><a href="#托管静态资源" class="headerlink" title="托管静态资源"></a>托管静态资源</h2><h3 id="1-express-static"><a href="#1-express-static" class="headerlink" title="1.express.static()"></a>1.express.static()</h3><p>express提供了一个非常好用的函数，叫做<code>express.static()</code>,通过它,我们可以非常方便地创建一个静态资源服务器。<br>例如，通过如下代码就可以将public 目录下的图片、CSS 文件、JavaScript 文件对外开放访问了:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意: Express 在指定的静态目录中查找文件,并对外提供资源的访问路径。<br>因此，存放静态文件的目录名不会出现在URL中。</p>
</blockquote>
<h3 id="2-托管多个静态目录"><a href="#2-托管多个静态目录" class="headerlink" title="2.托管多个静态目录"></a>2.托管多个静态目录</h3><p>当有两个文件都需要开放自己创建静态服务器，可以反复调用<code>express.static()</code>方法</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704201533438.png" alt="image-20220704201533438"></p>
<p>访问静态资源文件时，express.static() 函数会根据目录的添加顺序查找所需的文件。<em>优先级总是第一个</em></p>
<h3 id="3-挂载路径前缀"><a href="#3-挂载路径前缀" class="headerlink" title="3.挂载路径前缀"></a>3.挂载路径前缀</h3><p>如果希望在托管的静态资源访问路径之前，挂载路径前缀，则可以使用如下的方式:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704201812592.png" alt="image-20220704201812592"></p>
<p>现在，你就可以通过带有 &#x2F;public 前缀地址来访问 public 目录中的文件了:</p>
<ul>
<li><a href="http://localhost:3000/public/images/kitten.jpg">http://localhost:3000/public/images/kitten.jpg</a></li>
<li><a href="http://localhost:3000/publicss/style.css">http://localhost:3000/publicss/style.css</a></li>
<li><a href="http://localhost:3000/public/js/appjis">http://localhost:3000/public/js/appjis</a></li>
</ul>
<h2 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h2><h3 id="为什么使用nodemon"><a href="#为什么使用nodemon" class="headerlink" title="为什么使用nodemon"></a>为什么使用nodemon</h3><p>在编写调试Node.js项目的时候,如果修改了项目的代码,则需要频繁的手动close掉,然后再重新启动,非常繁琐。<br>现在,我们可以使用noderaon (<a href="https://www.npmjs.com/package/nodemon">https://www.npmjs.com/package/nodemon</a>) 这个工具， 它能够监听项目文件的变动，当代码被修改后，nodemon 会自动帮我们重启项目，极大方便了开发和调试。</p>
<p>使用指令<code>npm i -g nodemon</code>下载</p>
<h3 id="使用nodemon"><a href="#使用nodemon" class="headerlink" title="使用nodemon"></a>使用nodemon</h3><p>通过<code>nodemon &#39;js文件&#39;</code>来启动服务器，当更改代码后，就不需要再重启服务器，nodemon会自动重启服务器。</p>
<h1 id="Express路由"><a href="#Express路由" class="headerlink" title="Express路由"></a>Express路由</h1><h2 id="路由的概念"><a href="#路由的概念" class="headerlink" title="路由的概念"></a>路由的概念</h2><h3 id="现实生活中的路由"><a href="#现实生活中的路由" class="headerlink" title="现实生活中的路由"></a>现实生活中的路由</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704204921200.png" alt="image-20220704204921200"></p>
<blockquote>
<p>在这里，路由是按键与服务之间的映射关系</p>
</blockquote>
<h2 id="Express中的路由"><a href="#Express中的路由" class="headerlink" title="Express中的路由"></a>Express中的路由</h2><p>在Express中,路由指的是客户端的请求与服务器处理函数之间的映射关系。<br>Express中的路由分3部分组成，分别是请求的<strong>类型、请求的URL地址、处理函数，</strong>格式如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">METHOD</span>(<span class="variable constant_">PATH</span>,<span class="variable constant_">HANDLER</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Express中路由的例子"><a href="#Express中路由的例子" class="headerlink" title="Express中路由的例子"></a>Express中路由的例子</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//匹配GET请求，且请求URL为 / </span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Hello World！&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配POST请求，且请求URL为 /</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Got a POST requset&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="路由的匹配过程"><a href="#路由的匹配过程" class="headerlink" title="路由的匹配过程"></a>路由的匹配过程</h2><p>每当-一个请求到达服务器之后,需要先经过路由的匹配，只有匹配成功之后，才会调用对应的处理函数。<br>在匹配时，会按照路由的顺序进行四配，如果请求类型和请求的URL同时匹配成功，则Express会将这次请求，转交给对应的function函数进行处理。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704205953632.png" alt="image-20220704205953632"></p>
<p><strong>路由匹配的注意点:</strong><br>①按照定义的先后顺序进行匹配<br>②请求类型和请求的URL同时匹配成功，才会调用对应的处理函数</p>
<h2 id="路由的使用"><a href="#路由的使用" class="headerlink" title="路由的使用"></a>路由的使用</h2><h3 id="1-简单的用法"><a href="#1-简单的用法" class="headerlink" title="1.简单的用法"></a>1.简单的用法</h3><p>在Express中使用路由最简单的方式，就是把路由挂载到app上,示例代码如下: </p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704210606633.png" alt="image-20220704210606633"></p>
<h3 id="2-模块化路由"><a href="#2-模块化路由" class="headerlink" title="2.模块化路由"></a>2.模块化路由</h3><p>为了方便对路由进行模块化的管理，Express 不建议将路由直接挂载到app.上,而是推荐将路由抽离为单独的模块。<br>将路由抽离为单独模块的步骤如下:</p>
<ol>
<li>创建路由模块对应的js文件</li>
<li>调用express.Router(  )函数创建路由对象</li>
<li>向路由对象上挂载具体的路由</li>
<li>使用module.exports向外共享路由对象</li>
<li>使用app.use(  )函数注册路由模块</li>
</ol>
<h4 id="2-1创建路由模块"><a href="#2-1创建路由模块" class="headerlink" title="2.1创建路由模块"></a>2.1创建路由模块</h4><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704211721516.png" alt="image-20220704211721516"></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704211805998.png" alt="image-20220704211805998"></p>
<h4 id="2-2注册路由模块"><a href="#2-2注册路由模块" class="headerlink" title="2.2注册路由模块"></a>2.2注册路由模块</h4><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704212429225.png" alt="image-20220704212429225"></p>
<p>注意：**app.use(  )**函数的作用。就是用来注册全局中间件</p>
<h4 id="2-3为路由模块添加前缀"><a href="#2-3为路由模块添加前缀" class="headerlink" title="2.3为路由模块添加前缀"></a>2.3为路由模块添加前缀</h4><p>类似于托管静态资源时，为静态资源统一挂载访问前缀一样,路由模块添加前缀的方式也非常简单:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704212854019.png" alt="image-20220704212854019"></p>
<h2 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h2><h3 id="现实中的例子"><a href="#现实中的例子" class="headerlink" title="现实中的例子"></a>现实中的例子</h3><p>在处理污水的时候，一般都要经过三个处理环节， 从而保证处理过后的废水，达到排放标准。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704213133927.png" alt="image-20220704213133927"></p>
<p>处理污水的三个中间环节，就可以叫做中间件。</p>
<h3 id="中间件的调用流程"><a href="#中间件的调用流程" class="headerlink" title="中间件的调用流程"></a>中间件的调用流程</h3><p>当一个请求到达Express 的服务器之后，可以连续调用多个中间件，从而对这次请求进行预处理。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704213408392.png" alt="image-20220704213408392"></p>
<h3 id="中间件的格式"><a href="#中间件的格式" class="headerlink" title="中间件的格式"></a>中间件的格式</h3><p>Express的中间件，本质上就是一个function处理函数，Express 中间件的格式如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704213619533.png" alt="image-20220704213619533"></p>
<p>注意:中间件函数的形参列表中，<strong>必须包含next参数。</strong>而路由处理函数中只包含req和res.</p>
<h3 id="next函数的作用"><a href="#next函数的作用" class="headerlink" title="next函数的作用"></a>next函数的作用</h3><p><strong>next函数</strong>是实现多个中间件连续调用的关键，它表示把流转关系转交给下一个中间件或路由。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704213842958.png" alt="image-20220704213842958"></p>
<h2 id="使用Express中间件"><a href="#使用Express中间件" class="headerlink" title="使用Express中间件"></a>使用Express中间件</h2><h3 id="定义中间件函数"><a href="#定义中间件函数" class="headerlink" title="定义中间件函数"></a>定义中间件函数</h3><p>可以通过如下的方式，定义一个最简单的中间件函数:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个简单的中间件函数</span></span><br><span class="line"><span class="keyword">const</span> mw = <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个简单的中间件函数&#x27;</span>);</span><br><span class="line">    <span class="comment">// 把流转关系转交给下一个中间件或路由</span></span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="全局生效的中间件"><a href="#全局生效的中间件" class="headerlink" title="全局生效的中间件"></a>全局生效的中间件</h3><p>客户端发起的任何请求，到达服务器之后,都会触发的中间件，叫做全局生效的中间件。<br>通过调用<code>app.use(mw);</code>即可定义一个全局生效的中间件，示例代码如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 定义一个简单的中间件函数</span></span><br><span class="line"><span class="keyword">const</span> mw = <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个简单的中间件函数&#x27;</span>);</span><br><span class="line">    <span class="comment">// 把流转关系转交给下一个中间件或路由</span></span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 将mw注册为全局生效的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(mw);</span><br><span class="line"><span class="comment">//------------------------------------------------------------------</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了/路由&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home page&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了/user 路由&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;User page&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>简化合并写法：</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704215434074.png" alt="image-20220704215434074"></p>
<h3 id="定义多个全局中间件"><a href="#定义多个全局中间件" class="headerlink" title="定义多个全局中间件"></a>定义多个全局中间件</h3><p>可以使用app.use0连续定义多个全局中间件。客户端请求到达服务器之后，会按照中间件定义的先后顺序依次进行调用，示例代码如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义第一个全局中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了第一个全局中间件&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 定义第二个全局中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了第二个全局中间件&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home page!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="局部生效的中间件"><a href="#局部生效的中间件" class="headerlink" title="局部生效的中间件"></a>局部生效的中间件</h3><p>不使用<strong>app.use（）</strong>定义的中间件，叫做局部生效的中间件,示例代码如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义中间件函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw1</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了第一个全局中间件&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 创建路由 将参数添加在路由中</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, mw1, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home page!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;User page!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>定义多个局部生效的中间件：</strong></p>
<p>可以在路由中，通过如下两种等价的方式，使用多个局部中间件：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704223103512.png" alt="image-20220704223103512"></p>
<h2 id="中间件的作用"><a href="#中间件的作用" class="headerlink" title="中间件的作用"></a>中间件的作用</h2><p>多个中间件之间，共享同- -份req和res.基于这样的特性，我们可以在上游的中间件中，统-为req或res对象添加自定义的属性或方法，供下游的中间件或路由进行使用。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704215943188.png" alt="image-20220704215943188"></p>
<h2 id="中间件注意事项"><a href="#中间件注意事项" class="headerlink" title="中间件注意事项"></a>中间件注意事项</h2><ol>
<li>一定要在路由之前注册中间件(除了错误级别中间件)</li>
<li>客户端发送过来的请求，可以连续调用多个中间件进行处理</li>
<li>执行完中间件的业务代码之后，不要忘记调用next(函数</li>
<li>为了防止代码逻辑混乱，调用next(函数后不要再写额外的代码</li>
<li>连续调用多个中间件时，多个中间件之间，共享req和res对象</li>
</ol>
<h2 id="中间件分类"><a href="#中间件分类" class="headerlink" title="中间件分类"></a>中间件分类</h2><p>为了方便大家理解和记忆中间件的使用，Express 官方把常见的中间件用法，分成了5大类，分别是:</p>
<ol>
<li>应用级别的中间件</li>
<li>路由级别的中间件</li>
<li>错误级别的中间件</li>
<li>Express 内置的中间件</li>
<li>第三方的中间件</li>
</ol>
<h3 id="应用级别中间件"><a href="#应用级别中间件" class="headerlink" title="应用级别中间件"></a>应用级别中间件</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704225836330.png" alt="image-20220704225836330"></p>
<h3 id="路由级别中间件"><a href="#路由级别中间件" class="headerlink" title="路由级别中间件"></a>路由级别中间件</h3><p>绑定到express.Router0实例上的中间件，叫做路由级别的中间件。它的用法和应用级别中间件没有任何区别。只不过，应用级别中间件是绑定到app实例上，路由级别中间件绑定到router实例上,代码示例如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704230207988.png" alt="image-20220704230207988"></p>
<h3 id="错误级别中间件"><a href="#错误级别中间件" class="headerlink" title="错误级别中间件"></a>错误级别中间件</h3><p>错误级别中间件的作用:专门用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题。<br>格式:错误级别中间件的function 处理函数中,必须有4个形参,形参顺序从前到后，分别是(err, req, res, next)。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704230903532.png" alt="image-20220704230903532"></p>
<p><strong>注意:错误级别的中间件,必须注册在所有路由之后!</strong></p>
<h3 id="Express内置中间件"><a href="#Express内置中间件" class="headerlink" title="Express内置中间件"></a>Express内置中间件</h3><p>自Express 4.16.0版本开始，Express 内置了3个常用的中间件,极大的提高了Express项目的开发效率和体验:<br>①<strong>express.static</strong> 快速托管静态资源的内置中间件,例如: HTML文件、 图片、CSS 样式等(无兼容性)<br>②<strong>express.json</strong> 解析JSON格式的请求体数据(有兼容性,仅在4.16.0+版本中可用)<br>③<strong>express.urlencoded</strong> 解析URL-encoded格式的请求体数据(有兼容性，仅在4.16.0+版本中可用)</p>
<p><strong>express.json</strong>实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置中间件</span></span><br><span class="line"><span class="comment">// 通过express.json()解析表单中的json格式数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在服务器中可以使用req.body这个属性来接受客户端发送过来的请求体</span></span><br><span class="line">    <span class="comment">// 默认情况下，如果不配置 解析表单数据的中间件，默认为undefined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>express.urlencoded</strong>实例：</p>
<blockquote>
<p>express.urlencoded({ extended: false }) 固定写法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置中间件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过express.urlencoded()解析表单中的url-encoded格式的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/book&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="comment">// 在服务器中可以使用req.body这个属性来获取json格式的表单和url-encoded格式数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="第三方的中间件"><a href="#第三方的中间件" class="headerlink" title="第三方的中间件"></a>第三方的中间件</h3><p>非Express官方内置的，而是由第三方开发出来的中间，叫做第三方中间件，在项目中，大家可以按需下载并配置第三方中间件，从而提高项目的开发效率。</p>
<p>例如：在<a href="mailto:&#x65;&#120;&#112;&#114;&#x65;&#x73;&#x73;&#64;&#52;&#x2e;&#x31;&#x36;&#46;&#48;">&#x65;&#120;&#112;&#114;&#x65;&#x73;&#x73;&#64;&#52;&#x2e;&#x31;&#x36;&#46;&#48;</a>之前的版本中，经常使用body-parser这个第三方中间件，来解析请求体数据，使用步骤如下：</p>
<ol>
<li>运行npm install body-parser安装中间件</li>
<li>使用require导入中间件</li>
<li>使用app.use()注册并且使用中间件</li>
</ol>
<h2 id="使用Express写接口"><a href="#使用Express写接口" class="headerlink" title="使用Express写接口"></a>使用Express写接口</h2><h3 id="1-创建基本的服务器"><a href="#1-创建基本的服务器" class="headerlink" title="1.创建基本的服务器"></a>1.创建基本的服务器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ........</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-创建API路由模块"><a href="#2-创建API路由模块" class="headerlink" title="2.创建API路由模块"></a>2.创建API路由模块</h3><p>首先写一个模块化路由并暴露出去</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模块化路由</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载对应的路由</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向外暴露路由</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = routers;</span><br></pre></td></tr></table></figure>

<p>导入模块化路由并将路由模块挂载到中间件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./14.APIrouter&#x27;</span>);</span><br><span class="line"><span class="comment">// 把路由模块注册到app上(中间件)</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-编写GET接口"><a href="#3-编写GET接口" class="headerlink" title="3.编写GET接口"></a>3.编写GET接口</h3><p>在路由模块 挂载对应的路由：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模块化路由模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routers = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载对应的路由</span></span><br><span class="line">routers.<span class="title function_">get</span>(<span class="string">&#x27;/get&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过req.query获取客户端通过查询字符串 发送到服务器的数据</span></span><br><span class="line">    <span class="keyword">const</span> query = req.<span class="property">query</span>;</span><br><span class="line">    <span class="comment">// 调用res.send()方法,向客户端相应处理的数据</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">0</span>, <span class="comment">// 0处理成功,1处理失败</span></span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;GET 请求成功!&#x27;</span>, <span class="comment">// 状态的描述</span></span><br><span class="line">        <span class="attr">data</span>: query <span class="comment">//需要响应给客户端的数据</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向外暴露路由</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = routers;</span><br></pre></td></tr></table></figure>

<h3 id="4-编写POST请求"><a href="#4-编写POST请求" class="headerlink" title="4.编写POST请求"></a>4.编写POST请求</h3><p>使用post请求需要配置解析表单数据的中间件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置解析表单数据的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> routers = <span class="built_in">require</span>(<span class="string">&#x27;./14.APIrouter&#x27;</span>);</span><br><span class="line"><span class="comment">// 把路由模块注册到app上(中间件) 并添加前缀&#x27;/api&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, routers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在路由模块编写POST接口：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模块化路由模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routers = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载对应的路由</span></span><br><span class="line"><span class="comment">// get接口</span></span><br><span class="line">routers.<span class="title function_">get</span>(<span class="string">&#x27;/get&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过req.query获取客户端通过查询字符串 发送到服务器的数据</span></span><br><span class="line">    <span class="keyword">const</span> query = req.<span class="property">query</span>;</span><br><span class="line">    <span class="comment">// 调用res.send()方法,向客户端相应处理的数据</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">0</span>, <span class="comment">// 0处理成功,1处理失败</span></span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;GET 请求成功!&#x27;</span>, <span class="comment">// 状态的描述</span></span><br><span class="line">        <span class="attr">data</span>: query <span class="comment">//需要响应给客户端的数据</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// post接口</span></span><br><span class="line">routers.<span class="title function_">post</span>(<span class="string">&#x27;/post&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//通过req.body获取请求体中包含的url-encoded格式的数据</span></span><br><span class="line">    <span class="keyword">const</span> body = req.<span class="property">body</span>;</span><br><span class="line">    <span class="comment">// 调用res.send()方法,向客户端响应结果</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;POST 请求成功!&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: body</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 向外暴露路由</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = routers;</span><br></pre></td></tr></table></figure>

<h3 id="CORS跨域资源共享"><a href="#CORS跨域资源共享" class="headerlink" title="CORS跨域资源共享"></a>CORS跨域资源共享</h3><h4 id="1-接口的跨域问题"><a href="#1-接口的跨域问题" class="headerlink" title="1.接口的跨域问题"></a>1.接口的跨域问题</h4><p>刚才编写的GET和POST接口，存在一个严重问题：<strong>不支持跨域请求</strong></p>
<p>解决接口跨域问题的方案主要有两种：</p>
<ol>
<li>CORS（主流解决方案，推荐）</li>
<li>JSONP（有缺陷的解决方案，只支持GET请求）</li>
</ol>
<h4 id="2-使用cors中间件解决跨域问题"><a href="#2-使用cors中间件解决跨域问题" class="headerlink" title="2.使用cors中间件解决跨域问题"></a>2.使用cors中间件解决跨域问题</h4><p>cors是express的一个第三方中间件。通过安装和配置cors中间件。可以很方便的解决跨域问题，使用步骤如下：</p>
<ol>
<li>运行<code>npm install cors</code>安装中间件</li>
<li>使用<code>const cors = require(&#39;cors&#39;)</code>导入中间件</li>
<li>在路由之前调用<code>app.use(cors())</code>配置中间件</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 配置解析表单数据的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 一定要在路由之前，配置cors这个中间件，从而解决接口的跨域问题</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br><span class="line"><span class="comment">//-----------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> routers = <span class="built_in">require</span>(<span class="string">&#x27;./14.APIrouter&#x27;</span>);</span><br><span class="line"><span class="comment">// 把路由模块注册到app上(中间件) 并添加前缀&#x27;/api&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, routers);</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="3-什么是cors"><a href="#3-什么是cors" class="headerlink" title="3.什么是cors"></a>3.什么是cors</h4><p>CORS (Cross-Origin Resource Sharing,跨域资源共享)由-系列HTTP响应头组成，这些HTTP响应头决定浏览器是否阻止前端JS代码跨域获取资源。</p>
<p>浏览器的网源安全策略默认会阻止网页“跨域”获取资源。但如果接口服务器配熏了CORS相关的HTTP响应头，就可以解除浏览器端的跨域访问限制，</p>
<h4 id="4-cors注意事项"><a href="#4-cors注意事项" class="headerlink" title="4.cors注意事项"></a>4.cors注意事项</h4><ol>
<li>cors只要在服务器端进行配置，客户端浏览器无需做任何额外的配置，即可请求开启了cors的接口。</li>
<li>cors在浏览器中有兼容性，只有支持XMLHttpPequest Level2的浏览器，才能正常访问开启了CORS的服务端接口（例如：IE10，Chrome4+，FireFox3.5+）</li>
</ol>
<h4 id="5-CORS响应头-Access-Control-Allow-Origin"><a href="#5-CORS响应头-Access-Control-Allow-Origin" class="headerlink" title="5.CORS响应头 - Access-Control-Allow-Origin"></a>5.CORS响应头 - Access-Control-Allow-Origin</h4><p>响应头部中可以携带一个Access-Control-Allow-Origin字段，其语法如下；</p>
<p><code>Access-Control-Allow-Origin:&lt;origin&gt;|*</code></p>
<p>其中，origin参数的值制定了允许访问该资源的外域URL</p>
<p>例如：下面的字段值将只允许来自<a href="http://itcast.cn的请求：">http://itcast.cn的请求：</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;http://itcast.cn&#x27;</span>);</span><br></pre></td></tr></table></figure>

<hr>
<p>如果指定了Access-Control-Allow-Origin字段的值为通配符*，表示允许来自任何域的请求。示例代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,*);</span><br></pre></td></tr></table></figure>

<h4 id="6-CORS响应头部-Access-Control-Allow-Headers"><a href="#6-CORS响应头部-Access-Control-Allow-Headers" class="headerlink" title="6.CORS响应头部- Access-Control-Allow-Headers"></a>6.CORS响应头部- Access-Control-Allow-Headers</h4><p>默认情况下，CORS仅支持客户端向服务器发送如下的9个请求头:<br>Accept、 Accept-L anguage、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、 Width 、Content-Type (值仅限于 text&#x2F;plain. multipart&#x2F;form-data、 application&#x2F;x-www-form-urlencoded 三者之一)<br>如果客户端向服务器发送了额外的请求头信息，则需要在服务器端，通过Access-Control-Allow-Headers对额外的请求头进行声明，否则这次请求会失败!</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>,<span class="string">&#x27;Content-Type,x-Custom-Header&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="7-CORS响应头部-Access-Control-Allow-Methods"><a href="#7-CORS响应头部-Access-Control-Allow-Methods" class="headerlink" title="7.CORS响应头部- Access-Control-Allow-Methods"></a>7.CORS响应头部- Access-Control-Allow-Methods</h4><p>默认情况下，CORS仅支持客户端发起GET、POST、HEAD请求。<br>如果客户端希望通过PUT、DELETE 等方式请求服务器的资源，则需要在服务器端，通过Access-Control-Alow-Methods来指明实际请求所允许使用的HTTP方法。<br>示例代码如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只允许 POST GET DELETE HEAD 请求方式</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>,<span class="string">&#x27;POST,GET,DELETE,HEAD&#x27;</span>);</span><br><span class="line"><span class="comment">// 允许所有http请求</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>,*);</span><br></pre></td></tr></table></figure>

<h4 id="8-CORS请求的分类"><a href="#8-CORS请求的分类" class="headerlink" title="8.CORS请求的分类"></a>8.CORS请求的分类</h4><p>客户端在请求CORS接口时，根据请求方式和请求头的不同。可以将CORS的请求分为两大类，分别是：</p>
<blockquote>
<ol>
<li>简单请求</li>
<li>预检请求</li>
</ol>
</blockquote>
<h5 id="A-简单请求"><a href="#A-简单请求" class="headerlink" title="A.简单请求"></a>A.简单请求</h5><p>同时满足以下两大类的请求，就属于简单请求：</p>
<blockquote>
<ol>
<li>请求方式：GET POST HEAD 三者之一</li>
<li>HTTP头部信息不超过以下几种字段:无自定义头部字段。Accept. Accept-Language. Content-Language. DPR.Downlink. Save-Data. Viewport-Width. Width . Content-Type (只有三个值applic ation&#x2F;x-www-form-urlencoded. multipart&#x2F;form- data. text&#x2F;plain)</li>
</ol>
</blockquote>
<h5 id="B-预检请求"><a href="#B-预检请求" class="headerlink" title="B.预检请求"></a>B.预检请求</h5><p>只要符合以下任意一个条件的请求。都需要进行预检请求：</p>
<blockquote>
<ol>
<li>请求方式为GET、POST、HEAD之外的请求Method类型</li>
<li>请求头中包含自定义头部字段</li>
<li>向服务器发送了application&#x2F;json 格式的数据</li>
</ol>
</blockquote>
<h5 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h5><p>简单请求的特点:客户端与服务器之间只会发生一次请求。<br>预检请求的特点:客户端与服务器之间会发生两次请求，OPTION预检请求成功之后，才会发起真正的请求。</p>
<h2 id="JSONP接口"><a href="#JSONP接口" class="headerlink" title="JSONP接口"></a>JSONP接口</h2><h3 id="1-回顾jsonp的概念与特点"><a href="#1-回顾jsonp的概念与特点" class="headerlink" title="1.回顾jsonp的概念与特点"></a>1.回顾jsonp的概念与特点</h3><p>概念:浏览器端通过<code>&lt;script&gt;</code>标签的src属性，请求服务器上的数据，同时，服务器返回一个函数的调用。这种请求数据的方式叫做JSONP.<br>特点:<br>①JSONP 不属于真正的Ajax请求，因为它没有使用XMLHttpRequest这个对象。<br>②JSONP 仅支持GET请求，不支持POST、PUT、 DELETE 等请求。</p>
<h3 id="2-jsonp接口的注意事项"><a href="#2-jsonp接口的注意事项" class="headerlink" title="2.jsonp接口的注意事项"></a>2.jsonp接口的注意事项</h3><p>如果项目中已经配置了CORS跨域资源共享，为了防止冲突，必须在配置CORS中间件之前声明JSONP的接口。否则JSONP接口会被处理成开启了CORS的接口。示例代码如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220706230435643.png" alt="image-20220706230435643"></p>
<h4 id="实现jsonp接口的步骤"><a href="#实现jsonp接口的步骤" class="headerlink" title="实现jsonp接口的步骤"></a>实现jsonp接口的步骤</h4><p>①获取客户端发送过来的回调函数的名字<br>②得到要通过JSONP形式发送给客户端的数据<br>③根据前两步得到的数据，拼接出一个函数调用的字符串<br>④把上一步拼接得到的字符串，响应给客户端的<code>&lt;script&gt;</code>标签进行解析执行</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220706231020034.png" alt="image-20220706231020034"></p>
<h4 id="在网页中使用jQuery发起JSONP请求"><a href="#在网页中使用jQuery发起JSONP请求" class="headerlink" title="在网页中使用jQuery发起JSONP请求"></a>在网页中使用jQuery发起JSONP请求</h4><p>调用$.ajax()函数，提供JSONP的配置选项，从而发起JSONP请求，示例代码如下:</p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/found404.io/2022/07/15/Vue/</url>
    <content><![CDATA[<h1 id="VUE介绍"><a href="#VUE介绍" class="headerlink" title="VUE介绍"></a>VUE介绍</h1><h2 id="什么是VUE"><a href="#什么是VUE" class="headerlink" title="什么是VUE"></a>什么是VUE</h2><blockquote>
<p>Vue是一套用于构建用户界面的渐进式JavaScript框架</p>
<p><a href="https://vuejs.bootcss.com/style-guide/">Vue中文文档</a></p>
<p><a href="https://staging-cn.vuejs.org/">Vue官方文档</a></p>
</blockquote>
<p>什么是渐进式：</p>
<ul>
<li>Vue可以自底向上逐层的应用<ul>
<li>简单的应用：只需要一个轻量小巧的核心库</li>
<li>复杂的应用：可以引入各式各样的Vue插件</li>
<li></li>
</ul>
</li>
</ul>
<span id="more"></span>

<h3 id="谁开发的"><a href="#谁开发的" class="headerlink" title="谁开发的"></a>谁开发的</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220715205307722.png" alt="image-20220715205307722"></p>
<h3 id="Vue的特点"><a href="#Vue的特点" class="headerlink" title="Vue的特点"></a>Vue的特点</h3><ol>
<li>采用组件化模式，提高代码复用率，且让代码更好维护。</li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220715210528567.png" alt="image-20220715210528567"></p>
<ol start="2">
<li>声明式编码。让编码人员无需直接操作DOM。提高开发效率。<br> <img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220715205742913.png" alt="image-20220715205742913"></li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220715205803585.png" alt="image-20220715205803585"></p>
<ol start="3">
<li>使用虚拟DOM+优秀的Diff算法，尽量复用DOM节点。</li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220715210607706.png" alt="image-20220715210607706"></p>
<h3 id="Vue-Devtools"><a href="#Vue-Devtools" class="headerlink" title="Vue Devtools"></a>Vue Devtools</h3><p>在chrome下载Vue扩展程序</p>
<p><a href="https://pan.baidu.com/s/1MtYvMPew4lb14piIrs9x6w">密码:6666</a></p>
<h3 id="导入Vue"><a href="#导入Vue" class="headerlink" title="导入Vue"></a>导入Vue</h3><p>再导入Vue后会出现启动Vue生成的生产提示，可以通过</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 阻止Vue在启动时生成生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<p>关闭提示。</p>
<h1 id="Hello-Vue"><a href="#Hello-Vue" class="headerlink" title="Hello Vue"></a>Hello Vue</h1><h2 id="准备一个容器"><a href="#准备一个容器" class="headerlink" title="准备一个容器"></a>准备一个容器</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 准备好一个容器 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 插值语法 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>动态的数据要使用插值语法{{}}</p>
<blockquote>
<p>root容器中的代码被称为<strong>Vue模板</strong></p>
</blockquote>
<h2 id="创建Vue实例"><a href="#创建Vue实例" class="headerlink" title="创建Vue实例"></a>创建Vue实例</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 阻止Vue在启动时生成生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 创建Vue实例</span></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">      <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>element</strong>	元素 指定当前Vue实例为哪个容器服务，值通常为css选择器字符串</li>
<li><strong>data</strong>           中用于存储数据，数据共el所指定的容器去使用，值<em>暂时</em>写成一个对象</li>
</ul>
<blockquote>
<p>vue实例也可以不用变量接收</p>
<p>容器和实例一一对应，一个容器对应一个实例，一个实例对应一个容器。</p>
<p>注：当一个容器中有很多动态数据时候，一个实例也可以应付。一个实例下可以存在多个“手下”，这个所谓的手下就是之后的<strong>组件</strong></p>
</blockquote>
<h2 id="区分js表达式和js代码-语句"><a href="#区分js表达式和js代码-语句" class="headerlink" title="区分js表达式和js代码(语句)"></a>区分js表达式和js代码(语句)</h2><h3 id="1-js表达式"><a href="#1-js表达式" class="headerlink" title="1.js表达式"></a>1.js表达式</h3><p>一个表达式会产生一个值。可以放在任何一个需要值的地方：</p>
<ol>
<li>a				    一个a变量</li>
<li>a+b               a变量+b变量</li>
<li>demo(1)       调用demo()函数</li>
<li>etc…</li>
</ol>
<h3 id="2-js代码-语句"><a href="#2-js代码-语句" class="headerlink" title="2.js代码(语句)"></a>2.js代码(语句)</h3><ol>
<li>if(){}</li>
<li>for(){}</li>
<li>etc…</li>
</ol>
<h2 id="容器中的“又称vue模板”"><a href="#容器中的“又称vue模板”" class="headerlink" title="容器中的“又称vue模板”"></a>容器中的{{}}“又称vue模板”</h2><p>在容器中的{{}}插值语法块中。可以存放表达式，并且也可以生效</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 插值语法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,&#123;&#123; name &#125;&#125;,&#123; &#123; age+1 &#125;&#125;,&#123;&#123; 2+2 &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 阻止Vue在启动时生成生产提示</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建Vue实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;.root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;World&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>: <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果：<code>Hello, World,19,4</code></p>
<h3 id="巧妙使用Vue扩展框架"><a href="#巧妙使用Vue扩展框架" class="headerlink" title="巧妙使用Vue扩展框架"></a>巧妙使用Vue扩展框架</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220715223904598.png" alt="image-20220715223904598"></p>
<h1 id="Vue模板语法"><a href="#Vue模板语法" class="headerlink" title="Vue模板语法"></a>Vue模板语法</h1><h2 id="1-插值语法"><a href="#1-插值语法" class="headerlink" title="1.插值语法"></a>1.插值语法</h2><h3 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h3><p>用于解析标签体内容</p>
<blockquote>
<p>标签体就是起始标签和结束标签包裹的东西，例如<code>&lt;h3&gt;你好，&#123;&#123;name&#125;&#125;&lt;/h1&gt;</code></p>
</blockquote>
<h3 id="写法："><a href="#写法：" class="headerlink" title="写法："></a>写法：</h3>{{}}，xxx就是js表达式，且可以直接读取到data中的所有属性

<h2 id="2-指令语法"><a href="#2-指令语法" class="headerlink" title="2.指令语法"></a>2.指令语法</h2><h3 id="功能：-1"><a href="#功能：-1" class="headerlink" title="功能："></a>功能：</h3><p>用于解析标签（包括：标签属性，标签体内容，绑定事件。。。。。。）</p>
<h3 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h3><p><code>v-bind:href=&quot;xxx&quot;</code> 或者 简写为 <code>:href=&quot;xxx&quot; </code>，xxx同样要写js表达式，且可以直接读取到data中的所有属性。</p>
<blockquote>
<p>简单来说就是加了v-bind:的属性后“  ”内的部分会变成表达式</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 插值语法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>插值语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>指令语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;school.url&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;name&quot;</span>&gt;</span>点击跳转&#123;&#123; school.name &#125;&#125;官网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 阻止Vue在启动时生成生产提示</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建Vue实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;.root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">school</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;Vue&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&#x27;https://staging-cn.vuejs.org/guide/introduction.html&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h3><p>Vue中有很多指令，且形式都是v-？？？，此处我们只是拿v-bind举例子</p>
<h1 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h1><blockquote>
<p>数据绑定类型分为：</p>
<ul>
<li>单向数据绑定<ul>
<li>改变值，并不会改变data对象中的对应值</li>
</ul>
</li>
<li>双向数据绑定<ul>
<li>改变值，会同时改变data对象中的值</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="双向数据绑定之v-model"><a href="#双向数据绑定之v-model" class="headerlink" title="双向数据绑定之v-model:"></a>双向数据绑定之v-model:</h2><p>之前所学的v-bind:属于单向数据绑定。</p>
<blockquote>
<p>v-model:就属于双向数据绑定</p>
<p>注意：v-model:一般应用在表单类元素（输入类元素）上</p>
<ul>
<li>例如：input，select等</li>
</ul>
</blockquote>
<p><strong>简写：</strong></p>
<p><code>v-model=&#39;name&#39;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line">双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">:value</span>=<span class="string">&#x27;name&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">v-model</span>=<span class="string">&#x27;name&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Web开发</title>
    <url>/found404.io/2022/07/14/Web%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="Web开发模式"><a href="#Web开发模式" class="headerlink" title="Web开发模式"></a>Web开发模式</h1><blockquote>
<p>目前主流的Web开发模式有两种，分别是：</p>
<ol>
<li>基于服务端渲染的传统web开发模式 😶</li>
<li>基于前后端分离的新型web开发模式 😮</li>
</ol>
</blockquote>
<span id="more"></span>

<h2 id="1-服务端渲染的web开发模式"><a href="#1-服务端渲染的web开发模式" class="headerlink" title="1.服务端渲染的web开发模式"></a>1.服务端渲染的web开发模式</h2><p>服务端渲染的概念:服务器发送给客户端的HTML页面，是在服务器通过字符串的拼接，动态生成的。因此，客户端不需要使用Ajax这样的技术额外请求页面的数据。代码示例如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713230024974.png" alt="image-20220713230024974"></p>
<h3 id="服务端渲染的优缺点"><a href="#服务端渲染的优缺点" class="headerlink" title="服务端渲染的优缺点"></a>服务端渲染的优缺点</h3><p><strong>优点:</strong></p>
<ol>
<li>前端耗时少。 因为服务器端负责动态生成HTML内容,浏览器只需要直接渲染页面即可。尤其是移动端，更省电。</li>
<li>有利于SEO. 因为服务器端响应的是完整的HTML页面内容,所以爬虫更容易爬取获得信息，更有利于SEO</li>
</ol>
<p><strong>缺点:</strong></p>
<ol>
<li>占用服务器端资源。 即服务器端完成HTML页面内容的拼接，如果请求较多,会对服务器造成一定的访问压力。</li>
<li>不利于前后端分离, 开发效率低。使用服务器端渲染，则无法进行分工合作,尤其对于前端复杂度高的项目,不利于项目高效开发。</li>
</ol>
<h2 id="2-前后端分离的优缺点"><a href="#2-前后端分离的优缺点" class="headerlink" title="2.前后端分离的优缺点"></a>2.前后端分离的优缺点</h2><h3 id="服务端渲染的优缺点-1"><a href="#服务端渲染的优缺点-1" class="headerlink" title="服务端渲染的优缺点"></a>服务端渲染的优缺点</h3><p><strong>优点:</strong></p>
<ol>
<li>开发体验好。 前端专注于UI页面的开发,后端专注于api的开发,且前端有更多的选择性。</li>
<li>用户体验好。 Ajax 技术的广泛应用,极大的提高了用户的体验，可以轻松实现页面的局部刷新</li>
<li>减轻了服务器端的渲染压力。因为页面最终是在每个用户的浏览器中生成的。</li>
</ol>
<p><strong>缺点:</strong></p>
<ol>
<li>不利于SEO(爬虫).因为完整的HTML页面需要在客户端动态拼接完成，所以爬虫对无法爬取页面的有效信息。(解决方案:利用Vue. React 等前端框架的SSR (server side render)技术能够很好的解决SEO问题! )</li>
</ol>
<h2 id="如何选择Web开发模式"><a href="#如何选择Web开发模式" class="headerlink" title="如何选择Web开发模式"></a>如何选择Web开发模式</h2><p>不谈业务场景而盲目选择使用何种开发模式都是耍流氓。</p>
<blockquote>
<ol>
<li>比如企业级网站,主要功能是展示而没有复杂的交互,并且需要良好的SEO,则这时我们就需要使用服务器端渲染;</li>
<li>而类似后台管理项目，交互性比较强，不需要考虑SEO,那么就可以使用前后端分离的开发模式。</li>
</ol>
</blockquote>
<p>另外，具体使用何种开发模式并不是绝对的，为为同时兼顾了首页的渲染速度和前后端分离的开发效率，一些网站采用了首屏服务器端渲染+其他页面前后端分离的开发模式。</p>
<h1 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h1><h2 id="什么是身份认证"><a href="#什么是身份认证" class="headerlink" title="什么是身份认证"></a>什么是身份认证</h2><p>身份认证(Authentication) 又称”身份验证”、”鉴权” ，是指通过-定的手段，完成对用户身份的确认。</p>
<ul>
<li>日常生活中的身份认证随处可见，例如:高铁的验票乘车，手机的密码或指纹解锁，支付宝或微信的支付密码等。</li>
<li>在Web开发中，也涉及到用户身份的认证，例如:各大网站的手机验证码登录、邮箱密码登录、二维码登录等。</li>
</ul>
<h2 id="不同开发模式下的身份认证"><a href="#不同开发模式下的身份认证" class="headerlink" title="不同开发模式下的身份认证"></a>不同开发模式下的身份认证</h2><p>对于服务端渲染和前后端分离这两种开发模式来说，分别有着不同的身份认证方案:</p>
<ol>
<li>服各端渲染推荐使用<strong>Session</strong>认证机制</li>
<li>前后端分离推荐使用<strong>JWT</strong>认证机制</li>
</ol>
<h2 id="Session认证机制"><a href="#Session认证机制" class="headerlink" title="Session认证机制"></a>Session认证机制</h2><h3 id="HTTP协议的无状态性"><a href="#HTTP协议的无状态性" class="headerlink" title="HTTP协议的无状态性"></a>HTTP协议的无状态性</h3><p>了解HTTP协议的无状态性是进一步学习Session认证机制的必要前提。<br>HTTP协议的无状态性,指的是客户端的每次HTTP请求都是独立的，连续多个请求之间没有直接的关系，服务器不会主动保留每次HTTP请求的状态。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714192603710.png" alt="image-20220714192603710"></p>
<h3 id="如何突破HTTP无状态的限制"><a href="#如何突破HTTP无状态的限制" class="headerlink" title="如何突破HTTP无状态的限制"></a>如何突破HTTP无状态的限制</h3><p>对于超市来说，为了方便收银员在进行结算时给VIP用户打折,超市可以为每个VIP用户发放会员卡。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714192702651.png" alt="image-20220714192702651"></p>
<blockquote>
<p>注意:现实生活中的会员卡身份认证方式，在Web开发中的专业术语叫做<strong>Cookie</strong>。</p>
</blockquote>
<h3 id="什么是Cookie"><a href="#什么是Cookie" class="headerlink" title="什么是Cookie"></a>什么是Cookie</h3><blockquote>
<p>Cookie是存储在用户浏览器中的一段不超过4 KB的字符串。它由一一个名称(Name)、-个值(Value) 和其它几个用于控制Cookie有效期、安全性、使用范围的可选属性组成。</p>
</blockquote>
<p>不同域名下的Cookie各自独立，每当客户端发起请求时，会自动把当前域名下所有未过期的Cookie一同发送到服务器。</p>
<p>Cookie的几大特性:</p>
<ol>
<li>自动发送</li>
<li>域名独立</li>
<li>过期时限</li>
<li>4KB 限制</li>
</ol>
<h4 id="Cookie在身份认证中的作用"><a href="#Cookie在身份认证中的作用" class="headerlink" title="Cookie在身份认证中的作用"></a>Cookie在身份认证中的作用</h4><ul>
<li>客户端第一-次请求服务器的时候，服务器通过响应头的形式，向客户端发送一个身份认证的Cookie,客户端会自动将Cookie保存在浏览器中。</li>
<li>随后，当客户端浏览器每次请求服务器的时候，浏览器会自动将身份认证相关的Cookie,通过请求头的形式发送给服务器，服务器即可验明客户端的身份。</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714193346444.png" alt="image-20220714193346444"></p>
<h4 id="Cookie不具有安全性"><a href="#Cookie不具有安全性" class="headerlink" title="Cookie不具有安全性"></a>Cookie不具有安全性</h4><p>由于Cookie是存储在浏览器中的，而且浏览器也提供了读写Cookie的API，因此Cookie很容易被伪造，不具有安全性。因此不建议服务器将重要的隐私数据，通过Cookie的形式发送给浏览器。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714193659593.png" alt="image-20220714193659593"></p>
<blockquote>
<p>注意：千万不要使用Cookie存储用户的信息</p>
</blockquote>
<h4 id="提高身份认证的安全性"><a href="#提高身份认证的安全性" class="headerlink" title="提高身份认证的安全性"></a>提高身份认证的安全性</h4><p>为了防止客户伪造会员卡,收银员在拿到客户出示的会员卡之后，可以在收银机上进行刷卡认证。只有收银机确认存在的会员卡，才能被正常使用。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714193843904.png" alt="image-20220714193843904"></p>
<blockquote>
<p>这种”会员卡+刷卡认证”的设计理念,就是Session认证机制的精髓。</p>
</blockquote>
<h2 id="Session的工作原理"><a href="#Session的工作原理" class="headerlink" title="Session的工作原理"></a>Session的工作原理</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714194043942.png" alt="image-20220714194043942"></p>
<h3 id="在Express-session中间件"><a href="#在Express-session中间件" class="headerlink" title="在Express-session中间件"></a>在Express-session中间件</h3><h4 id="1-安装express-session中间件"><a href="#1-安装express-session中间件" class="headerlink" title="1.安装express-session中间件"></a>1.安装express-session中间件</h4><p>在Express项目中，只需要安装express-session中间件，即可在项目中使用Session认证：</p>
<p><code>npm install express-session</code></p>
<h4 id="2-配置sxpress-session中间件"><a href="#2-配置sxpress-session中间件" class="headerlink" title="2.配置sxpress-session中间件"></a>2.配置sxpress-session中间件</h4><p>express-session中间件安装成功后，需要通过app.use(来注册session中间件，示例代码如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714195052990.png" alt="image-20220714195052990"></p>
<h4 id="3-向session中存数据"><a href="#3-向session中存数据" class="headerlink" title="3.向session中存数据"></a>3.向session中存数据</h4><p>当express- session中间件配置成功后，即可通过req.session来访问和使用session对象，从而存储用户的关键信息:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714202516094.png" alt="image-20220714202516094"></p>
<h4 id="4-从session中取数据"><a href="#4-从session中取数据" class="headerlink" title="4.从session中取数据"></a>4.从session中取数据</h4><p>可以直接从req.session对象上获取之前存储的数据。实例：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714203759869.png" alt="image-20220714203759869"></p>
<h4 id="5-清空session"><a href="#5-清空session" class="headerlink" title="5.清空session"></a>5.清空session</h4><p>调用req.session.destroy0函数，即可清空服务器保存的session信息。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714204107954.png" alt="image-20220714204107954"></p>
<blockquote>
<p>调用<em>req</em>.session.destroy();只会清空当前用户的数据</p>
</blockquote>
<h2 id="JWT认证机制"><a href="#JWT认证机制" class="headerlink" title="JWT认证机制"></a>JWT认证机制</h2><h3 id="Session认证局限性"><a href="#Session认证局限性" class="headerlink" title="Session认证局限性"></a>Session认证局限性</h3><p>Session认证机制需要配合Cookie才能实现。由于Cookie默认不支持跨域访问，所以，当涉及到前端跨域请求后端接口的时候，需要做很多额外的配置，才能实现跨域Session认证。</p>
<p>注意:</p>
<ul>
<li><p>当前端请求后端接口不存在跨域问题的时候，推荐使用Session身份认证机制。</p>
</li>
<li><p>当前端需要跨域请求后端接口的时候，不推荐使用Session身份认证机制，推荐使用JWT认证机制。</p>
</li>
</ul>
<h3 id="什么是JWT"><a href="#什么是JWT" class="headerlink" title="什么是JWT"></a>什么是JWT</h3><p>JWT (英文全称: JSON Web Token)是目前最流行的跨域认证解决方案。</p>
<h4 id="JWT工作原理"><a href="#JWT工作原理" class="headerlink" title="JWT工作原理"></a>JWT工作原理</h4><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714205132872.png" alt="image-20220714205132872"></p>
<blockquote>
<p>总结:用户的信息通过Token字符串的形式，保存在客户端浏览器中。服务器通过还原Token字符串的形式来认证用户的身份.</p>
</blockquote>
<h4 id="JWT组成部分"><a href="#JWT组成部分" class="headerlink" title="JWT组成部分"></a>JWT组成部分</h4><p>JWT通常由三部分组成，分别是Header (头部)、Payload (有效荷载)、Signature (签名) .<br>三者之间使用英文的”.” 分隔，格式如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714205348970.png" alt="image-20220714205348970"></p>
<p>下面是JWT字符串的实例：</p>
<img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714205437367.png" alt="image-20220714205437367">

<h4 id="JWT的三个部分各自代表的含义"><a href="#JWT的三个部分各自代表的含义" class="headerlink" title="JWT的三个部分各自代表的含义"></a>JWT的三个部分各自代表的含义</h4><p>JWT的三个组成部分，从前到后分别是Header、Payload、 Signature.<br>其中:</p>
<ul>
<li>Payload 部分才是真正的用户信息，它是用户信息经过加密之后生成的字符串。</li>
<li>Header 和Signature是安全性相关的部分,只是为了保证Token的安全性。</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714205702810.png" alt="image-20220714205702810"></p>
<h3 id="JWT的使用方式"><a href="#JWT的使用方式" class="headerlink" title="JWT的使用方式"></a>JWT的使用方式</h3><p>客户端收到服务器返回的JWT之后,通常会将它储存在<strong>localStorage</strong>或<strong>sessionStorage</strong>中。<br>此后，客户端每次与服务器通信，都要带上这个JWT的字符串,从而进行身份认证。推荐的做法是把JWT放在HTTP请求头的<code>Authorization</code>字段中，格式如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714205908830.png" alt="image-20220714205908830"></p>
<h1 id="在Express中使用JWT"><a href="#在Express中使用JWT" class="headerlink" title="在Express中使用JWT"></a>在Express中使用JWT</h1><h2 id="安装相应的包"><a href="#安装相应的包" class="headerlink" title="安装相应的包"></a>安装相应的包</h2><p>执行以下命令，安装两个JWT相关的包：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714205957242.png" alt="image-20220714205957242"></p>
<p>其中:</p>
<ul>
<li><strong>jsonwebtoken</strong>用于生成JWT字符串</li>
<li><strong>express-jwt</strong> 用于将JWT字符串解析还原成JSON对象</li>
</ul>
<h2 id="导入JWT相关的包"><a href="#导入JWT相关的包" class="headerlink" title="导入JWT相关的包"></a>导入JWT相关的包</h2><p>使用require()函数，分别导入JWT相关的两个包：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714210155726.png" alt="image-20220714210155726"></p>
<p>注意：</p>
<p>新版express-jwt导入方式被切换为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TODO_01：安装并导入 JWT 相关的两个包，分别是 jsonwebtoken 和 express-jwt</span></span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旧的：const expressJWT = require(&#x27;express-jwt&#x27;);</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">expressjwt</span>: expressJWT &#125; = <span class="built_in">require</span>(<span class="string">&#x27;express-jwt&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714205348970.png" alt="image-20220714214407342"></p>
<h2 id="定义secret密钥"><a href="#定义secret密钥" class="headerlink" title="定义secret密钥"></a>定义secret密钥</h2><p>为了<strong>保证JWT字符串的安全性</strong>,防止JWT字符串在网络传输过程中被别人破解,我们需要专门定义一个用于加密和解密的secret密钥:</p>
<ol>
<li>当生成JWT字符串的时候，需要使用secret密钥对用户的信息<strong>进行加密</strong>，最终得到加密好的JWT字符串</li>
<li>当把JWT字符串解析还原成JSON对象的时候,需要使用secret密钥<strong>进行解密</strong></li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220715094107721.png" alt="image-20220715094107721"></p>
<h2 id="在登录成功后生成JWT字符串"><a href="#在登录成功后生成JWT字符串" class="headerlink" title="在登录成功后生成JWT字符串"></a>在登录成功后生成JWT字符串</h2><p>调用<strong>jsonwebtoken</strong>包提供的**sign()**方法,将用户的信息加密成JWT字符串，响应给客户端:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220715093609109.png" alt="image-20220715093609109"></p>
<ul>
<li>参数1：用户的信息对象</li>
<li>参数2：加密的密钥</li>
<li>参数2：配置对象，可以配置当前token的有效期</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tokenStr = jwt.<span class="title function_">sign</span>(&#123; <span class="attr">username</span>: userinfo.<span class="property">username</span> &#125;, secretKey, &#123; <span class="attr">expiresIn</span>: <span class="string">&#x27;30s&#x27;</span> &#125;)</span><br><span class="line">res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;登录成功！&#x27;</span>,</span><br><span class="line">    <span class="attr">token</span>: tokenStr <span class="comment">// 要发送给客户端的 token 字符串</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="将JWT字符串还原为JSON对象"><a href="#将JWT字符串还原为JSON对象" class="headerlink" title="将JWT字符串还原为JSON对象"></a>将JWT字符串还原为JSON对象</h2><p>客户端每次在访问那些有权限接口的时候，都需要主动通过请求头中的Authorization字段，将Token字符串发送到服务器进行身份认证。<br>此时，服务器可以通过express-jwt这个中间件,自动将客户端发送过来的Token解析还原成JSON对象:</p>
<p><code>app.use(expressJWT(&#123; secret: secretKey &#125;).unless(&#123; path: [/^\/api\//] &#125;));</code></p>
<p>新版写法被改为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="title function_">expressJWT</span>(&#123; <span class="attr">secret</span>: secretKey, <span class="attr">algorithms</span>: [<span class="string">&#x27;HS256&#x27;</span>] &#125;).<span class="title function_">unless</span>(&#123; <span class="attr">path</span>:[<span class="regexp">/^\/api\//</span>] &#125;));</span><br></pre></td></tr></table></figure>

<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220715093507238.png" alt="image-20220715093507238"></p>
<h2 id="使用req-auth获取用户信息"><a href="#使用req-auth获取用户信息" class="headerlink" title="使用req.auth获取用户信息"></a>使用req.auth获取用户信息</h2><p>当express-jwt这个中间件配置成功之后，即可在那些有权限的接口中，使用req.auth对象,来访问从JWT字符串<br>中解析出来的用户信息了，示例代码如下:</p>
<blockquote>
<p>新版本必须使用<strong>req.auth</strong>接收数据</p>
</blockquote>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220715093752664.png" alt="image-20220715093752664"></p>
<h3 id="postman请求示例："><a href="#postman请求示例：" class="headerlink" title="postman请求示例："></a>postman请求示例：</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714220045105.png" alt="image-20220714220045105"></p>
<blockquote>
<p>返还回来的数据是一个只能存在30s的令牌(自定义)</p>
</blockquote>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714220145337.png" alt="image-20220714220145337"></p>
<blockquote>
<p>发起get请求获取参数时候必须携带<strong>Authorization</strong>，value的值是post返还的加密字符串，前面必须空格加上<strong>Bearer</strong></p>
<p>示例：</p>
<p>Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNjU3ODA3MDU4LCJleHAiOjE2NTc4MDcxMDh9.yelhnZthBSHXRH2P9Ch7gEp7LwfK7P1JlL76HdUATJ0</p>
</blockquote>
<h2 id="捕获解析JWT失败后产生的错误"><a href="#捕获解析JWT失败后产生的错误" class="headerlink" title="捕获解析JWT失败后产生的错误"></a>捕获解析JWT失败后产生的错误</h2><p>当使用express-jwt解析Token字符串时,如果客户端发送过来的Token字符串过期或不合法，会产生-个解析失败的错误，影响项目的正常运行。我们可以通过Express的错误中间件,捕获这个错误并进行相关的处理,示例代码如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714220815116.png" alt="image-20220714220815116"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TODO_06：使用全局错误处理中间件，捕获解析 JWT 失败后产生的错误</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err.<span class="property">name</span> === <span class="string">&#x27;UnauthorizedError&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="number">401</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;无效的token&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">500</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;未知错误&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>前后端合作开发</tag>
      </tags>
  </entry>
  <entry>
    <title>my_firstBlog</title>
    <url>/found404.io/2022/06/25/my-firstBlog/</url>
    <content><![CDATA[<h1 id="Hello-hexo"><a href="#Hello-hexo" class="headerlink" title="Hello hexo!"></a>Hello hexo!</h1><blockquote>
<p>第一篇blog</p>
<img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/01.png" style="zoom: 33%;">
</blockquote>
]]></content>
      <tags>
        <tag>Hello hexo!</tag>
      </tags>
  </entry>
  <entry>
    <title>认识jQuery</title>
    <url>/found404.io/2022/07/04/jQuery/</url>
    <content><![CDATA[<h1 id="认识jQuery"><a href="#认识jQuery" class="headerlink" title="认识jQuery"></a>认识jQuery</h1><h1 id="DOM对象和jQuery对象"><a href="#DOM对象和jQuery对象" class="headerlink" title="DOM对象和jQuery对象"></a>DOM对象和jQuery对象</h1><h2 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h2><h3 id="1-DOM对象-用原生js获取过来的对象就是DOM对象"><a href="#1-DOM对象-用原生js获取过来的对象就是DOM对象" class="headerlink" title="1. DOM对象:用原生js获取过来的对象就是DOM对象"></a>1. DOM对象:用原生js获取过来的对象就是DOM对象</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655434695673-716396bb-2625-4a7c-8bf5-f657e6f7fdc9.png" alt="img"></p>
<span id="more"></span>

<h3 id="2-关于jQuery对象-用jQuery方式获取"><a href="#2-关于jQuery对象-用jQuery方式获取" class="headerlink" title="2.关于jQuery对象:用jQuery方式获取"></a>2.关于jQuery对象:用jQuery方式获取</h3><p>获取过来的对象是<strong>jQuery</strong>对象。本质: 通过**$**把DOM元素进行了包装</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655434767179-023a8725-75b5-4295-9825-a27ebe331c60.png" alt="img"></p>
<h3 id="3-关于jQuery对象只能使用jQuery-方法"><a href="#3-关于jQuery对象只能使用jQuery-方法" class="headerlink" title="3. 关于jQuery对象只能使用jQuery 方法"></a>3. 关于jQuery对象只能使用jQuery 方法</h3><p><em>DOM对象则使用原生的JavaScirpt属性和方法</em></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655434820534-0d742421-b37b-48ef-b785-a6279fb24c1f.png" alt="img"></p>
<h2 id="相互转换"><a href="#相互转换" class="headerlink" title="相互转换"></a>相互转换</h2><h3 id="1-DOM-对象转换为-jQuery-对象"><a href="#1-DOM-对象转换为-jQuery-对象" class="headerlink" title="1. DOM 对象转换为 jQuery 对象"></a>1. DOM 对象转换为 jQuery 对象</h3><p>使用$包裹就会改变</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655434936962-fb382719-79c5-42ba-be85-34d2608d74a9.png" alt="img"></p>
<h3 id="2-让jQuery-转换为-DOM-对象"><a href="#2-让jQuery-转换为-DOM-对象" class="headerlink" title="2. 让jQuery 转换为 DOM 对象"></a>2. 让jQuery 转换为 DOM 对象</h3><ul>
<li><strong>$(‘video’)[0]</strong></li>
<li><strong>$(‘video’).get(0)</strong></li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655434974828-06375355-f07b-44a8-93a7-29bd18a26d7d.png" alt="img"></p>
<h1 id="使用jQuery选择器"><a href="#使用jQuery选择器" class="headerlink" title="使用jQuery选择器"></a>使用jQuery选择器</h1><h2 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655435213752-a7b68ee4-eb1a-4792-8fd0-92333b12ff4d.png" alt="img"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./jQuery-min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span>我是nav div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;.nav&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;.nav&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;ul li&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;ul li&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="筛选选择器"><a href="#筛选选择器" class="headerlink" title="筛选选择器"></a>筛选选择器</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655435253683-f237c0ff-b675-4abb-9973-1867df648e0d.png" alt="img"></p>
<ul>
<li><strong>获取第一个li元素</strong></li>
</ul>
<p>​            <strong>$(‘ul li:first’).css(‘color’, ‘red’);</strong></p>
<ul>
<li><strong>获取最后一个li元素</strong></li>
</ul>
<p>​            <strong>$(‘ul li:last’).css(‘color’, ‘red’);</strong></p>
<ul>
<li><strong>获取第三个li元素</strong></li>
</ul>
<p>​            <strong>$(‘ul li:eq(2)’).css(‘color’, ‘blue’);</strong></p>
<ul>
<li><strong>获取奇数li元素</strong></li>
</ul>
<p>​            <strong>$(‘ul li:odd’).css(‘background’, ‘gray’);</strong></p>
<ul>
<li><strong>获取偶数li元素</strong></li>
</ul>
<p>​            <strong>$(‘ul li:even’).css(‘background’, ‘pink’);</strong></p>
<h2 id="关于jQuery’父-子-兄’选择"><a href="#关于jQuery’父-子-兄’选择" class="headerlink" title="关于jQuery’父,子,兄’选择"></a>关于jQuery’父,子,兄’选择</h2><h3 id="1-父-‘-son’-parent"><a href="#1-父-‘-son’-parent" class="headerlink" title="1.父		$(‘.son’).parent();"></a>1.父		<em>$(‘.son’).parent();</em></h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655435496919-db1f244b-dbe8-4ae4-888c-ae5c4d3a6310.png" alt="img"></p>
<h3 id="2-子-‘-nav’-children-‘p’"><a href="#2-子-‘-nav’-children-‘p’" class="headerlink" title="2.子  	$(‘.nav’).children(‘p’)"></a>2.子  	$(‘.nav’).children(‘p’)</h3><p>(1) 亲儿子 children( )			<strong>类似于子代选择器 ul&gt;li</strong></p>
<p>​            $(‘.nav’).children(‘p’).css(‘color’, ‘red’);</p>
<p>(2) 可以选择所有后代 包括儿子孙子find( )		<strong>类似于后代选择器</strong></p>
<p>​            $(‘.nav’).find(‘p’).css(‘background’, ‘gray’);</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655435657767-0d0f130c-13a3-420d-8ab8-21756a224071.png" alt="img"></p>
<h3 id="3-兄"><a href="#3-兄" class="headerlink" title="3.兄"></a>3.兄</h3><p>(1)siblings( )			除了自身元素之外的所有亲兄弟</p>
<p>​            $(‘ol .item’).siblings(‘li’).css(‘color’, ‘red’);</p>
<p>(2)nextAll( )			当前元素之后所有同辈元素</p>
<p>​            $(‘ol .item’).nextAll(‘li’).css(‘background’, ‘gray’);</p>
<p>(3)prevAll( ) 			当前元素之前所有同辈元素</p>
<p>​            $(‘ol .item’).prevAll(‘li’).css(‘background’, ‘gray’);</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655435861596-5290592b-00c5-42a0-ad6c-c0b72f8bebbf.png" alt="img"></p>
<p>(4)eq 第几个元素</p>
<p>​            $(‘ol li:eq(2)’).css(‘font-weight’, ‘900’)</p>
<p>(5)利用选择方法的方式选择 推荐此方法</p>
<p>​            $(‘ul li’).eq(2).css(‘color’, ‘red’);</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655436008036-56096940-6122-4d18-a009-5d914d4f6e3e.png" alt="img"></p>
<h1 id="关于jQuery隐式迭代"><a href="#关于jQuery隐式迭代" class="headerlink" title="关于jQuery隐式迭代"></a>关于jQuery隐式迭代</h1><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655436098193-e2fc708e-016e-43e4-b75b-d69bff520ecc.png" alt="img"></p>
<p><strong>jQuery对元素集合的操作不需要再利用for循环</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./jQuery-min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>演示文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>演示文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>演示文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>演示文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>相同操作<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>相同操作<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>相同操作<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.获取四个div元素</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;div&#x27;</span>); <span class="comment">// 伪数组形式储存</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;div&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.给四个div设置背景颜色 jQuery不能使用style方法</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.隐式迭代</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 遍历内部的DOM元素(伪数组形式储存)的过程叫做隐式迭代</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;ul li&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="排他思想案例"><a href="#排他思想案例" class="headerlink" title="排他思想案例"></a>排他思想案例</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655436251283-a24f09e8-06b9-4c5e-8c79-4e73827ae406.png" alt="img"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./jQuery-min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1.隐式迭代,给所有按钮绑定点击事件</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 2.当前元素变化背景颜色</span></span></span><br><span class="line"><span class="language-javascript">                $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 3.其余兄弟去掉背景颜色 隐式迭代</span></span></span><br><span class="line"><span class="language-javascript">                $(<span class="variable language_">this</span>).<span class="title function_">siblings</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="淘宝精品服饰案例-index-获取数组索引方法"><a href="#淘宝精品服饰案例-index-获取数组索引方法" class="headerlink" title="淘宝精品服饰案例    index()获取数组索引方法"></a>淘宝精品服饰案例    <em>index()获取数组索引方法</em></h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655436549904-d7415874-ef08-4096-a568-229b30d86fce.png" alt="img"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./jQuery-min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.wrapper</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.wrapper</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">33.3%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.wrapper</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.wrapper</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">83px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#content</span> <span class="selector-tag">div</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:first</span>-child) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../img/图片/cs (1).webp&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../img/图片/cs (2).webp&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../img/图片/cs (3).webp&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1.鼠标经过li</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#left li&#x27;</span>).<span class="title function_">mouseover</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 2.得到当前li的索引号</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> index = $(<span class="variable language_">this</span>).<span class="title function_">index</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 3.让右侧盒子相应索引号盒子显示</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// $(&#x27;#content div&#x27;).eq(index).show();</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 4.让其余的图片(就是其他的兄弟)隐藏</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// $(&#x27;#content div&#x27;).eq(index).siblings().hide();</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 链式编程</span></span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&#x27;#content div&#x27;</span>).<span class="title function_">eq</span>(index).<span class="title function_">show</span>().<span class="title function_">siblings</span>().<span class="title function_">hide</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h1><p>为了使代码更加简洁，推崇使用链式编程思想</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1.隐式迭代,给所有按钮绑定点击事件</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 2.当前元素变化背景颜色</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// $(this).css(&#x27;background&#x27;, &#x27;pink&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 3.其余兄弟去掉背景颜色 隐式迭代</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// $(this).siblings(&#x27;button&#x27;).css(&#x27;background&#x27;, &#x27;&#x27;);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 链式编程</span></span></span><br><span class="line"><span class="language-javascript">                $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>).<span class="title function_">siblings</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="修改css样式"><a href="#修改css样式" class="headerlink" title="修改css样式"></a>修改css样式</h1><h2 id="通过-css-方法修改"><a href="#通过-css-方法修改" class="headerlink" title="通过.css({})方法修改"></a>通过.css({})方法修改</h2><ol>
<li><p>修改样式逗号隔开,引号引入,当值为数字可以不加引号</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;width&#x27;</span>, <span class="string">&#x27;300px&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>以对象的形式修改可以不加引号</p>
<ul>
<li>数字可以不用加引号</li>
<li>组合属性采取驼峰命名法</li>
<li>值不为数字就需要加引号</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">css</span>(&#123;</span><br><span class="line">    <span class="comment">// 数字可以不用加引号</span></span><br><span class="line">    <span class="attr">width</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="comment">// 组合属性采取驼峰命名法</span></span><br><span class="line">    <span class="comment">// 值不为数字就需要加引号</span></span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&#x27;red&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="设置类名方法"><a href="#设置类名方法" class="headerlink" title="设置类名方法"></a>设置类名方法</h2><p>1.添加类 <strong>addClass()</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	$(<span class="variable language_">this</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;current&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>2.删除类 <strong>removeClass()</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	$(<span class="variable language_">this</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;current&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>3.切换类 <strong>toggleClass()</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	$(<span class="variable language_">this</span>).<span class="title function_">toggleClass</span>(<span class="string">&#x27;current&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="使用jQuery的动态效果"><a href="#使用jQuery的动态效果" class="headerlink" title="使用jQuery的动态效果"></a>使用jQuery的动态效果</h1><h2 id="显示与隐藏"><a href="#显示与隐藏" class="headerlink" title="显示与隐藏"></a>显示与隐藏</h2><ul>
<li>show([时间]，[function(){}])   	<strong>显示</strong></li>
<li>hide([时间]，[function(){}])         <strong>隐藏</strong></li>
<li>toggle([时间]，[function(){}])      <strong>切换</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 显示</span></span><br><span class="line">    $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">show</span>(<span class="number">1000</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//隐藏</span></span><br><span class="line">    $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">hide</span>(<span class="number">1000</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//切换</span></span><br><span class="line">    $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">toggle</span>(<span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h2><ul>
<li>slideDown([时间]，[function(){}]);</li>
<li>slideUp([时间]，[function(){}]);</li>
<li>slideToggle([时间]，[function(){}]);</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 下滑动 slideDown()</span></span><br><span class="line">        $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">slideDown</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 上滑动 slideUp()</span></span><br><span class="line">        $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">slideUp</span>(<span class="number">500</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 滑动切换 slideToggle()</span></span><br><span class="line">        $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">slideToggle</span>(<span class="number">500</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="渐入渐出"><a href="#渐入渐出" class="headerlink" title="渐入渐出"></a>渐入渐出</h2><ul>
<li>fadeIn([时间]，[function(){}]);</li>
<li>fadeOut([时间]，[function(){}]);</li>
<li>fadeToggle([时间]，[function(){}]);</li>
<li>fadeTo([时间]，[透明度]，[function(){}]);</li>
</ul>
<h2 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h2><ul>
<li>animate([{ css属性 }]，[时间]);</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line">            <span class="attr">left</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">top</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">opacity</span>: <span class="number">0.5</span>,</span><br><span class="line">            <span class="attr">width</span>: <span class="number">500</span>,</span><br><span class="line">        &#125;, <span class="number">200</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="停止排队"><a href="#停止排队" class="headerlink" title="停止排队"></a>停止排队</h2><p>在编写动画相关的事件触发时，会遇到一个bug，当多次触发事件时，事件会发生累积堆叠。造成鬼畜。通过<code>stop()</code>可以解决此bug</p>
<ul>
<li>mouseover   鼠标经过</li>
<li>mouseout   鼠标离开</li>
<li>hover           就是鼠标经过离开的复合写法<ul>
<li><em>事件切换hover如果只写一个函数,那么鼠标经过和鼠标离开都会触发这个函数</em></li>
</ul>
</li>
</ul>
<p><strong>stop()方法必须写在动画前面</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./jQuery-min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.nav</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* background-color: gray; */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.nav</span>&gt;<span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.nav</span>&gt;<span class="selector-tag">li</span>&gt;<span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* background-color: aquamarine; */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* border: 1px solid gray; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: <span class="number">900</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.nav</span>&gt;<span class="selector-tag">li</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid gray;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.nav</span>&gt;<span class="selector-tag">li</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.nav</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>私信<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>@我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>私信<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>@我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>私信<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>@我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>私信<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>@我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// mouseover鼠标经过</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// $(&#x27;.nav&gt;li&#x27;).mouseover(function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     // $(this) jQuery 当前元素 this不加引号</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     // show() 显示元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     $(this).children(&#x27;ul&#x27;).slideDown(200);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// // 鼠标离开</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// $(&#x27;.nav&gt;li&#x27;).mouseout(function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     // hide() 隐藏元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     $(this).children(&#x27;ul&#x27;).slideUp(200);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 写法1.事件切换 hover 就是鼠标经过离开的复合写法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//$(&#x27;.nav&gt;li&#x27;).hover(function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">             <span class="comment">//   $(this).children(&#x27;ul&#x27;).slideDown(200);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//&#125;, function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">               <span class="comment">// $(this).children(&#x27;ul&#x27;).slideUp(200);</span></span></span><br><span class="line"><span class="language-javascript">           <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 写法2.事件切换hover如果只写一个函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//   那么鼠标经过和鼠标离开都会触发这个函数</span></span></span><br><span class="line"><span class="language-javascript">             $(<span class="string">&#x27;.nav&gt;li&#x27;</span>).<span class="title function_">hover</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                 <span class="comment">// stop()方法必须写在动画前面</span></span></span><br><span class="line"><span class="language-javascript">                 $(<span class="variable language_">this</span>).<span class="title function_">children</span>(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">stop</span>().<span class="title function_">slideToggle</span>(<span class="number">200</span>);</span></span><br><span class="line"><span class="language-javascript">             &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="使用jQuery的属性操作"><a href="#使用jQuery的属性操作" class="headerlink" title="使用jQuery的属性操作"></a>使用jQuery的属性操作</h1><h2 id="1-element-prop-‘属性名’-获取元素固有属性值"><a href="#1-element-prop-‘属性名’-获取元素固有属性值" class="headerlink" title="1.element.prop(‘属性名’)获取元素固有属性值"></a>1.element.prop(‘属性名’)获取元素固有属性值</h2><p>element.prop(‘属性名’，{值})</p>
<p>不仅可以获取元素固有属性值，也可以设置元素固有属性值</p>
<h2 id="2-元素自定义属性attr"><a href="#2-元素自定义属性attr" class="headerlink" title="2.元素自定义属性attr()"></a>2.元素自定义属性attr()</h2><p>element.attr(‘属性名’，{值})</p>
<h2 id="3-数据缓存data"><a href="#3-数据缓存data" class="headerlink" title="3.数据缓存data()"></a>3.数据缓存data()</h2><p>这个里面的数据是存放在元素的内存里 <em>不会显示在标签上</em></p>
<p>element.data(‘属性名’，{值});</p>
<p>这个方法获取data-index h5自定义属性 第一个不用写data- 而且返回的是数字型</p>
<h1 id="使用jQuery更改文本内容"><a href="#使用jQuery更改文本内容" class="headerlink" title="使用jQuery更改文本内容"></a>使用jQuery更改文本内容</h1><h2 id="1-获取设置元素内容-html"><a href="#1-获取设置元素内容-html" class="headerlink" title="1.获取设置元素内容 html()"></a>1.获取设置元素内容 html()</h2><p><em>相当于原生innerHTML</em></p>
<p>.html({值});</p>
<h2 id="2-获取设置元素文本内容-text"><a href="#2-获取设置元素文本内容-text" class="headerlink" title="2.获取设置元素文本内容 text()"></a>2.获取设置元素文本内容 text()</h2><p><em>相当于原生 innerText</em></p>
<p>.text({值});</p>
<h2 id="3-获取设置表单值-val"><a href="#3-获取设置表单值-val" class="headerlink" title="3.获取设置表单值 val()"></a>3.获取设置表单值 val()</h2><p>.val({值});</p>
<h1 id="关于jQuery遍历方法"><a href="#关于jQuery遍历方法" class="headerlink" title="关于jQuery遍历方法"></a>关于jQuery遍历方法</h1><h2 id="1-each-方法遍历元素"><a href="#1-each-方法遍历元素" class="headerlink" title="1.each() 方法遍历元素"></a>1.each() 方法遍历元素</h2><p>each(	function([index，domEle]){}	)</p>
<ul>
<li>回调函数第一个参数一定是索引号 可以自己指定index索引号名称</li>
<li>回调函数第二个参数一定是DOM元素</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">index, domEle</span>) &#123;</span><br><span class="line">    <span class="comment">// 回调函数第一个参数一定是索引号 可以自己指定index索引号名称</span></span><br><span class="line">    <span class="comment">// console.log(index);</span></span><br><span class="line">    <span class="comment">// 回调函数第二个参数一定是DOM元素</span></span><br><span class="line">    <span class="comment">// console.log(domEle);</span></span><br><span class="line">    <span class="comment">// domEle.css(&#x27;color&#x27;); dom对象没有css方法</span></span><br><span class="line">    <span class="comment">// $(domEle)转换为jQuery对象</span></span><br><span class="line">    $(domEle).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, arr[index]);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2-each-方法遍历元素"><a href="#2-each-方法遍历元素" class="headerlink" title="2.$.each() 方法遍历元素"></a>2.$.each() 方法遍历元素</h2><p> 主要用于遍历数据,处理数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$.<span class="title function_">each</span>($(<span class="string">&#x27;div&#x27;</span>), <span class="keyword">function</span>(<span class="params">i, ele</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ele);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line"> $.<span class="title function_">each</span>(arr, <span class="keyword">function</span>(<span class="params">i, ele</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(ele);</span><br><span class="line"> &#125;)</span><br><span class="line"><span class="comment">// 遍历对象</span></span><br><span class="line">$.<span class="title function_">each</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">i, ele</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 输出: name age 属性名</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ele); <span class="comment">// 输出: andy 18 属性值</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="使用jQuery创建添加删除元素"><a href="#使用jQuery创建添加删除元素" class="headerlink" title="使用jQuery创建添加删除元素"></a>使用jQuery创建添加删除元素</h1><h2 id="1-创建元素"><a href="#1-创建元素" class="headerlink" title="1.创建元素"></a>1.创建元素</h2><blockquote>
<p><code>var li = $(&#39;&lt;li&gt;我是后来li&lt;/li&gt;&#39;);</code></p>
</blockquote>
<h2 id="2-添加元素"><a href="#2-添加元素" class="headerlink" title="2.添加元素"></a>2.添加元素</h2><h3 id="内部添加"><a href="#内部添加" class="headerlink" title="内部添加"></a>内部添加</h3><p>在指定元素内部添加新元素</p>
<ul>
<li>$(‘ul’).prepend(li);                  内部添加且放到内容最<em>前面</em></li>
<li>$(‘ul’).append(li);                    内部添加且放到内容最<em>后面</em></li>
</ul>
<h3 id="外部添加"><a href="#外部添加" class="headerlink" title="外部添加"></a>外部添加</h3><p>在指定元素的上面或者下面添加新的元素</p>
<ul>
<li><p>$(‘.test’).after(div);                        放到后面</p>
</li>
<li><p>$(‘.test’).before(div);                     放到前面</p>
</li>
</ul>
<h2 id="3-删除元素"><a href="#3-删除元素" class="headerlink" title="3.删除元素"></a>3.删除元素</h2><p>删除指定元素或者其子元素</p>
<ul>
<li>$(‘ul’).remove();                           可以删除匹配的元素 自杀<ul>
<li>删除自身以及自己的子元素</li>
</ul>
</li>
<li>$(‘ul’).empty();                             可以删除匹配元素的子节点 孩子删除<ul>
<li>只删除自己的子元素</li>
</ul>
</li>
<li>$(‘ul’).html(‘ ‘);                              可以删除匹配元素的子节点 孩子删除 同上<ul>
<li>同上</li>
</ul>
</li>
</ul>
<h1 id="关于jQuery尺寸方法"><a href="#关于jQuery尺寸方法" class="headerlink" title="关于jQuery尺寸方法"></a>关于jQuery尺寸方法</h1><blockquote>
<p>（     ）       为空返回原始大小<br>（数值）    含有值就改变</p>
</blockquote>
<ul>
<li><p>width() &#x2F; height() </p>
<ul>
<li>获取设置元素 width和height大小</li>
</ul>
</li>
<li><p>innerWidth() &#x2F; innerHeight() </p>
<ul>
<li>获取设置元素width和height + padding 大小</li>
</ul>
</li>
<li><p>outerWidth() &#x2F; outerHeight() </p>
<ul>
<li>获取设 置元素width和height + padding + border大小</li>
</ul>
</li>
<li><p>outerwidth(true) &#x2F; outerHeight(true) </p>
<ul>
<li>获取设置width和height + padding + border + margin</li>
</ul>
</li>
</ul>
<h1 id="关于jQuery位置和被卷去方法"><a href="#关于jQuery位置和被卷去方法" class="headerlink" title="关于jQuery位置和被卷去方法"></a>关于jQuery位置和被卷去方法</h1><h2 id="位置属性"><a href="#位置属性" class="headerlink" title="位置属性"></a>位置属性</h2><p>1.获取&#x2F;设置距离文档的位置(偏移) offset</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">         <span class="comment">// 获取👇</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;.son&#x27;</span>).<span class="title function_">offset</span>());</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;.son&#x27;</span>).<span class="title function_">offset</span>().<span class="property">top</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置👇</span></span><br><span class="line">         <span class="comment">// $(&#x27;.son&#x27;).offset(&#123;</span></span><br><span class="line">         <span class="comment">//     top: 200,</span></span><br><span class="line">         <span class="comment">//     left: 200,</span></span><br><span class="line">         <span class="comment">// &#125;);</span></span><br></pre></td></tr></table></figure>

<p>2.获取(不能设置)距离带有定位父级位置(偏移) position 如果没有带有定位的父级，则以文档为准</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;.son&#x27;</span>).<span class="title function_">position</span>());</span><br></pre></td></tr></table></figure>

<h2 id="被卷去的部分"><a href="#被卷去的部分" class="headerlink" title="被卷去的部分"></a>被卷去的部分</h2><ul>
<li><p>被卷去的头部<strong>scrollTop(   )</strong></p>
</li>
<li><p>被卷去的左侧<strong>scrollLeft(   )</strong></p>
</li>
</ul>
<h1 id="事件处理on-x2F-off"><a href="#事件处理on-x2F-off" class="headerlink" title="事件处理on()&#x2F;off()"></a>事件处理on()&#x2F;off()</h1><h2 id="on"><a href="#on" class="headerlink" title="on()"></a>on()</h2><h3 id="on绑定多个事件"><a href="#on绑定多个事件" class="headerlink" title="on绑定多个事件"></a>on绑定多个事件</h3><p>对一个元素绑定事件需要点多次，非常繁琐，使用on（）方法就可以对一个元素进行多个事件绑定，非常银杏化。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">on</span>(&#123;</span><br><span class="line">    <span class="attr">mouseenter</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;skyblue&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">click</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;black&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mouseleave</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="on可以实现事件委托-委派"><a href="#on可以实现事件委托-委派" class="headerlink" title="on可以实现事件委托(委派)"></a>on可以实现事件委托(委派)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;li&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">11</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// click 是绑定在ul身上的,但是触发的对象是ul里面的li</span></span><br></pre></td></tr></table></figure>

<h3 id="on可以给未来动态创建的元素绑定事件"><a href="#on可以给未来动态创建的元素绑定事件" class="headerlink" title="on可以给未来动态创建的元素绑定事件"></a>on可以给未来动态创建的元素绑定事件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;ol&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;li&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">11</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> li = $(<span class="string">&quot;&lt;li&gt;我是后来创建的&lt;/li&gt;&quot;</span>);</span><br><span class="line">$(<span class="string">&#x27;ol&#x27;</span>).<span class="title function_">append</span>(li);</span><br></pre></td></tr></table></figure>

<ul>
<li>因为li是后来创建的,用原始方法绑定事件无法触发</li>
<li>可以通过on给父级ol绑定事件,这样后来生成的li就有了<strong>click</strong>事件</li>
</ul>
<h2 id="off"><a href="#off" class="headerlink" title="off()"></a>off()</h2><h3 id="1-事件绑定off"><a href="#1-事件绑定off" class="headerlink" title="1.事件绑定off"></a>1.事件绑定off</h3><p>off()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//$(&#x27;div&#x27;).off(); //这个是解除了div身上的所有事件</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">off</span>(<span class="string">&#x27;click&#x27;</span>); <span class="comment">//只接触点击事件 </span></span><br><span class="line">$(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">off</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;li&#x27;</span>); <span class="comment">//事件委托解除</span></span><br></pre></td></tr></table></figure>

<h3 id="2-只触发一次时间"><a href="#2-只触发一次时间" class="headerlink" title="2.只触发一次时间"></a>2.只触发一次时间</h3><p>one()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">one</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="number">22</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="自动触发"><a href="#自动触发" class="headerlink" title="自动触发"></a>自动触发</h1><h2 id="1-元素-click"><a href="#1-元素-click" class="headerlink" title="1.元素.click()"></a>1.元素.click()</h2><p><code>$(&#39;div&#39;).click();</code></p>
<h2 id="2-元素-trigger-‘事件’"><a href="#2-元素-trigger-‘事件’" class="headerlink" title="2.元素.trigger(‘事件’)"></a>2.元素.trigger(‘事件’)</h2><p><code>$(&#39;div&#39;).trigger(&#39;click&#39;);</code></p>
<h2 id="3-元素-triggerHandler-‘事件’"><a href="#3-元素-triggerHandler-‘事件’" class="headerlink" title="3.元素.triggerHandler(‘事件’)"></a>3.元素.triggerHandler(‘事件’)</h2><p>不会触发元素默认行为</p>
<p>比如说，如果元素时表单，则不会触发表单的光标</p>
<h1 id="关于jQuery事件对象"><a href="#关于jQuery事件对象" class="headerlink" title="关于jQuery事件对象"></a>关于jQuery事件对象</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了document&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(event);</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了div&#x27;</span>);</span><br><span class="line">        <span class="comment">// event.stopPropagation()停止冒泡</span></span><br><span class="line">        event.<span class="title function_">stopPropagation</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="使用jQuery对象拷贝"><a href="#使用jQuery对象拷贝" class="headerlink" title="使用jQuery对象拷贝"></a>使用jQuery对象拷贝</h1><h2 id="1-浅拷贝"><a href="#1-浅拷贝" class="headerlink" title="1. 浅拷贝"></a>1. 浅拷贝</h2><p>把原来对象里面的复杂数据类型地址拷贝给目标对象</p>
<p><strong>$.extend([拷贝的对象],[被拷贝的对象]);</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> targetObj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">$.<span class="title function_">extend</span>(targetObj, obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(targetObj);</span><br></pre></td></tr></table></figure>

<p><strong>如果被拷贝的对象中有相同的属性值：</strong></p>
<p><em>如果原先有属性 那么拷贝的属性就会</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> targetObj = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">$.<span class="title function_">extend</span>(targetObj, obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(targetObj); <span class="comment">//覆盖掉原先的数据</span></span><br></pre></td></tr></table></figure>

<h2 id="2-深拷贝"><a href="#2-深拷贝" class="headerlink" title="2.深拷贝"></a>2.深拷贝</h2><p><strong>$.extend(true，[拷贝的对象]，[被拷贝的对象]);</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> targetObj = &#123;</span><br><span class="line">              <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">              <span class="attr">msg</span>: &#123;</span><br><span class="line">                  <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;;</span><br><span class="line">          <span class="keyword">var</span> obj = &#123;</span><br><span class="line">              <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">              <span class="attr">msg</span>: &#123; <span class="comment">//拷贝的只是地址</span></span><br><span class="line">                  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;;</span><br><span class="line">          $.<span class="title function_">extend</span>(<span class="literal">true</span>, targetObj, obj);</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(targetObj);</span><br><span class="line">          targetObj.<span class="property">msg</span>.<span class="property">age</span> = <span class="number">20</span>; <span class="comment">//修改也不会有影响</span></span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(targetObj); <span class="comment">//msg:&#123;sex:&#x27;男&#x27;,age:20&#125;</span></span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure>

<h1 id="多库共存"><a href="#多库共存" class="headerlink" title="多库共存"></a>多库共存</h1><p>其实$()是jQuery自己封装的一个函数方法，可以通过 <code>var suibian = jQuery.noConflict();</code>来改变$符号</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 自己封装的$函数 类比为其他库的$</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">$</span>(<span class="params">ele</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(ele);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;div&#x27;</span>));</span><br><span class="line">    <span class="comment">// 1.改用jQuery不用$</span></span><br><span class="line">    jQuery.<span class="title function_">each</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.自己定义一个变量 suibian(&#x27;div&#x27;) = $(&#x27;div&#x27;)</span></span><br><span class="line">    <span class="keyword">var</span> suibian = jQuery.<span class="title function_">noConflict</span>();</span><br><span class="line">    <span class="title function_">suibian</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">suibian</span>(<span class="string">&#x27;span&#x27;</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>认识jQuery框架</tag>
      </tags>
  </entry>
  <entry>
    <title>关于This</title>
    <url>/found404.io/2022/06/27/%E5%85%B3%E4%BA%8EThis/</url>
    <content><![CDATA[<h1 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h1><p>this指向问题一般情况下this的最终指向的是那个调用它的对象</p>
<h2 id="1-全局作用域或者普通函数中this"><a href="#1-全局作用域或者普通函数中this" class="headerlink" title="1.全局作用域或者普通函数中this"></a>1.全局作用域或者普通函数中this</h2><p>指向全局对象<strong>window</strong>(注意定时器里面的this指向<strong>window</strong>)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// this指向问题一般情况下this的最终指向的是那个调用它的对象</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.全局作用域或者普通函数中this指向全局对象window(注意定时器甲面的this指向window)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//window</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="2-函数中的this"><a href="#2-函数中的this" class="headerlink" title="2.函数中的this"></a>2.函数中的this</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654744499437-6ea6b88a-d412-4772-9064-e590f576ae41.png" alt="img"></p>
<p><strong>注：</strong>匿名函数中的this也同样指向windows</p>
<h2 id="3-定时器中的this"><a href="#3-定时器中的this" class="headerlink" title="3.定时器中的this"></a>3.定时器中的this</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654744551802-255f5ba4-a4a8-42b1-9baf-8d488175c3d1.png" alt="img"></p>
<h2 id="4-对象或者构造函数中的this"><a href="#4-对象或者构造函数中的this" class="headerlink" title="4.对象或者构造函数中的this"></a>4.对象或者构造函数中的this</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">     </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.调用中谁调用this指向谁</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> o = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// this指向的是o这个对象</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    o.<span class="title function_">sayHi</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.构造函数中this指向构造函数的实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">name, age</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//指向fun实例对象</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title function_">fun</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>对象中的<strong>this</strong>指向它本身</li>
<li>构造函数中的<strong>this</strong>指向它这个构造函数</li>
</ul>
<p><em>构造函数中的this因为new的过程使得this指向发生了转移</em></p>
<p><strong>new的整个过程：</strong></p>
<ol>
<li>new会在内存中创建一个新的空对像</li>
<li>new会让this指向这个新对象</li>
<li>执行构造函数中的代码</li>
<li>return这个新对象</li>
</ol>
<h2 id="5-绑定事件中的this"><a href="#5-绑定事件中的this" class="headerlink" title="5.绑定事件中的this"></a>5.绑定事件中的this</h2><p>谁绑定事件<strong>this</strong>就指向谁</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654744731772-a804b07f-d121-4b03-aa9c-57980de6fc8d.png" alt="img"></p>
<h2 id="6-箭头函数this指向特殊性"><a href="#6-箭头函数this指向特殊性" class="headerlink" title="6.箭头函数this指向	特殊性"></a>6.箭头函数this指向	<em>特殊性</em></h2><p>箭头函数的this指向它的父作用域，箭头函数声明在全局作用域下其this指向window，若不在全局作用域下，this指向其父作用域</p>
<p><strong>箭头函数的this永远指向其父作用域，箭头函数没有自己的this</strong></p>
<h3 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654746204921-fab4c532-3bae-4292-9e9d-b5f9d6d75eac.png" alt="img"></p>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654746238269-01e68480-a644-4ce2-9c57-d94c32499fe0.png" alt="img"></p>
<h1 id="改变this指向方法"><a href="#改变this指向方法" class="headerlink" title="改变this指向方法"></a>改变this指向方法</h1><h2 id="1-call-方法-常用于继承"><a href="#1-call-方法-常用于继承" class="headerlink" title="1.call()方法    常用于继承"></a>1.call()方法    <em>常用于继承</em></h2><p>call(无数个参数);</p>
<ul>
<li>第一个参数：改变this指向</li>
<li>第二个参数：实参</li>
<li>使用之后会自动执行该函数，不适合用在定时器处理函数或者事件处理函数</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655455484583-0d0dd80b-d5c2-4752-9623-fdd9cf6b7e47.png" alt="img"> </p>
<h2 id="2-apply-方法"><a href="#2-apply-方法" class="headerlink" title="2.apply()方法"></a>2.apply()方法</h2><p>apply（两个参数）</p>
<ul>
<li>第一个参数：改变this指向</li>
<li>第二个参数：数组或者伪数组（里面为实参）</li>
<li>特点：使用时候会自动执行函数，不适合用在定时器处理函数或者事件处理函数</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655457205108-985cd7e9-ae97-4743-942d-6a12deb83123.png" alt="img"></p>
<h2 id="3-bind-方法"><a href="#3-bind-方法" class="headerlink" title="3.bind()方法"></a>3.bind()方法</h2><p>bind（无数个参数）</p>
<ul>
<li>第一个参数：改变this指向</li>
<li>第二个参数之后：实参</li>
<li>返回值为一个新的函数</li>
<li>使用的时候需要手动调用下返回的新函数（不会自动执行）</li>
<li>作用：改变事件处理函数或者定时器处理函数的this指向</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655457422671-0e2884fe-92a5-449b-9deb-e42a3cccafab.png" alt="img"></p>
<h2 id="三者区别"><a href="#三者区别" class="headerlink" title="三者区别"></a>三者区别</h2><p><strong>call、apply</strong>与<strong>bind</strong>区别：前两个可以自动执行，<strong>bind</strong>不会自动执行，需要手动调用</p>
<p><strong>call、bind</strong>与<strong>apply</strong>区别：前两个都有无数个参数，<strong>apply</strong>只有两个参数，而且第二个参数为**[数组]**</p>
<h1 id="经典例题🥳"><a href="#经典例题🥳" class="headerlink" title="经典例题🥳"></a>经典例题🥳</h1><h2 id="原型和this"><a href="#原型和this" class="headerlink" title="原型和this"></a>原型和this</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = <span class="number">100</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = <span class="number">200</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getX</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getX</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getY</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> <span class="title class_">Fn</span>();</span><br><span class="line"><span class="keyword">var</span> f2 = <span class="keyword">new</span> <span class="title class_">Fn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="property">getX</span> === f2.<span class="property">getX</span>); <span class="comment">//false  两个对象不能全等</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="property">getY</span> === f2.<span class="property">getY</span>); <span class="comment">//true	 使用的一个构造函数，原型上的方法相同</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="property">__proto__</span>.<span class="property">getY</span> === <span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getY</span>); <span class="comment">//true	对象的原型方法和构造函数的原型方法相同(指向同一个构造函数)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="property">__proto__</span>.<span class="property">getX</span> === f2.<span class="property">getX</span>); <span class="comment">//false	对象原型的方法和对象的方法不相等</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="property">__proto__</span>.<span class="property">getX</span> === <span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getX</span>); <span class="comment">//true	对象的原型方法和构造函数的原型方法相同(指向同一个构造函数)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="property">constructor</span>); <span class="comment">//f  Fn()  构造函数对象的构造方法是FN()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>.<span class="property">constructor</span>); <span class="comment">//空函数	构造函数的原型的构造方法是空函数</span></span><br><span class="line">f1.<span class="title function_">getX</span>(); <span class="comment">//	100	</span></span><br><span class="line">f1.<span class="property">__proto__</span>.<span class="title function_">getX</span>(); <span class="comment">//undefined	  原型上的方法没有给x赋值</span></span><br><span class="line">f2.<span class="title function_">getY</span>(); <span class="comment">//	200  </span></span><br><span class="line"><span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">getY</span>(); <span class="comment">//	undefined	  原型上的方法没有给x赋值</span></span><br></pre></td></tr></table></figure>

<p><strong>解析：</strong></p>
<ol>
<li><p>第一个false，首先要想到的是 简单数据类型的比较是<strong>对值的比较</strong>，他们都是存在在栈空间，所以两个值可以相等。而复杂数据类型的比较大不相同，他们在栈空间存放的是地址，当比较两者时，比较的是地址，所以当两个就算是属性相同方法相同的对象比较时，他们的<strong>存放地址</strong>不同，所以不同。</p>
</li>
<li><p>true的原因调用的是同一个原型上的方法，所以相同。</p>
</li>
<li><p>true，<code>f1.__proto__·</code>指向的是Fn原型，再调用getY方法，这其实就等同于<code>Fn.prototype.getY</code>直接调用方法</p>
</li>
<li><p>false，跟第一个同理，<code>f1.__proto__.getX</code>是原型上的方法，其存放地址与实例化对象f2.getX所指向的对象存放地址不相同。并非值的比较。</p>
</li>
<li><p>true，<code>f1.__proto__.getX === Fn.prototype.getX</code>可以看作<code>Fn.prototype.getX === Fn.prototype.getX</code>两者相同，都是原型上的方法，地址也相同。</p>
</li>
<li><p>实例化对象的constructor指向的是Person，死记。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数Person</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我叫&quot;</span>, <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 验证:实例对象p的constructor属性指向构造函数Person</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">constructor</span> === <span class="title class_">Person</span>); <span class="comment">//true,验证结果正确</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>ƒ Object() &#123; [native code] &#125;</code> Fn.prototype指向的是Fn的原型。Fn原型对象的<code>__proto__</code>指向的是Object对象原型。而Object对象原型的constructor指向的是Object对象，可以参考下图：<img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702174347263New2.png" alt="image-20220702174347263New2"></p>
</li>
<li><p>100，f1是一个对象，它调用它自身的getX方法，此时的this只想他自己，所以输出100</p>
</li>
<li><p>undefined，<code>f1.__proto__</code>指向的是fn原型，首先原型上本身就没有x，y属性值。其次调用的方法中的this指向调用它的对象</p>
</li>
<li><p>f2调用原型上的方法，谁调用，this就只想谁。所以输出200</p>
</li>
<li><p>跟第9个一样，原型调用自身的方法，this指向自己，没有y值，所以是underfined</p>
</li>
</ol>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>简单的node爬虫</title>
    <url>/found404.io/2022/07/07/%E5%85%B3%E4%BA%8Enode%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h1 id="编写一个简单的Node爬虫"><a href="#编写一个简单的Node爬虫" class="headerlink" title="编写一个简单的Node爬虫"></a>编写一个简单的Node爬虫</h1><h2 id="关于爬虫"><a href="#关于爬虫" class="headerlink" title="关于爬虫"></a>关于爬虫</h2><p>爬虫就是模拟用户浏览网站的行为。获取你要爬取页面的html源码。通过cheerio工具模块解析获取到的源码。cheerio跟jQuery原理一样，jQuery的API基本都可用。这是最基本的原理，但是只针对一些反爬措施不怎么强的网站。😢。</p>
<blockquote>
<p>爬虫编写的样式千奇百怪，但是背后的逻辑都是一样的</p>
</blockquote>
<span id="more"></span>

<h2 id="下载模块化工具"><a href="#下载模块化工具" class="headerlink" title="下载模块化工具"></a>下载模块化工具</h2><ol>
<li>新建一个文件夹</li>
<li>在当前文件夹下执行终端命令<code>npm init -y</code>创建配置文件</li>
<li>下载相应的模块化工具<code>npm i cheerio</code>,此时会自动生成一个<code>node_modules</code>文件</li>
<li><code>node_modules</code>文件下存放的是你所下载的模块化工具</li>
</ol>
<blockquote>
<p>注意：🤞下载node.js，配置好环境变量，如果网络不佳切换镜像(切换方法参考node.js文章)🤞</p>
</blockquote>
<h2 id="编写一个简单的爬虫脚本"><a href="#编写一个简单的爬虫脚本" class="headerlink" title="编写一个简单的爬虫脚本"></a>编写一个简单的爬虫脚本</h2><h3 id="1-导入需要的的模块"><a href="#1-导入需要的的模块" class="headerlink" title="1.导入需要的的模块"></a>1.导入需要的的模块</h3><blockquote>
<p>新建<code>index.js</code>文件夹</p>
<p>除了cheerio其他的https和fa路径模块都是node内置的模块</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入http模块</span></span><br><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入路径模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入cheerio工具解析模块</span></span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-使用https模块发送请求"><a href="#2-使用https模块发送请求" class="headerlink" title="2.使用https模块发送请求"></a>2.使用https模块发送请求</h3><blockquote>
<p>这里使用豆瓣的url地址</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> req = https.<span class="title function_">request</span>(<span class="string">&#x27;https://movie.douban.com/chart&#x27;</span>, <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> html = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    res.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">chunk</span> =&gt;</span> &#123;</span><br><span class="line">        html += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 结束数据监听后将所有内容拼接存放进html</span></span><br><span class="line">        <span class="keyword">let</span> $ = cheerio.<span class="title function_">load</span>(html);</span><br><span class="line">        <span class="keyword">let</span> text = [];</span><br><span class="line">        <span class="comment">// 将筛选的内容存放到text数组</span></span><br><span class="line">        $(<span class="string">&#x27;.article .indent .item&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">i, ele</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> imgs = $(<span class="string">&#x27;.nbg img&#x27;</span>, <span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>);</span><br><span class="line">            text.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">pic</span>: imgs</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="title function_">downloadImg</span>(text);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="分支解析"><a href="#分支解析" class="headerlink" title="分支解析"></a>分支解析</h4><p>将目标url的页面通过字符串形式拼接并交给html</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220707150801513.png" alt="image-20220707150801513"></p>
<p>在数据监听结束后使用cheerio工具解析模块将得到的页面筛选，并存入到text数组中</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220718104439830.png" alt="image-20220718104439830"></p>
<h3 id="3-编写下载方法"><a href="#3-编写下载方法" class="headerlink" title="3.编写下载方法"></a>3.编写下载方法</h3><p>循环得到的存放地址的text数组，将每个数组中的pic属性赋值给picUrl变量接收，使用https的get方法读取picUrl，字符串拼接并以二进制存放，<code>res.setEncoding(&#39;binary&#39;);</code></p>
<blockquote>
<p>注：也可以使用download工具下载，具体用法见官方文档<a href="https://www.npmjs.com/package/download">download npm 官方网站</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编写下载方法</span></span><br><span class="line"><span class="comment">// 将获取过来的数据进行下载</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">downloadImg</span>(<span class="params">allFilms</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allFilms.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 获取每个对象的url地址给picUrl</span></span><br><span class="line">        <span class="keyword">const</span> picUrl = allFilms[i].<span class="property">pic</span>;</span><br><span class="line">        https.<span class="title function_">get</span>(picUrl, <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="comment">// 读取picUrl写入到本地</span></span><br><span class="line">            <span class="comment">// 设置二进制存放</span></span><br><span class="line">            res.<span class="title function_">setEncoding</span>(<span class="string">&#x27;binary&#x27;</span>);</span><br><span class="line">            <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            res.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span>(<span class="params">chunk</span>) &#123;</span><br><span class="line">                str += chunk;</span><br><span class="line">            &#125;);</span><br><span class="line">            res.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">// 写入模块</span></span><br><span class="line">                <span class="comment">// 创建images文件夹</span></span><br><span class="line">                fs.<span class="title function_">mkdir</span>(<span class="string">&#x27;./images&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;imgages文件写入成功！&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="comment">// 往images文件中写入图片文件</span></span><br><span class="line">                <span class="comment">// str, &#x27;binary&#x27; 将str转换为二进制存放</span></span><br><span class="line">                fs.<span class="title function_">writeFile</span>(<span class="string">`./images/<span class="subst">$&#123;i&#125;</span>.png`</span>, str, <span class="string">&#x27;binary&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`第<span class="subst">$&#123;i&#125;</span>张图片下载成功`</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>将读取的url以字符串型形式拼接，并在数据读写完毕后，使用fs路径模块，将数据下载到指定文件夹下。</p>
<h3 id="4-结束请求"><a href="#4-结束请求" class="headerlink" title="4.结束请求"></a>4.结束请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结束请求</span></span><br><span class="line">req.<span class="title function_">end</span>();</span><br></pre></td></tr></table></figure>

<h3 id="5-执行脚本"><a href="#5-执行脚本" class="headerlink" title="5.执行脚本"></a>5.执行脚本</h3><p>在终端使用<code>node &#39;你js文件名字&#39;</code>指令，例如：<code>node index.js</code></p>
<h2 id="工程已上传gitee"><a href="#工程已上传gitee" class="headerlink" title="工程已上传gitee"></a>工程已上传gitee</h2><p>在工程文件中使用<code>git clone git@gitee.com:bl_ack233/watercress-reptile.git</code>指令将文件克隆下载。</p>
<blockquote>
<p>前提是有git，下载地址<a href="https://www.baidu.com/link?url=X5l38lG20iLR-7YnWC3veGGbD50L6Z_PNWoa-NZLmmy&wd=&eqid=b2fc5a7a002867d50000000262cc0709">git官网</a> (大概率被墙)</p>
</blockquote>
<h2 id="爬虫Pro版本Puppeteer"><a href="#爬虫Pro版本Puppeteer" class="headerlink" title="爬虫Pro版本Puppeteer"></a>爬虫Pro版本Puppeteer</h2><p><strong>Puppeteer</strong>是一个Node库，由Chrome官方团队进行维护，提供接口来控制headless Chrome。Headless Chrome是一种不使用Chrome来运行Chrome浏览器的方式。简单的来说就是一个运行在命令行中的 chrome,我们可以通过代码来实现我们常规的浏览器浏览网页的功能。<a href="https://blog.csdn.net/jessicaiu/article/details/82864001">原文链接</a></p>
<blockquote>
<p>就是使用代码模拟人的操作来浏览页面</p>
<p><a href="https://www.npmjs.com/package/puppeteer">Puppeteer官方文档</a></p>
</blockquote>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>同上下载方式一样，在工程文件下使用终端命令 <code>npm i puppeteer </code></p>
<blockquote>
<p>注意：如果你不想在全局下安装npm包，或者安装到别的地方，就在工程目录下运行指令</p>
</blockquote>
<h4 id="下载中所遇问题"><a href="#下载中所遇问题" class="headerlink" title="下载中所遇问题"></a>下载中所遇问题</h4><p>通常情况下，下载这个包的时候会包含下载chrome的过程，这个阶段常常报错，可以通过指令 <code>npm i --save puppeteer-core</code> 来跳过下载，<a href="https://blog.csdn.net/weixin_34292959/article/details/91451876?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165729112416781683988740%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165729112416781683988740&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-91451876-null-null.142%5Ev32%5Epc_search_result_control_group,185%5Ev2%5Econtrol&utm_term=puppeteer%E4%B8%8B%E8%BD%BD%E5%A4%B1%E8%B4%A5&spm=1018.2226.3001.4187">原帖子</a></p>
<h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入cheerio工具解析模块</span></span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入路径模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置网址</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;https://www.jd.com/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">start</span>(<span class="params">bool</span>) &#123;</span><br><span class="line">    <span class="comment">//启动浏览器,传入headless为false可以打开窗口</span></span><br><span class="line">    <span class="comment">//executablePath为你的谷歌浏览器下载地址</span></span><br><span class="line">    <span class="keyword">const</span> browers = <span class="keyword">await</span> puppeteer.<span class="title function_">launch</span>(&#123;</span><br><span class="line">            <span class="attr">headless</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">executablePath</span>: <span class="string">&#x27;C:/Program Files/Google/Chrome/Application/chrome.exe&#x27;</span></span><br><span class="line">        </span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//启动新页面</span></span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browers.<span class="title function_">newPage</span>()</span><br><span class="line">        <span class="comment">//设置页面打开时的页面宽度高度</span></span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">setViewport</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">1920</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">1080</span>,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开链接网址</span></span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">goto</span>(url)</span><br><span class="line">    <span class="keyword">var</span> content, $</span><br><span class="line">    <span class="keyword">await</span> page.evaluate(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 好多电商类或者其他数据较多的网站都会有懒加载，通过puppeteer内置的滚动事件模拟用户滚动行为</span></span><br><span class="line">        <span class="comment">// 让完整的页面加载出来，这时候获取的页面就是完整的页面</span></span><br><span class="line">        <span class="keyword">var</span> top = <span class="number">0</span></span><br><span class="line">            <span class="comment">//每200毫秒滚动100px</span></span><br><span class="line">        <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">scrollY</span>);</span><br><span class="line">            <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, top += <span class="number">100</span>)</span><br><span class="line">        &#125;, <span class="number">200</span>);</span><br><span class="line">        <span class="comment">//15秒后清除定时器并开始获取内容</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(timer);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> box = $(<span class="string">&#x27;.more2_item&#x27;</span>)</span><br><span class="line">                <span class="comment">// console.log(box);</span></span><br><span class="line">            <span class="keyword">let</span> <span class="title class_">List</span> = []</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; box.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">let</span> e = box.<span class="title function_">eq</span>(i)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">                <span class="keyword">let</span> title;</span><br><span class="line">                <span class="keyword">let</span> obj = &#123;</span><br><span class="line">                    <span class="attr">title</span>: $(e).<span class="title function_">find</span>(<span class="string">&#x27;.more2_info_name&#x27;</span>).<span class="title function_">text</span>(),</span><br><span class="line">                    <span class="attr">src</span>: $(e).<span class="title function_">find</span>(<span class="string">&#x27;.lazyimg_img&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">                    <span class="attr">price</span>: $(e).<span class="title function_">find</span>(<span class="string">&#x27;.more2_info_price_txt&#x27;</span>).<span class="title function_">text</span>(),</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="title class_">List</span>.<span class="title function_">push</span>(obj);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">List</span>);</span><br><span class="line">            <span class="title class_">List</span> = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title class_">List</span>, <span class="literal">undefined</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="comment">//以下是下载json,创建元素</span></span><br><span class="line">            <span class="keyword">var</span> ele = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            <span class="comment">//设置下载文件名</span></span><br><span class="line">            ele.<span class="property">download</span> = <span class="string">&quot;jingdong.json&quot;</span>;</span><br><span class="line">            <span class="comment">//隐藏元素</span></span><br><span class="line">            ele.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">            <span class="comment">//字符内容转变成blob地址</span></span><br><span class="line">            <span class="keyword">var</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="title class_">List</span>], &#123; <span class="attr">type</span>: <span class="string">&#x27;text/json&#x27;</span> &#125;);</span><br><span class="line">            <span class="comment">//如果是链接，这里也可以直接设置链接地址</span></span><br><span class="line">            ele.<span class="property">href</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(ele);</span><br><span class="line">            <span class="comment">//模拟点击</span></span><br><span class="line">            ele.<span class="title function_">click</span>();</span><br><span class="line">            <span class="comment">//移除元素</span></span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(ele);</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="number">25000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">start</span>(<span class="literal">false</span>)</span><br></pre></td></tr></table></figure>

<ol>
<li>好多电商类或者其他数据较多的网站都会有懒加载，通过Puppeteer内置的滚动事件模拟用户滚动行为。让完整的页面加载出来，这时候获取的页面就是完整的页面.</li>
<li>最终的数据下载，并没有使用fs模块，是因为没法用！尝试过，但是不成功。也许是Puppeteer的原因，这里使用的是HTML5中给a标签增加的一个download属性，原帖子<a href="https://blog.csdn.net/weixin_44870139/article/details/113534295?ops_request_misc=&request_id=&biz_id=102&utm_term=js%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%B9%B6%E4%B8%8B%E8%BD%BD&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-113534295.142%5Ev32%5Epc_search_result_control_group,185%5Ev2%5Econtrol&spm=1018.2226.3001.4187">使用a标签下载文件</a></li>
</ol>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
</search>
