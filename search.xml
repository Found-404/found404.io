<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AJAX</title>
    <url>/found404.io/2022/06/27/AJAX/</url>
    <content><![CDATA[<h1 id="基于jQuery的AJAX"><a href="#基于jQuery的AJAX" class="headerlink" title="基于jQuery的AJAX"></a>基于jQuery的AJAX</h1><h2 id="URL地址组成部分"><a href="#URL地址组成部分" class="headerlink" title="URL地址组成部分"></a>URL地址组成部分</h2><blockquote>
<ul>
<li>1.客户端与服务器之间的通讯协议    http </li>
<li>2.存有该资源的服务器名称          域名 </li>
<li>3.资源在服务器上具体的存放位置    域名之后</li>
</ul>
</blockquote>
<span id="more"></span>

<h2 id="客户端请求服务器的方式"><a href="#客户端请求服务器的方式" class="headerlink" title="客户端请求服务器的方式"></a>客户端请求服务器的方式</h2><blockquote>
<ul>
<li>get:请求常用于获取服务器(向服务器要资源)</li>
<li>eg：根据url地址从服务器获取html文件，css文件，js文件，图片文件，数据资源等</li>
<li>post请求常用于向服务器提交数据(往服务器发送数据)</li>
<li>eg：登陆时向服务器提交登录信息</li>
</ul>
</blockquote>
<h2 id="jQuery中的AJAX"><a href="#jQuery中的AJAX" class="headerlink" title="jQuery中的AJAX"></a>jQuery中的AJAX</h2><h3 id="get-获取数据"><a href="#get-获取数据" class="headerlink" title="$.get()获取数据"></a>$.get()获取数据</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(url,[data],[callback])</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>url          字符串型    <strong>必须</strong>    要请求的资源地址</li>
<li>data         Object      <strong>非必须</strong>  请求资源期间要携带的参数</li>
<li>callback     function    <strong>非必须</strong>  请求成功时回调函数</li>
</ul>
</blockquote>
<p><strong>代码示例：</strong></p>
<p><strong>发起不带参数的请求：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnGet&quot;</span>&gt;</span>发起不带参数的请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#btnGet&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">get</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//res 是请求服务器返回来的数据</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>发起带参数的请求：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnGet&quot;</span>&gt;</span>发起带参数的请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#btnGet&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">get</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,&#123;<span class="attr">id</span>:<span class="number">1</span>&#125;,<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 此时的res是服务器id为1的对象数据</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="post-发送post请求"><a href="#post-发送post请求" class="headerlink" title="$.post()发送post请求"></a>$.post()发送post请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">post</span>(url,[data],[callback])</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>url          字符串型    <strong>必须</strong>    提交数据的地址</li>
<li>data         Object      <strong>非必须</strong>  要提交的数据</li>
<li>callback     function    <strong>非必须</strong>  数据提交成功的回调函数</li>
</ul>
</blockquote>
<p><strong>代码示例：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;postBtn&quot;</span>&gt;</span>post提交数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#postBtn&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">post</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/addbooks&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">bookname</span>: <span class="string">&#x27;水浒传&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">author</span>: <span class="string">&#x27;施耐庵&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">publisher</span>: <span class="string">&#x27;天津出版社&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;, <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="ajax-函数"><a href="#ajax-函数" class="headerlink" title="$ajax()函数"></a>$ajax()函数</h2><blockquote>
<p>相比于$.get0 和$.post0函数, jQuery中提供的$.ajax()函数,是一个功能比较综合的函数， 它允许我们对Ajax请求进行更详细的配置。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//请求的方式 如 get 或 post</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//请求的url地址</span></span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;, <span class="comment">//这次请求携带的数据</span></span><br><span class="line">    <span class="comment">//请求完成过后回调函数</span></span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="comment">//失败回调</span></span><br><span class="line">    <span class="attr">error</span>:<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">			</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>代码示例：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//GET请求</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#ajaxGet&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//POST请求</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#ajaxPost&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;PSOT&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/addbooks&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">bookname</span>: <span class="string">&#x27;水浒传&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">author</span>: <span class="string">&#x27;施耐庵&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">publisher</span>: <span class="string">&#x27;天津出版社&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><blockquote>
<p>使用Ajax请求数据时，被请求的URL地址，就叫做数据接口(简称接口)。同时，每个接口必须有请求方式(get&#x2F;post)。</p>
<p><a href="https://web.postman.co/workspace/My-Workspace~71c70ac7-23a9-4d8c-8f5b-ccd1b8d539e6/overview?workspaceOnboarding=show">接口测试工具 Postman</a></p>
</blockquote>
<h3 id="什么是接口文档？"><a href="#什么是接口文档？" class="headerlink" title="什么是接口文档？"></a>什么是接口文档？</h3><blockquote>
<p>接口文档，顾名思义就是接口的说明文档，它是我们调用接口的依据。好的接口文档包含了对接口URL,参数以及输出内容的说明,我们参照接口文档就能方便的知道接口的作用，以及接口如何进行调用。</p>
</blockquote>
<p>接口文档可以包含很多信息，也可以按需进行精简，不过, 一个合格的接口文档,应该包含以下6项内容,从而为接口的调用提供依据:</p>
<blockquote>
<ol>
<li><p>接口名称：用来标识各个接口的简单说明，如登录接口，获取图书列表接口等。</p>
</li>
<li><p>接口URL：接口的调用地址。</p>
</li>
<li><p>调用方式： 接口的调用方式，如<strong>GET</strong>或<strong>POST</strong>.</p>
</li>
<li><p>参数格式：接口需要传递的参数，每个参数必须包含参数名称、参数类型、是否必选、参数说明这4项内容。</p>
</li>
<li><p>响应格式：接口的返回值的详细描述，一 般包含数据名称、数据类型、说明3项内容。</p>
</li>
<li><p>返回示例 (可选)：通过对象的形式，例举服务器返回数据的结构。</p>
</li>
</ol>
</blockquote>
<h2 id="form表单"><a href="#form表单" class="headerlink" title="form表单"></a>form表单</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表单标签 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表单域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text &quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password &quot;</span> <span class="attr">name</span>=<span class="string">&quot; &quot;</span> <span class="attr">id</span>=<span class="string">&quot; &quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表单提交 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送 &quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>form的属性:</strong><br><strong>action</strong>  规定当提交表单时候向何处发送表单数据  如果没有内容则默认当前URL地址</p>
<table>
<thead>
<tr>
<th align="center">target：</th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">_blank</td>
<td align="center">在新窗口中打开</td>
</tr>
<tr>
<td align="center">_self</td>
<td align="center">默认在相同框架中打开</td>
</tr>
<tr>
<td align="center">_parent</td>
<td align="center">在父框架集中打开</td>
</tr>
<tr>
<td align="center">_top</td>
<td align="center">在整个窗口中打开</td>
</tr>
<tr>
<td align="center">framename</td>
<td align="center">在指定的框架中打开</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">method:</th>
<th align="center">GET&#x2F;POST</th>
</tr>
</thead>
<tbody><tr>
<td align="center">GET</td>
<td align="center">get适合提交少量简单数据</td>
</tr>
<tr>
<td align="center">POST</td>
<td align="center">post适合提交大量复杂包含文件上传的数据</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">enctype:</th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">application&#x2F;x-www-form-urlencoded</td>
<td align="center">在发送前编码所有字符</td>
</tr>
<tr>
<td align="center">multipart&#x2F;form-data</td>
<td align="center">部队字符编码 在使用包含文件上传控件的表单时必须使用该值(文件上传)</td>
</tr>
<tr>
<td align="center">text&#x2F;plain</td>
<td align="center">空格转换为“+”加号 但不对特殊字符编码</td>
</tr>
</tbody></table>
<h3 id="什么是表单的同步提交"><a href="#什么是表单的同步提交" class="headerlink" title="什么是表单的同步提交"></a>什么是表单的同步提交</h3><p>通过点击submit按钮 触发表单提交的操作 从而使页面跳转到action URL的行为叫做表单的同步提交:</p>
<p><strong>同步提交缺点:</strong></p>
<blockquote>
<ol>
<li>整个页面跳转 </li>
<li>页面之前的状态和数据会丢失</li>
</ol>
</blockquote>
<p><strong>解决方法:</strong></p>
<blockquote>
<ul>
<li>表单只负责采集数据</li>
<li>Ajax负责将数据提交到服务器</li>
</ul>
</blockquote>
<h3 id="监听表单提交事件和阻止默认行为"><a href="#监听表单提交事件和阻止默认行为" class="headerlink" title="监听表单提交事件和阻止默认行为"></a>监听表单提交事件和阻止默认行为</h3><blockquote>
<p><strong>serialize( )</strong> 获取表单中的所有数据</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">id</span>=<span class="string">&quot;f1&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 监听表单提交事件</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 第一种方式</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// $(&quot;#f1&quot;).submit(function(e) &#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     alert(&#x27;第一种&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     // 第一种阻止表单默认提交行为</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     e.preventDefault();</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 第二种方式</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#f1&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;第二种&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 第二种阻止表单默认提交行为(跟第一种一样)</span></span></span><br><span class="line"><span class="language-javascript">                e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 利用serialize()获取表单中的所有数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 前提是被获取表单必须有name属性</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// serializeArray()也可以获取表单中的数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> shujv = $(<span class="variable language_">this</span>).<span class="title function_">serialize</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(shujv);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="jQuery文件上传"><a href="#jQuery文件上传" class="headerlink" title="jQuery文件上传"></a>jQuery文件上传</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文件选择框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上传文件按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnUpload&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../loadingImgGif/20140524124233131.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;loading&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ajaxStart监听到Ajax请求被发起了</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">document</span>).<span class="title function_">ajaxStart</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#loading&#x27;</span>).<span class="title function_">show</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ajaxStop监听到AJAX完成的事件</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">document</span>).<span class="title function_">ajaxStop</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#loading&#x27;</span>).<span class="title function_">hide</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#btnUpload&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 将jQuery转换为DOM</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> files = $(<span class="string">&#x27;#file&#x27;</span>)[<span class="number">0</span>].<span class="property">files</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (files.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;请选择文件后上传&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 向formData中追加文件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript">            fd.<span class="title function_">append</span>(<span class="string">&#x27;avatar&#x27;</span>, files[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 发起jQuery的AJAX请求，上传文件</span></span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/upload/avatar&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: fd,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 不修改content-type属性，使用FormData默认的Content-Type值</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">processData</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 不对FormData中的数据进行url编码，而是将FormData数据原样发送到服务器</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">contentType</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="初识XMLHttpRequest"><a href="#初识XMLHttpRequest" class="headerlink" title="初识XMLHttpRequest"></a>初识XMLHttpRequest</h1><blockquote>
<p><strong>XMLHttpRequest</strong> (简称xhr) 是浏览器提供的Javascript 对象，通过它，可以请求服务器上的数据资源。之前所学的jQuery中的Ajax函数，就是基于xhr对象封装出来的。</p>
</blockquote>
<h2 id="使用xhr发送get请求"><a href="#使用xhr发送get请求" class="headerlink" title="使用xhr发送get请求"></a>使用xhr发送get请求</h2><p><strong>步骤：</strong></p>
<blockquote>
<ol>
<li>创建xhr对象</li>
<li>调用xhr.open()函数</li>
<li>调用xhr.send()函数</li>
<li>监听xhr.onreadystatechange事件</li>
</ol>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1.创建xhr对象</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">// 2.调用xhr.open()函数</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>);</span><br><span class="line">    <span class="comment">// 3.调用xhr.send()函数</span></span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">    <span class="comment">// 4.监听xhr.onreadystatechange事件</span></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 固定判断条件</span></span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取服务器相应的数据成功</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">            <span class="comment">// 传过来一个JSON结构的字符串</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="XMLHttpRequest对象的readyState属性："><a href="#XMLHttpRequest对象的readyState属性：" class="headerlink" title="XMLHttpRequest对象的readyState属性："></a>XMLHttpRequest对象的readyState属性：</h3><table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">状态</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">UNSENT</td>
<td align="center">XMLHttpRequest对象已被创建，但尚未调用open方法</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">OPENED</td>
<td align="center">open()方法已经被调用</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">HEADERS_RECEIVED</td>
<td align="center">send()方法已经被调用,响应头也已经被接收</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">LOADING</td>
<td align="center">数据接收中,此时response属性中已经包含部分数据</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">DONE</td>
<td align="center">Ajax请求完成,这就意味着数据传输已经彻底完成或失败</td>
</tr>
</tbody></table>
<h2 id="发起带参数的get请求"><a href="#发起带参数的get请求" class="headerlink" title="发起带参数的get请求"></a>发起带参数的get请求</h2><p><strong>代码示例：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 在url末尾添加向服务器发送信息的字符串  ?id=1</span></span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks?id=1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 固定判断条件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取服务器相应的数据成功</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>带一个参数</p>
<p><a href="http://www.liulongbin.top:3006/api/getbooks?id=1">http://www.liulongbin.top:3006/api/getbooks?id=1</a></p>
<p>带二个参数</p>
<p><a href="http://www.liulongbin.top:3006/api/getbooks?id=1&amp;bookname=%E8%A5%BF%E6%B8%B8%E8%AE%B0">http://www.liulongbin.top:3006/api/getbooks?id=1&amp;bookname=西游记</a></p>
</blockquote>
<p><strong>GET请求携带参数的本质:</strong></p>
<blockquote>
<p>无论使用$.ajax(), 还是使用$.get(),又或者直接使用xhr对象发起GET请求，当需要携带参数的时候，本质上,都是直<br>接将参数以查询字符串的形式，追加到URL地址的后面，发送到服务器的。</p>
</blockquote>
<h3 id="URL的编码与解码"><a href="#URL的编码与解码" class="headerlink" title="URL的编码与解码"></a>URL的编码与解码</h3><blockquote>
<p>1.什么是URL编码：</p>
<ul>
<li>URL地址中，只允许出现英文相关的字母、标点符号、数字,因此，在URL地址中不允许出现中文字符。</li>
<li>如果URL中需要包含中文这样的字符，则必须对中文字符进行编码(转义)。</li>
<li>URL编码的原则:使用安全的字符(没有特殊用途或者特殊意义的可打印字符)去表示那些不安全的字符。</li>
<li>URL编码原则的通俗理解:使用英文字符去表示非英文字符。</li>
</ul>
</blockquote>
<p><code>http://www.liulongbin.top:3006/api/getbooks?id=1&amp;bookname=西游记</code></p>
<p>👇👇👇经过url编码之后，url地址变成了如下格式👇👇👇</p>
<p><code>http://www.liulongbin.top:3006/api/getbooks?id=1&amp;bookname=%E8%A5%BF%E6%B8%B8%E8%AE%B0</code></p>
<blockquote>
<p>2.如何对URL进行编码与解码</p>
<ul>
<li>浏览器提供了URL编码与解码的API,分别是:</li>
<li><strong>encodeURI( )</strong>  编码的函数</li>
<li><strong>decodeURI( )</strong>  解码的函数</li>
</ul>
</blockquote>
<p><strong>示例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">encodeURI</span>(<span class="string">&#x27;黑马程序员&#x27;</span>)); <span class="comment">//%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">decodeURI</span>(<span class="string">&#x27;%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98&#x27;</span>)); <span class="comment">// 黑马程序员</span></span><br></pre></td></tr></table></figure>

<h2 id="使用xhr发送post请求"><a href="#使用xhr发送post请求" class="headerlink" title="使用xhr发送post请求"></a>使用xhr发送post请求</h2><blockquote>
<p>步骤:</p>
<ol>
<li>创建<strong>xhr</strong>对象</li>
<li>调用 <strong>xhr.open()</strong> 函数</li>
<li>设置<strong>Content-Type</strong>属性(固定写法)</li>
<li>调用 <strong>xhr.send()</strong> 函数，同时指定要发送的数据（携带的参数）</li>
<li>监听<strong>xhr.onreadystatechange</strong>事件</li>
</ol>
</blockquote>
<p><strong>代码示例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.创建xhr对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">// 2.调用.open()方法</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>);</span><br><span class="line"><span class="comment">// 3.设置Content-Type属性(固定写法)</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="line"><span class="comment">// 4.调用xhr.send()函数</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;bookname=三体&amp;author=刘慈欣&amp;publisher=河南图书&#x27;</span>);</span><br><span class="line"><span class="comment">// 5.监听事件</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据交换格式："><a href="#数据交换格式：" class="headerlink" title="数据交换格式："></a>数据交换格式：</h2><p><strong>什么是XML?</strong><br>XML的英文全称是EXtensible Markup Language,即可扩展标记语言。因此，XML 和HTML类似，也是一种标记语言。</p>
<blockquote>
<ul>
<li>虽然html和XML都是标记语言.但是两者没有任何关系</li>
<li>HTML被设计用来描述网页上的内容,就是网页内容的载体 </li>
<li>XML被设计用来传输和 存储数据，是数据的载体</li>
</ul>
</blockquote>
<p><strong>XML缺点：</strong></p>
<blockquote>
<ul>
<li>XML格式臃肿,和数据无关的代码多,体积大，传输效率低</li>
<li>在Javascript中解析XML比较麻烦 –&gt;</li>
</ul>
</blockquote>
<p><strong>什么是JSON?:</strong></p>
<blockquote>
<p>概念:</p>
<p>JSON的英文全称是JavaScript Object Notation,即”JavaScript 对象表示法”。简单来讲,JSON就是Javascript对象和数组的字符串表示法，它使用文本表示一个JS对象或数组的信息，因此,JSON的本质是字符串。</p>
</blockquote>
<blockquote>
<p>作用: </p>
<p>JSON 是一种轻量级的文本数据交换格式，在作用上类似于XML,专门用于存储和传输数据，但是JSON比XML更小更快、更易解析。</p>
</blockquote>
<blockquote>
<p>现状: </p>
<p>JSON是在2001年开始被推广和使用的数据格式，到现今为止，JSON已经成为了主流的数据交换格式。</p>
</blockquote>
<h2 id="JSON的两种结构"><a href="#JSON的两种结构" class="headerlink" title="JSON的两种结构"></a>JSON的两种结构</h2><p><strong>1.对象结构:</strong></p>
<blockquote>
<p>对象结构在JSON中表示为{}括起来的内容。数据结构为 <u>{ key: value, key: value, …}</u> 的键值对结构。其中, key 必须是使用英文的双引号包事的字符串, value 的数据类型可以是数字、字符串、布尔值、null. 数组、对象6种类型。</p>
</blockquote>
<p><strong>2.数组结构:</strong></p>
<blockquote>
<p>数组结构:数组结构在JSON中表示为[]括起来的内容。数据结构为 <u>[“java””javascript”, 30, true … ]</u> 数组中数据的类型可以是数字、字符串、布尔值、null. 数组、对象6种类型。</p>
</blockquote>
<p><strong>3. JSON语法注意事项</strong></p>
<blockquote>
<ol>
<li>属性名必须使用双引号包裹</li>
<li>字符串类型的值必须使用双引号包裹</li>
<li>JSON中不允许使用单引号表示字符串</li>
<li>JSON中不能写注释</li>
<li>JSON的最外层必须是对象或数组格式</li>
<li>不能使用undefined或函数作为JSON的值</li>
</ol>
</blockquote>
<blockquote>
<ul>
<li><strong>JSON的作用:</strong> 在计算机与网络之间存储和传输数据。</li>
<li><strong>JSON的本质:</strong> 用字符串来表示Javascript对象数据或数组数据</li>
</ul>
</blockquote>
<h3 id="JSON和js对象的关系"><a href="#JSON和js对象的关系" class="headerlink" title="JSON和js对象的关系"></a>JSON和js对象的关系</h3><blockquote>
<p>JSON是JS对象的字符串表示法，它使用文本表示个JS对象的信息，本质是一个字符串。</p>
</blockquote>
<p><strong>例如:</strong></p>
<ul>
<li><strong>JSON.stringify(obj2)</strong>&amp;emsp;&amp;emsp;序列化(对象转换为字符串)</li>
<li><strong>JSON.parse(jsonStr)</strong>&amp;emsp;&amp;emsp;反序列化 (字符串转换为对象)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是一个对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 这是一个json字符串，本质上是一个字符串</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;a&quot;:&quot;hello&quot;,&quot;b&quot;:&quot;world&quot;&#125;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JSON和js对象互转</span></span><br><span class="line"><span class="keyword">var</span> jsonStr = <span class="string">&#x27;&#123;&quot;a&quot;:&quot;hello&quot;,&quot;b&quot;:&quot;world&quot;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON转换为js  叫做反序列化 (字符串转换为对象)</span></span><br><span class="line"><span class="keyword">var</span> objnew = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objnew);</span><br><span class="line"></span><br><span class="line"><span class="comment">// js转换为JSON  叫做序列化(对象转换为字符串)</span></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">    <span class="attr">c</span>: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> string = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="演示JSON-parse函数的应用场景"><a href="#演示JSON-parse函数的应用场景" class="headerlink" title="演示JSON.parse函数的应用场景"></a>演示JSON.parse函数的应用场景</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>);</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 固定判断条件</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取服务器相应的数据成功</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">        <span class="comment">// 传输过来JSON结构的字符串</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 被转换成对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="XMLHttpRequest-Level2的新特性"><a href="#XMLHttpRequest-Level2的新特性" class="headerlink" title="XMLHttpRequest Level2的新特性"></a>XMLHttpRequest Level2的新特性</h2><p>旧版<strong>XMLHttpRequest</strong>的缺点</p>
<blockquote>
<p>只支持文本数据传输，无法用来读取和上传文件传送和接收数据时，没有进度信息，只提示有没有完成</p>
</blockquote>
<p><strong>-XMLHttpRequest Level2的新特性</strong></p>
<blockquote>
<ol>
<li>可以设置HTTP请求的时限</li>
<li>可以使用formData对象管理表单数据</li>
<li>可以上传文件</li>
<li>可以获得数据传输的进度信息</li>
</ol>
</blockquote>
<p>有时，Ajax 操作很耗时，而且无法预知要花少时间。如果网速很慢，用户可能要等很久。新版本的XMLHttpRequest对象，增加了timeout 属性，可以设置HTTP请求的时限:</p>
<h3 id="设置HTTP请求的时限"><a href="#设置HTTP请求的时限" class="headerlink" title="设置HTTP请求的时限:"></a>设置HTTP请求的时限:</h3><p><strong>代码示例：</strong></p>
<ul>
<li>设置超时时间10ms<ul>
<li><strong>xhr.timeout &#x3D; 10;</strong></li>
</ul>
</li>
<li>设置超时后触发的函数<ul>
<li><strong>xhr.ontimeout &#x3D; function( ) { };</strong></li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1.创建xhr对象</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">// 设置超时时间为10毫秒</span></span><br><span class="line">    xhr.<span class="property">timeout</span> = <span class="number">10</span>;</span><br><span class="line">    xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求超时!&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 2.调用xhr.open()函数</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>);</span><br><span class="line">    <span class="comment">// 3.调用xhr.send()函数</span></span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">    <span class="comment">// 4.监听xhr.onreadystatechange事件</span></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 固定判断条件</span></span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取服务器相应的数据成功</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">            <span class="comment">// 传过来一个JSON结构的字符串</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="FormData对象的基本使用："><a href="#FormData对象的基本使用：" class="headerlink" title="FormData对象的基本使用："></a>FormData对象的基本使用：</h3><blockquote>
<ol>
<li>调用 <strong>append</strong> 函数向fd中追加数据</li>
<li>向 <strong>send( )</strong> 函数中追加数据</li>
</ol>
</blockquote>
<p>代码示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建FormData实例</span></span><br><span class="line"><span class="keyword">var</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line"><span class="comment">// 调用append函数 向fd中追加数据</span></span><br><span class="line">fd.<span class="title function_">append</span>(<span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;zs&#x27;</span>);</span><br><span class="line">fd.<span class="title function_">append</span>(<span class="string">&#x27;upwd&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/formdata&#x27;</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>(fd);</span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 固定判断条件</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取服务器相应的数据成功</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>));</span><br><span class="line">        <span class="comment">// 传过来一个JSON结构的字符串</span></span><br><span class="line">        <span class="comment">// 使用反序列化转换</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="FormData获取表单中的数据："><a href="#FormData获取表单中的数据：" class="headerlink" title="FormData获取表单中的数据："></a>FormData获取表单中的数据：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upwd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 通过dom操作获取到form表单元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#form1&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        form.<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 阻止表单默e认提交</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            e.<span class="title function_">preventDefault</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 创建formData 快速获取到form表单中的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>(form);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/formdata&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="title function_">send</span>(fd);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 固定判断条件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// 获取服务器相应的数据成功</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// 传过来一个JSON结构的字符串</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// 使用反序列化转换</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="XMLHttpRequest-Level2上传文件"><a href="#XMLHttpRequest-Level2上传文件" class="headerlink" title="XMLHttpRequest Level2上传文件"></a>XMLHttpRequest Level2上传文件</h3><p>新版XML HttpRequest对象，不仅可以发送文本信息，还可以上传文件</p>
<p><strong>实现步骤:</strong></p>
<ol>
<li>定义UI结构</li>
<li>验证是否选择了文件</li>
<li>向FormData中追加文件</li>
<li>使用xhr发起上传文件的请求</li>
<li>监听onreadystatechange事件</li>
</ol>
<p><strong>代码示例：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.定义UI结构 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上传文件按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnUpload&quot;</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- img标签 显示上传后的图片 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.验证是否选择了文件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取上传文件的按钮</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btnUpload = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btnUpload&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 添加点击事件</span></span></span><br><span class="line"><span class="language-javascript">        btnUpload.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取到用户选择的文件列表</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> files = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#file1&#x27;</span>).<span class="property">files</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(files);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (files.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;请选择上传的文件&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3.向FormData中追加文件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript">            fd.<span class="title function_">append</span>(<span class="string">&#x27;avatar&#x27;</span>, files[<span class="number">0</span>]); <span class="comment">//avatar翻译为头像</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 4.使用xhr发起上传文件的请求</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/upload/avatar&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">send</span>(fd);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 5.监听onreadystatechange事件</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (data.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 上传成功</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;上传成功&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#img&#x27;</span>).<span class="property">src</span> = <span class="string">&#x27;http://www.liulongbin.top:3006&#x27;</span> + data.<span class="property">url</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 上传失败</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;图片上传失败&#x27;</span> + data.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="显示文件上传进度"><a href="#显示文件上传进度" class="headerlink" title="显示文件上传进度"></a>显示文件上传进度</h3><p><strong>主要使用到：</strong></p>
<ol>
<li><strong>onprogress</strong>文件上传中事件</li>
<li><strong>onload</strong>文件上传成功事件</li>
<li>以及内置<strong>event</strong>对象<ul>
<li><u>e.lengthComputable</u>返回布尔值  <em>判断传输数据是否是可以计算长度</em></li>
<li><u>e.loaded</u>已经上传的进度</li>
<li><u>e.total</u>总进度</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.定义UI结构 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上传文件按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnUpload&quot;</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- bootstrap中的进度条 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:500px; margin:10px; &quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar progress-bar-striped active&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 0%&quot;</span> <span class="attr">id</span>=<span class="string">&quot;percent&quot;</span>&gt;</span></span><br><span class="line">            0%</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- img标签 显示上传后的图片 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.验证是否选择了文件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取上传文件的按钮</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btnUpload = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btnUpload&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 添加点击事件</span></span></span><br><span class="line"><span class="language-javascript">        btnUpload.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取到用户选择的文件列表</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> files = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#file1&#x27;</span>).<span class="property">files</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(files);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (files.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;请选择上传的文件&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3.向FormData中追加文件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript">            fd.<span class="title function_">append</span>(<span class="string">&#x27;avatar&#x27;</span>, files[<span class="number">0</span>]); <span class="comment">//avatar翻译为头像</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 4.使用xhr发起上传文件的请求</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 监听文件上传进度------------------------------------------------------------------</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// onprogress文件上传中事件</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">upload</span>.<span class="property">onprogress</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// e.lengthComputable返回布尔值  判断传输数据是否是可以计算长度</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (e.<span class="property">lengthComputable</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 计算出上传的进度</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// e.loaded 已将上传的进度</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// e.total  总进度</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> procent = <span class="title class_">Math</span>.<span class="title function_">ceil</span>((e.<span class="property">loaded</span> / e.<span class="property">total</span>) * <span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// console.log(procent + &#x27;%&#x27;);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// !!!!!!!!!!!!!!!动态设置进度条!!!!!!!!!!!!!!!</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// attr()jQuery封装的设置自定义属性方法</span></span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&#x27;#percent&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;width:&#x27;</span> + procent + <span class="string">&#x27;%&#x27;</span>).<span class="title function_">html</span>(procent + <span class="string">&#x27;%&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// onload文件上传成功事件</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">upload</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&#x27;#percent&#x27;</span>).<span class="title function_">removeClass</span>().<span class="title function_">addClass</span>(<span class="string">&#x27;progress-bar progress-bar-success&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 监听文件上传进度------------------------------------------------------------------</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/upload/avatar&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">send</span>(fd);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 5.监听onreadystatechange事件</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (data.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 上传成功</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;上传成功&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#img&#x27;</span>).<span class="property">src</span> = <span class="string">&#x27;http://www.liulongbin.top:3006&#x27;</span> + data.<span class="property">url</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 上传失败</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;图片上传失败&#x27;</span> + data.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="什么是Axios库"><a href="#什么是Axios库" class="headerlink" title="什么是Axios库"></a>什么是Axios库</h1><p><strong>1.什么是axios</strong></p>
<blockquote>
<p>Axios是专注于网络数据请求的库。<br>相比于原生的XMLHttpRequest对象，axios 简单易用。<br>相比于jQuery, axios 更加轻量化，只专注于网络数据请求。</p>
</blockquote>
<h2 id="发起get请求"><a href="#发起get请求" class="headerlink" title="发起get请求"></a>发起get请求</h2><p><img src="https://i.bmp.ovh/imgs/2022/06/24/7f26d3041bfe3351.png" alt="png"></p>
<h2 id="发起post请求"><a href="#发起post请求" class="headerlink" title="发起post请求"></a>发起post请求</h2><p><img src="https://i.bmp.ovh/imgs/2022/06/24/7f26d3041bfe3351.png" alt="png"></p>
<h2 id="Axios中的ajax请求"><a href="#Axios中的ajax请求" class="headerlink" title="Axios中的ajax请求"></a>Axios中的ajax请求</h2><h3 id="直接使用axios发起GET请求-类似于ajax中的-ajax"><a href="#直接使用axios发起GET请求-类似于ajax中的-ajax" class="headerlink" title="直接使用axios发起GET请求 类似于ajax中的$.ajax()"></a>直接使用axios发起GET请求 类似于ajax中的$.ajax()</h3><p><img src="https://i.bmp.ovh/imgs/2022/06/24/39b2bb46022a6ee5.png" alt="png"></p>
<h3 id="直接使用axios发起POST请求-类似于ajax中的-ajax"><a href="#直接使用axios发起POST请求-类似于ajax中的-ajax" class="headerlink" title="直接使用axios发起POST请求 类似于ajax中的$.ajax()"></a>直接使用axios发起POST请求 类似于ajax中的$.ajax()</h3><p><img src="https://i.bmp.ovh/imgs/2022/06/24/d2d956e157587721.png" alt="png"></p>
<h1 id="了解同源策略和跨域"><a href="#了解同源策略和跨域" class="headerlink" title="了解同源策略和跨域"></a>了解同源策略和跨域</h1><p><strong>1.什么是同源:</strong><br>如果两个页面的协议，域名和端口都相同，则两个页面具有相同的源。</p>
<p>例如:下表给出了相对于<code>http://www.test.com/index.html</code>页面的同源检测:<br><code>http://www.test.com:80/index.html(默认端口80)</code></p>
<p><strong>2.什么是同源策略:</strong><br>同源策略(英文全称Same origin policy) 是浏览器提供的一个安全功能。</p>
<p>MDN官方给定的概念:同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。 这是一个用于隔离潜在恶意文件的重要安全机制。</p>
<p>通俗的理解:浏览器规定，A网站的JavaScript, 不允许和非同源的网站C之间，进行资源的交互</p>
<blockquote>
<p>例如:</p>
<ol>
<li>无法读取非同源网页的Cookie. LocalStorage 和IndexedDB</li>
<li>无法接触非同源网页的DOM</li>
<li>无法向非同源地址发送Ajax请求</li>
</ol>
</blockquote>
<p><strong>什么是跨域:</strong></p>
<blockquote>
<p>同源指的是两个URL的协议、域名、端口-致，反之，则是跨域。<br>出现跨域的根本原因:浏览器的同源策略不允许非同源的URL之间进行资源的交互。<br>网页: <code>http://www.test.com/index.html</code><br>接口: <code>http://www.api.com/userlist</code></p>
</blockquote>
<p><strong>如何实现跨域数据请求:</strong></p>
<blockquote>
<p>现如今,实现跨域数据请求，最主要的两种解决方案，分别是JSONP和CORS.</p>
</blockquote>
<blockquote>
<p><strong>JSONP</strong>:出现的早,兼容性好(兼容低版本IE)。是前端程序员为 了解决跨域问题，被迫想出来的一种临时解决方案。缺点是只支持GET请求,不支持POST请求。</p>
</blockquote>
<blockquote>
<p><strong>CORS</strong>:出现的较晚，它是W3C标准，属于跨域Ajax请求的根本解决方案。支持GET和POST请求。缺点是不兼容某些低版本的浏览器。</p>
</blockquote>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>BOMplus</title>
    <url>/found404.io/2022/06/27/BOMplus/</url>
    <content><![CDATA[<h1 id="BOM操作"><a href="#BOM操作" class="headerlink" title="BOM操作"></a>BOM操作</h1><p><img src="https://img-blog.csdnimg.cn/d4d075ee9982467290c30398aa3eee59.png" alt="png"><br><img src="https://img-blog.csdnimg.cn/4d2bfa28bf4148d987d27444373e4d19.png" alt="png"></p>
<span id="more"></span>

<h2 id="什么是BOM？"><a href="#什么是BOM？" class="headerlink" title="什么是BOM？"></a>什么是BOM？</h2><p>BOM<code>（Browser Object Model）</code>即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其顶级对象是 window，并且每个对象都提供了很多方法与属性</p>
<h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><p>window 对象给我们提供了一个 location 属性用于获取或设置窗体的 URL，并且可以用于解析 URL</p>
<table>
<thead>
<tr>
<th align="center">location对象属性</th>
<th align="center">返回值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">location.href</td>
<td align="center">获取或设置整个url地址</td>
</tr>
<tr>
<td align="center">location.host</td>
<td align="center">返回主机(域名) <del><a href="http://www.baidu.com/">www.baidu.com</a></del></td>
</tr>
<tr>
<td align="center">location.port</td>
<td align="center">获取或设置整个url地址</td>
</tr>
<tr>
<td align="center">location.pathname</td>
<td align="center">返回路径</td>
</tr>
<tr>
<td align="center">location.search</td>
<td align="center">返回参数</td>
</tr>
<tr>
<td align="center">location.hash</td>
<td align="center">返回片段 #后面内容，常用于链接锚点</td>
</tr>
<tr>
<td align="center">location.protocol</td>
<td align="center">返回协议</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">location对象方法</th>
<th align="center">返回值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">location.assign()</td>
<td align="center">跟href一样，可以跳转页面(也称为重定向页面)</td>
</tr>
<tr>
<td align="center">location.replace()</td>
<td align="center">替换当前页面，因为不记录历史，所以不能后退页面</td>
</tr>
<tr>
<td align="center">location.reload()</td>
<td align="center">重新加载页面，相当于刷新按钮或者f5 如果参数为true 强制刷新ctrl+f5</td>
</tr>
</tbody></table>
<hr>
<h3 id="点击按钮跳转页面案例"><a href="#点击按钮跳转页面案例" class="headerlink" title="点击按钮跳转页面案例:"></a>点击按钮跳转页面案例:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>location<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         location.<span class="property">href</span> = <span class="string">&#x27;https://blog.csdn.net/WYF857446152/article/details/124860285?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165595085816782391824458%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165595085816782391824458&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-124860285-null-null.142^v20^control,157^v15^new_3&amp;utm_term=bom%E6%93%8D%E4%BD%9C&amp;spm=1018.2226.3001.4187&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="location-search接收返回的参数实现数据交互案例："><a href="#location-search接收返回的参数实现数据交互案例：" class="headerlink" title="location.search接收返回的参数实现数据交互案例："></a>location.search接收返回的参数实现数据交互案例：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;64-index.html&quot;</span>&gt;</span></span><br><span class="line">        用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">search</span>); <span class="comment">// ?uname=andy</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.先去掉？ substr(&#x27;起始的位置&#x27;,截取几个字符);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> params = location.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>); <span class="comment">// uname=andy</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(params);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.利用等号把字符串分割为数组 split(&#x27;=&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> arr = params.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.把数据写进div中</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">innerHTML</span> = arr[<span class="number">1</span>] + <span class="string">&#x27;欢迎您!&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><p>navigator 对象包含有关浏览器的信息，它有很多属性，我们最常用的是 <code>userAgent</code>，该属性可以返回由客户机发送服务器的 <code>user-agent</code> 头部的值。</p>
<h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><p>window对象给我们提供了一个 history对象，与浏览器历史记录进行交互。该对象包含用户（在浏览器窗口中）访问过的URL。</p>
<table>
<thead>
<tr>
<th align="center">history对象方法</th>
<th align="center">返回值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">back()</td>
<td align="center">可以后退功能</td>
</tr>
<tr>
<td align="center">forward()</td>
<td align="center">前进功能</td>
</tr>
<tr>
<td align="center">go(参数)</td>
<td align="center">前进后退功能 参数如果是1前进一个页面如果是-1后退一个页面</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>BOM</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS函数</title>
    <url>/found404.io/2022/06/27/CSS%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="attr"><a href="#attr" class="headerlink" title="attr()"></a>attr()</h1><p><strong>获取元素内属性的值</strong></p>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&quot;前&quot;</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 鼠标移入H1后伪元素content发生改变 */</span></span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 从行内属性获取值 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="built_in">attr</span>(data-text);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">data-text</span>=<span class="string">&quot;后&quot;</span>&gt;</span>鼠标移入<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="calc"><a href="#calc" class="headerlink" title="calc()"></a>calc()</h1><p><strong>css内置计算器</strong></p>
<h1 id="var"><a href="#var" class="headerlink" title="var()"></a>var()</h1><p>首先：CSS 变量可以有全局或局部作用域。</p>
<p>全局变量可以在整个文档中进行访问&#x2F;使用，而局部变量只能在声明它的选择器内部使用。</p>
<p>如需创建具有全局作用域的变量，请在 :root 选择器中声明它。 :root 选择器匹配文档的根元素。</p>
<p>如需创建具有局部作用域的变量，请在将要使用它的选择器中声明它。</p>
<p><a href="https://blog.csdn.net/Serena_tz/article/details/114838650"><strong>🔗🔗原文档🔗🔗</strong></a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">         <span class="selector-pseudo">:root</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attr">--blue</span>: blue;</span></span><br><span class="line"><span class="language-css">            <span class="attr">--red</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">var</span>(--blue);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">var</span>(--red);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>GIT</title>
    <url>/found404.io/2022/06/27/GIT/</url>
    <content><![CDATA[<h1 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git"></a>什么是Git</h1><p>Git是一个开源的分布式版本控制系统，是目前世界上最先进、最流行的版本控制系统。可以快速高效地处理从很小到非常大的项目版本管理。</p>
<p><a href="https://git-scm.com/">git官网</a></p>
<p><strong>特点:项目越大越复杂，协同开发者越多，越能体现出Git的高性能和高可用性!</strong></p>
<span id="more"></span>

<h2 id="Git的特性"><a href="#Git的特性" class="headerlink" title="Git的特性"></a>Git的特性</h2><p>Git之所以快速和高效，主要依赖于它的如下两个特性:</p>
<ul>
<li>直接记录快照，而非差异比较</li>
<li>近乎所有操作都是本地执行</li>
</ul>
<h2 id="Git记录快照"><a href="#Git记录快照" class="headerlink" title="Git记录快照"></a>Git记录快照</h2><p>Git快照是在原有文件版本的基础.上重新生成一份新的文件，类似于备份。为了效率,如果文件没有修改，Git不再重新存储该文件,而是只保留一个链接指向之前存储的文件。</p>
<p><strong>缺点：占用空间资源大</strong>	<em><strong>空间换时间</strong></em></p>
<h2 id="所有操作都是本地执行"><a href="#所有操作都是本地执行" class="headerlink" title="所有操作都是本地执行"></a>所有操作都是本地执行</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655534484451-4c0517e2-4d65-4b59-a4be-19d51a9ce9b0.png" alt="img"></p>
<h1 id="Git中的三个区域"><a href="#Git中的三个区域" class="headerlink" title="Git中的三个区域"></a>Git中的三个区域</h1><p>使用Git管理的项目，拥有三个区域，分别是<strong>工作区</strong>、<strong>暂存区</strong>、<strong>Git 仓库</strong>。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655534910353-c3fc5bf1-796d-4a11-8c14-0e75314464ba.png" alt="img"></p>
<h1 id="Git中的三个状态"><a href="#Git中的三个状态" class="headerlink" title="Git中的三个状态"></a>Git中的三个状态</h1><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655534960656-79a481e4-61a1-4fb7-8fd3-3c1357894a25.png" alt="img"></p>
<ul>
<li>工作区的文件被修改了,但还没有放到暂存区,就是<strong>已修改</strong>状态。</li>
<li>如果文件已修改并放入暂存区，就属于<strong>已暂存</strong>状态。</li>
<li>如果Git仓库中<strong>保存着特定版本</strong>的文件,就属于<strong>已提交</strong>状态。</li>
</ul>
<h1 id="基本的Git工作流程"><a href="#基本的Git工作流程" class="headerlink" title="基本的Git工作流程"></a>基本的Git工作流程</h1><p><strong>WorkingDirectory</strong>	（工作区,相当于开发人员电脑）</p>
<p><strong>StagingArea</strong>	（暂存区）</p>
<p>**.git directory(Repository)**（Git仓库）</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655535118711-22e89a62-12eb-4c50-90f3-d1d0b4c1df5d.png" alt="img"></p>
<p>基本的Git工作流程如下:</p>
<p>①在工作区中修改文件</p>
<p>②将你想要下次提交的更改进行暂存</p>
<p>③提交更新,找到暂存区的文件,将快照永久性存储到Git仓库</p>
<h1 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h1><h2 id="配置Git用户信息"><a href="#配置Git用户信息" class="headerlink" title="配置Git用户信息"></a>配置Git用户信息</h2><p>安装完Git之后，要做的第一件事就是设置自己的用户名和邮件地址。因为通过Git对项目进行版本管理的时候，Git需要使用这些基本信息，来记录是谁对项目进行了操作:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655535398516-456da10e-f08d-4d89-8ae0-8771737d2c9f.png" alt="img"></p>
<p>–golbal选项只需执行一次就可以永久生效</p>
<h2 id="Git的全局配置文件"><a href="#Git的全局配置文件" class="headerlink" title="Git的全局配置文件"></a>Git的全局配置文件</h2><p>通过<strong>git config –global user.name</strong>和<strong>git config –global user.email</strong>配置的用户名和邮箱地址,会被写入到C:&#x2F;Users&#x2F;用户名文件夹&#x2F;.gitconfig文件中。这个文件是Git 的<strong>全局配置文件，配置- -次即可永久生效。</strong></p>
<p>可以使用记事本打开此文件，从而查看自己曾经对Git做了哪些全局性的配置。</p>
<h2 id="检查配置信息"><a href="#检查配置信息" class="headerlink" title="检查配置信息"></a>检查配置信息</h2><p>除了使用记事本查看全局的配置信息之外,还可以运行如下的终端命令,快速的查看Git的全局配置信息:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655535635403-14eac1d4-2f97-41cc-bc07-f457d2df43a3.png" alt="img"></p>
<h1 id="获取帮助信息"><a href="#获取帮助信息" class="headerlink" title="获取帮助信息"></a>获取帮助信息</h1><p>可以使用**git help <verb>**命令,无需联网即可在浏览器中打开帮助手册，例如:</verb></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655535684182-9e2812e8-61e4-4484-8550-e5f1d78b8dd3.png" alt="img"></p>
<p>如果不想查看完整的手册，那么可以用-h选项获得更简明的”help” 输出:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655535742912-3076a012-e2d7-4b6e-bbc0-f816bfa87f20.png" alt="img"></p>
<h1 id="获取Git仓库两种方式"><a href="#获取Git仓库两种方式" class="headerlink" title="获取Git仓库两种方式"></a>获取Git仓库两种方式</h1><p>①将尚未进行版本控制的本地目录转换为Git仓库</p>
<p>②从其它服务器克隆一个已存在的Git仓库</p>
<p>以上两种方式都能够在自己的电脑上得到一一个可用的Git仓库</p>
<h2 id="1-在现有目录中初始化仓库"><a href="#1-在现有目录中初始化仓库" class="headerlink" title="1.在现有目录中初始化仓库"></a>1.在现有目录中初始化仓库</h2><p>如果自己有一个尚未进行版本控制的项目目录，想要用Git来控制它，需要执行如下两个步骤:</p>
<p><strong>①在项目目录中，通过鼠标右键打开”<strong><strong>Git Bash</strong></strong>“</strong></p>
<p><strong>②执行</strong>  <strong>git init</strong>  <strong>命令将当前的目录转化为Git仓库</strong></p>
<p>git init命令会创建一个名为 .git 的隐藏目录,这个.git目录就是当前项目的Git仓库，里面包含了初始的必要</p>
<p>文件，这些文件是Git仓库的必要组成部分。</p>
<h1 id="工作区中文件的4种状态"><a href="#工作区中文件的4种状态" class="headerlink" title="工作区中文件的4种状态"></a>工作区中文件的4种状态</h1><p>工作区中的每一个文件可能有4种状态,这四种状态共分为两大类,如图所示:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655536027484-d2c17c61-7fce-4532-a47d-a2cf89550de5.png" alt="img"></p>
<p>未跟踪	??</p>
<p>已暂存  	A</p>
<p>被修改	M</p>
<p>被修改并且放入暂存	M </p>
<h1 id="Git中对文件的操作-必须先初始化仓库"><a href="#Git中对文件的操作-必须先初始化仓库" class="headerlink" title="Git中对文件的操作  必须先初始化仓库"></a>Git中对文件的操作  <em>必须先初始化仓库</em></h1><h2 id="检查文件状态-git-status"><a href="#检查文件状态-git-status" class="headerlink" title="检查文件状态  git status"></a>检查文件状态  <strong>git status</strong></h2><p>可以使用<strong>git status</strong> 命令查看文件处于什么状态，例如：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655536242631-7e6024cf-3551-46e6-a1af-c197aa7d0427.png" alt="img"></p>
<p>在状态报告中可以看到新建的<strong>index.html</strong>文件出现在<strong>Untracked files</strong> (未跟踪的文件)下面。</p>
<p><strong>以精简的方式显示文件状态</strong></p>
<p>使用git status输出的状态报告很详细，但有些繁琐。如果希望以精简的方式显示文件的状态，可以使用如下两条完全等价的命令，其中-s是–short的简写形式:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655536349500-52f5969f-2a0a-432d-983c-b128289b4b69.png" alt="img"></p>
<h2 id="跟踪新文件-（向暂存区添加文件）-git-add-文件"><a href="#跟踪新文件-（向暂存区添加文件）-git-add-文件" class="headerlink" title="跟踪新文件  （向暂存区添加文件） git add 文件"></a>跟踪新文件  <em>（向暂存区添加文件）</em> <strong>git add 文件</strong></h2><p>使用命令 <strong>git add</strong> 开始跟踪一个文件 所以要跟踪<strong>index.html</strong>文件，运行如下的命令即可</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655536474765-050a37a1-b18d-4eeb-ad43-182702bf06f0.png" alt="img"></p>
<p>此时再运行<strong>git status</strong>命令,会看到index.html文件在Changes to be committed这行的下面，说明已被跟踪，并处于暂存状态:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655536517820-ce82dd36-123e-4949-8082-6c9c42cc0873.png" alt="img"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26760678/1655536538806-8c2c13f3-9b86-4353-b730-9a535f08e209.png" alt="img"></p>
<h2 id="向暂存区中一次性添加多个文件-git-add"><a href="#向暂存区中一次性添加多个文件-git-add" class="headerlink" title="向暂存区中一次性添加多个文件    git add ."></a>向暂存区中一次性添加多个文件    <strong>git add</strong> .</h2><p>如果需要被暂存的文件比较多，可以使用   <strong>git add</strong> .  命令一次性向暂存区提交多个文件</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655537763425-fa5cefe1-3afe-4669-a1de-0c8de68e25dc.png" alt="img"></p>
<p>项目开发常用命令，将新增和修改后的文件放入暂存区</p>
<h2 id="提交更新-git-commit-m-“提示text”"><a href="#提交更新-git-commit-m-“提示text”" class="headerlink" title="提交更新  git commit -m “提示text”"></a>提交更新  <strong>git commit -m “提示text”</strong></h2><p>现在暂存区中有一个<strong>index.html</strong>文件等待被提交到Git仓库中进行保存。可以执行<strong>git commit</strong>命令进行提交，其中 <strong>-m</strong> 选项后面是本次的提交消息，用来对提交的内容做进一步的描述:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655536628213-900af14e-f287-401f-bd5b-487edcd8cb5c.png" alt="img"></p>
<p>提交成功后会显示如下信息：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655536671600-652b2a80-4b04-4d9c-938f-0134cae6c4ec.png" alt="img"></p>
<h2 id="对已提交的文件进行修改后-M标记"><a href="#对已提交的文件进行修改后-M标记" class="headerlink" title="对已提交的文件进行修改后 M标记"></a>对已提交的文件进行修改后 M标记</h2><p>目前，<strong>index.html</strong> 文件已经被Git跟踪,并且工作区和Git仓库中的<strong>index.html</strong>文件内容保持一致。 当我们</p>
<p>修改了工作区中<strong>index.html</strong>的内容之后,再次运行<strong>git status</strong>和<strong>git status -s</strong>命令,会看到如下的内容:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655536867487-488a48d8-014e-4539-8579-5f821b019fa1.png" alt="img"></p>
<p>文件index.html出现在<strong>Changes not staged for commit</strong>这行下面，说明<strong>已跟踪文件的内容发生了变化,</strong></p>
<p><strong>但还没有放到暂存区。</strong></p>
<p><strong>注意：修改过的，没有放入暂存区的文件前面有****红色的M标记</strong></p>
<h2 id="暂存已修改的文件-git-add"><a href="#暂存已修改的文件-git-add" class="headerlink" title="暂存已修改的文件  git add"></a>暂存已修改的文件  <strong>git add</strong></h2><p>目前，工作区中的<strong>index.html</strong>文件已被修改,如果要暂存这次修改,需要再次运行  <strong>git  add</strong>  命令,这个命令</p>
<p>是个多功能的命令，主要有如下3个功效:</p>
<ol>
<li>可以用它开始跟踪新文件</li>
<li>把已跟踪的、且已修改的文件放到暂存区</li>
<li>把有冲突的文件标记为已解决状态</li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655537072502-c6038e2f-1e37-4e23-bc76-8393f9199a64.png" alt="img"></p>
<h2 id="提交已暂存的文件-git-commit-m-“提交消息”"><a href="#提交已暂存的文件-git-commit-m-“提交消息”" class="headerlink" title="提交已暂存的文件 git commit -m “提交消息”"></a>提交已暂存的文件 <strong>git commit -m “提交消息”</strong></h2><p>再次运行 <strong>git commit -m “提交消息”</strong> 命令,即可将暂存区中记录的index.html的快照，提交到Git仓库中进行保存:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655537193259-ae4c4898-310f-42b9-8b05-6b728edbad64.png" alt="img"></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655537207921-7b41145a-0590-4cfc-9d86-6d372bb94316.png" alt="img"></p>
<h2 id="撤销对文件的修改-git-checkout-–-index-html"><a href="#撤销对文件的修改-git-checkout-–-index-html" class="headerlink" title="撤销对文件的修改  git checkout – index.html"></a>撤销对文件的修改  git checkout – index.html</h2><p>撤销对文件的修改指的是:把对工作区中对应文件的修改，还<strong>原成</strong>Git仓库中所保存的版本。</p>
<p>操作的结果:所有的修改会丢失，且无法恢复!   <strong>危险性比较高,请慎重操作!</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655537502602-d29f7b89-de20-4d61-a077-394510ed3d47.png" alt="img"></p>
<h2 id="取消暂存的文件gti-reset-HEAD-要移除的文件名称"><a href="#取消暂存的文件gti-reset-HEAD-要移除的文件名称" class="headerlink" title="取消暂存的文件	gti reset HEAD 要移除的文件名称"></a>取消暂存的文件	gti reset HEAD 要移除的文件名称</h2><p>如果需要从暂存区中移除对应的文件，可以使用如下命令：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655538293353-e0645ac8-e007-4c52-8bd5-b9f2e6f24d1d.png" alt="img"></p>
<h2 id="跳过使用暂存区域"><a href="#跳过使用暂存区域" class="headerlink" title="跳过使用暂存区域"></a>跳过使用暂存区域</h2><p>Git标准的工作流程是工作区→暂存区→Git仓库，但有时候这么做略显繁琐,此时可以跳过暂存区，直接将工作区中的修改提交到Git仓库,这时候Git工作的流程简化为了工作区→Git仓库。</p>
<p>Git提供了一个跳过使用暂存区域的方式，只要在提交的时候， 给git commit加上-a选项，Git 就会自动把</p>
<p>所有已经跟踪过的文件暂存起来一并提交， 从而跳过git add步骤:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655538525145-487fc07b-f18d-4e8e-a042-a268a447b3e6.png" alt="img"></p>
<h1 id="Git仓库移除文件"><a href="#Git仓库移除文件" class="headerlink" title="Git仓库移除文件"></a>Git仓库移除文件</h1><h2 id="1-从Git仓库和工作区中同时移除对应的文件"><a href="#1-从Git仓库和工作区中同时移除对应的文件" class="headerlink" title="1.从Git仓库和工作区中同时移除对应的文件"></a>1.从Git仓库和工作区中同时移除对应的文件</h2><h2 id="2-只从Git仓库中移除指定的文件，但保留工作区中对应的文件"><a href="#2-只从Git仓库中移除指定的文件，但保留工作区中对应的文件" class="headerlink" title="2.只从Git仓库中移除指定的文件，但保留工作区中对应的文件"></a>2.只从Git仓库中移除指定的文件，但保留工作区中对应的文件</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655538736242-5b2f6c78-ed58-49dc-b5df-c33ef3d89d32.png" alt="img"></p>
<h1 id="Git忽略文件"><a href="#Git忽略文件" class="headerlink" title="Git忽略文件"></a>Git忽略文件</h1><p>一般我们总会有些文件无需纳入Git的管理，也不希望它们总出现在未跟踪文件列表。在这种情况下，我们可以创建一一个名为 <strong>.gitignore</strong> 的配置文件,列出要忽略的文件的匹配模式。</p>
<p>文件.gitignore的格式规范如下: .</p>
<p>①以  <strong>#开头</strong>  的是注释</p>
<p>②以  <strong>&#x2F;结尾</strong>  的是目录</p>
<p>③以  <strong>&#x2F;开头</strong>  防止递归</p>
<p>④以  <strong>!开头</strong>  表示取反</p>
<p>⑤可以使用  <strong>glob模式</strong>  进行文件和文件夹的匹配	(glob指简化了的正则表达式)</p>
<p><strong>glob模式</strong>是指简化了的正则表达式：</p>
<p>①<strong>星号*<strong>匹配</strong>零个或多个任意字符</strong></p>
<p>②**[abc]** 匹配<strong>任何- -个列在方括号中的字符</strong>(此案例匹配-个a或匹配-一个b或匹配一个c)</p>
<p>③<strong>问号?<strong>只</strong>匹配-一个任意字符</strong></p>
<p>④在方括号中使用<strong>短划线</strong>分隔两个字符，表示所有在这两个字符范围内的都可以匹配( 比如[0-9]表示匹配</p>
<p>所有0到9的数字)</p>
<p>⑤<em>*两个星号*<em><strong>表示</strong>匹配任意中间目录</em>*(比如a&#x2F;</em>*&#x2F;z可以匹配a&#x2F;z、a&#x2F;b&#x2F;z 或a&#x2F;b&#x2F;C&#x2F;z等)</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655539134717-62f9b9a8-0d07-4695-9d43-e5c6367b220a.png" alt="img"></p>
<h1 id="查看提交历史-git-log"><a href="#查看提交历史-git-log" class="headerlink" title="查看提交历史  git log"></a>查看提交历史  git log</h1><p>如果希望回顾项目的提交历史，可以使用 <strong>git log</strong> 这个简单且有效的命令。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655540439882-5c0019d9-017d-4580-9488-e89d21a4777d.png" alt="img"></p>
<h1 id="回退指定版本"><a href="#回退指定版本" class="headerlink" title="回退指定版本"></a>回退指定版本</h1><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655540509352-742697e3-97db-45dd-986b-ecf6f5f9c910.png" alt="img"></p>
<p><strong>注意：回退到旧版本后不能再使用</strong> <strong>git log –pretty&#x3D;oneline</strong> <strong>查看历史版本</strong></p>
<h1 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h1><p>从主线分支出复线，可以多分支操作项目。类似于平行宇宙，不同分支不会相互影响，完成某个功能后再次合并到主线上。</p>
<h2 id="1-查看分支-git-branch"><a href="#1-查看分支-git-branch" class="headerlink" title="1.查看分支  git branch"></a>1.查看分支  git branch</h2><p><strong>git branch</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655794971836-6b024cbb-625a-4a4a-8013-806aede16780.png" alt="img"></p>
<p>运行结果：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655794998394-960a866f-286f-48d0-8785-bac32fed26db.png" alt="img"></p>
<p><strong>“*“</strong>	代表当前所在分支</p>
<h2 id="2-创建分支-git-branch-分支名"><a href="#2-创建分支-git-branch-分支名" class="headerlink" title="2.创建分支 git branch 分支名"></a>2.创建分支 git branch 分支名</h2><p><strong>git branch 分支名</strong>	<em><strong>在当前分支下创建新的分支，新分支代码与主线代码一致</strong></em></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655795283613-3591bcd4-05ae-4ece-8367-b34ae1f20807.png" alt="img"></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655795312903-e4b3a760-9cb6-4ea0-9a8e-782e780b64a5.png" alt="img"></p>
<p>注意：创建新分支后用户还是处于主分支</p>
<h2 id="3-切换分支-git-checkout-分支名"><a href="#3-切换分支-git-checkout-分支名" class="headerlink" title="3.切换分支 git checkout 分支名"></a>3.切换分支 git checkout 分支名</h2><p><strong>git checkout 分支名</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655795725098-fd973b51-11bb-4a02-ab61-1ac3cc2b8c1d.png" alt="img"></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655795739155-a1a5da02-ccd8-45e1-9e9f-59023346b641.png" alt="img"></p>
<h2 id="4-分支快速创建和切换-git-checkout-b-分支名称"><a href="#4-分支快速创建和切换-git-checkout-b-分支名称" class="headerlink" title="4.分支快速创建和切换 git checkout -b 分支名称"></a>4.分支快速创建和切换 <strong>git checkout -b 分支名称</strong></h2><p><strong>git checkout -b 分支名称</strong> </p>
<p><em>一条命令就可以实现创建和切换分支</em></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655796283829-de628c8b-3ffb-46a9-a41b-4ad6fad49920.png" alt="img"></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655796301800-20be8833-9f84-4c93-a82c-e4f25ee61499.png" alt="img"></p>
<h2 id="5-合并分支-git-merge-分支名"><a href="#5-合并分支-git-merge-分支名" class="headerlink" title="5.合并分支 git merge 分支名"></a>5.合并分支 git merge 分支名</h2><p>功能分支代码开发测试完毕后可以使用如下命令将完成后的代码合并到master主分支上：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655796632441-012816cc-597e-4bcc-8543-4623a25c05e6.png" alt="img"></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655796857424-d7bc8441-26f5-4cdc-9f38-12118a8393c3.png" alt="img"></p>
<p>在分支上进行的操作不会对主分支造成影响，所以切换到主分支后不会看到在复分支上的更改，需要合并之后才可以看见。</p>
<h2 id="6-删除分支-git-branch-d-分支名称"><a href="#6-删除分支-git-branch-d-分支名称" class="headerlink" title="6.删除分支  git branch -d 分支名称"></a>6.删除分支  git branch -d 分支名称</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655797401189-c413a9df-a8ff-442f-ab23-8906389ec3b7.png" alt="img"></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655797408858-262143f2-692c-43e3-8da7-c2a09b6169d8.png" alt="img"></p>
<p>不能在所在的分支上删除分支</p>
<h2 id="7-遇到冲突时合并分支"><a href="#7-遇到冲突时合并分支" class="headerlink" title="7.遇到冲突时合并分支"></a>7.遇到冲突时合并分支</h2><p>两个分支都同时对同一个文件进行了修改，在合并时候会报错。此时就需要打开冲突文件<strong>手动解决冲突</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655798284761-bcef2de9-69d5-407c-b507-486b4cff44f8.png" alt="img"></p>
<h2 id="8-将本地分支推送到远程仓库"><a href="#8-将本地分支推送到远程仓库" class="headerlink" title="8.将本地分支推送到远程仓库"></a>8.将本地分支推送到远程仓库</h2><p>如果是第一次将本地分支推送到远程仓库，需要执行以下命令：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655799013068-80d834d0-0c1a-4aff-b6a7-4dbb05774cdb.png" alt="img"></p>
<p>第一次推送分支需要带-u参数，此后可直接使用 git push 推送代码到远程仓库分支</p>
<h2 id="9-查看远程仓库中所有分支列表"><a href="#9-查看远程仓库中所有分支列表" class="headerlink" title="9.查看远程仓库中所有分支列表"></a>9.查看远程仓库中所有分支列表</h2><p><strong>git remote show 远程仓库名称</strong></p>
<h2 id="10-跟踪分支"><a href="#10-跟踪分支" class="headerlink" title="10.跟踪分支"></a>10.跟踪分支</h2><p>从远程仓库中，把远程分支下载到本地仓库中。需要运行如下命令：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655799401956-a80fc3cf-9069-4a65-bfa7-f18707d98165.png" alt="img"></p>
<h2 id="11-拉取远程仓库的最新代码"><a href="#11-拉取远程仓库的最新代码" class="headerlink" title="11.拉取远程仓库的最新代码"></a>11.拉取远程仓库的最新代码</h2><p>使用 <strong>git pull</strong> 把远程分支最新的代码下载到本地对应的分支中</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655799988876-2a85802d-c4c3-4808-b2a7-a6ff1ff160b8.png" alt="img"></p>
<h2 id="12-删除远程分支"><a href="#12-删除远程分支" class="headerlink" title="12.删除远程分支"></a>12.删除远程分支</h2><p><em>删除远程分支命令</em></p>
<p><strong>git push origin –delete 远程分支名</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655800654249-572fb3ec-b22a-424e-9fb1-8e81db9d1741.png" alt="img"></p>
<h1 id="Gitbub"><a href="#Gitbub" class="headerlink" title="Gitbub"></a>Gitbub</h1><h2 id="1-什么是开源"><a href="#1-什么是开源" class="headerlink" title="1.什么是开源"></a>1.什么是开源</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655541135151-d8670571-d0b9-473a-9cf7-e053671c2ef6.png" alt="img"></p>
<h2 id="2-什么是开源许可协议"><a href="#2-什么是开源许可协议" class="headerlink" title="2.什么是开源许可协议"></a>2.什么是开源许可协议</h2><p><strong>常见的五种开源许可协议</strong></p>
<ol>
<li><p>BSD (Berkeley Software Distribution)</p>
</li>
<li><p>Apache Licence 2.0</p>
</li>
<li><p>GPL ( GNU General Public License)</p>
</li>
<li><ol>
<li>具有传染性的一种开源协议，不允许修改后和衍生的代码做为闭源的商业软件发布和销售</li>
<li>使用 GPL的最著名的软件项目是: Linux</li>
</ol>
</li>
<li><p>LGPL (GNU Lesser General Public License)</p>
</li>
<li><p>MIT (Massachusetts Institute of Technology, MIT)</p>
</li>
<li><ol>
<li>是目前限制最少的协议，唯- -的条件:在修改后的代码或者发行包中，必须包含原作者的许可信息</li>
<li>使用 MIT的软件项目有: jquery. Node.js</li>
</ol>
</li>
</ol>
<h2 id="3-开源项目托管平台"><a href="#3-开源项目托管平台" class="headerlink" title="3.开源项目托管平台"></a>3.开源项目托管平台</h2><p>专门用于免费存放开源项目源代码的网站，叫做开源项目托管平台。目前世界上比较出名的开源项目托管平台主要有以下3个:</p>
<ul>
<li>Github (全球最牛的开源项目托管平台，没有之一 )</li>
<li>Gitlab (对代码私有性支持较好，因此企业用户较多)</li>
<li>Gitee (又叫做码云,是国产的开源项目托管平台。访问速度快、纯中文界面、使用友好)</li>
</ul>
<p>注意:以上3个开源项目托管平台,只能托管以Git管理的项目源代码,因此，它们的名字都以Git开头。</p>
<h2 id="4-远程仓库的两种访问方式"><a href="#4-远程仓库的两种访问方式" class="headerlink" title="4.远程仓库的两种访问方式"></a>4.远程仓库的两种访问方式</h2><p>Github.上的远程仓库，有两种访问方式，分别是HTTPS和SSH。它们的区别是:</p>
<p>①HTTPS:零配置;但是每次访问仓库时，需要重复输入Github的账号和密码才能访问成功</p>
<p>②SSH: 需要进行额外的配置;但是配置成功后，每次访问仓库时,不需重复输入Github的账号和密码</p>
<p>注意:在实际开发中，推荐使用SSH的方式访问远程仓库。</p>
<h2 id="5-关于Git上传库"><a href="#5-关于Git上传库" class="headerlink" title="5.关于Git上传库"></a>5.关于Git上传库</h2><h3 id="HTTPS上传："><a href="#HTTPS上传：" class="headerlink" title="HTTPS上传："></a>HTTPS上传：</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655549171898-6d827579-7eac-4f0b-90a9-30e09cd76d97.png" alt="img"></p>
<ol>
<li>在Github官网创建新的库之后首选HTTPS上传方式</li>
<li>在你要上传的库中打开 Git Bash控制台</li>
<li>依次输入官方提示的命令</li>
<li>在弹出框中输入你的密钥</li>
</ol>
<p><strong>注意：要先在官网绑定令牌</strong></p>
<p>绑定令牌的方式：</p>
<p>1.找到”C:\Users\无敌暴龙战士.ssh”路径下两个文件  id_rsa.pub  后缀的为私人令牌</p>
<p>2.在github官网个人设置中找到绑定令牌</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655549534866-d9084c9c-e9fc-4261-a379-96b7c6bdec34.png" alt="img"></p>
<p>3.选择new SSH key 添加绑定令牌</p>
<h2 id="6-上传修改后的仓库"><a href="#6-上传修改后的仓库" class="headerlink" title="6.上传修改后的仓库"></a>6.上传修改后的仓库</h2><p>如果想要上传本地被修改后的仓库需要将修改后的文件全部提交并且使用 <strong>git push</strong> 命令上传，同时也要注意，在弹出框输入<strong>密钥</strong><em>(并非令牌)</em></p>
<p>关于密钥的生成：</p>
<ol>
<li><p>个人设置中的Developer settings</p>
</li>
<li><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655554230182-4c6d1140-8cfb-40e4-af72-5456c597a6c9.png" alt="img"></p>
</li>
<li><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655554297252-5680c8ab-4f67-42e7-9e03-3d2b7480e07c.png" alt="img"></p>
</li>
</ol>
<h2 id="7-克隆已上传的库"><a href="#7-克隆已上传的库" class="headerlink" title="7.克隆已上传的库"></a>7.克隆已上传的库</h2><p>使用 <strong>git clone 远程库地址</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655737899273-d316d6df-6e0d-4a56-b5c6-abaadface510.png" alt="img"></p>
<h1 id="Git-FLS"><a href="#Git-FLS" class="headerlink" title="Git FLS"></a>Git FLS</h1><p><a href="https://blog.csdn.net/wq_0708/article/details/121611239"><strong>##Git flsBlog##</strong></a></p>
<h1 id="多库共存"><a href="#多库共存" class="headerlink" title="多库共存"></a>多库共存</h1><p>要想实现单个库连接多个平台可以使用多库连接的方式，比如当更新一个项目后想要同时上传GitHub和Gitee就可以避免繁琐的操作，同时绑定不同的SSH地址。在push或者pull的时候就可以同时上传&#x2F;获取</p>
<p>原帖子：<a href="https://blog.csdn.net/s_156/article/details/120975674"><strong>##git实现多库共存##</strong></a></p>
<h2 id="方法-1：每次push-x2F-pull时需分开操作"><a href="#方法-1：每次push-x2F-pull时需分开操作" class="headerlink" title="方法 1：每次push&#x2F;pull时需分开操作"></a>方法 1：每次push&#x2F;pull时需分开操作</h2><p>首先，指令 <strong>git remote -v</strong> 查看本地仓库所关联的远程仓库：</p>
<p><strong>git remote rm origin</strong> 删除远程库</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655706799778-d145bcc5-bc99-40e0-ae97-e84614d42f88.png" alt="img"></p>
<p>然后，用 <strong>git remote add (name)</strong> 添加一个远程仓库，其中name可以任意指定（对应上面的origin部分），比如：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655707455484-be8d2b92-9dcf-45e7-a522-ca12eb07b040.png" alt="img"></p>
<p>再次查看本地仓库所关联的远程仓库，可以发现成功关联了两个远程仓库：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655707507827-f921d99b-70b8-4b83-bf0f-18f51750a347.png" alt="img"></p>
<p>此后，若需进行<strong>push</strong>操作，则需要指定目标仓库，<strong>git push</strong> ，对这两个远程仓库分别操作：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655707541452-46421b8e-085d-4d73-a083-66ffbf3994c7.png" alt="img"></p>
<p>同理，<strong>pull</strong>操作也需要指定从哪个远程仓库拉取，<strong>git pull</strong> ，从这两个仓库中选择其一：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655707568939-7274d046-eabb-44a9-8c70-65b6b32c679d.png" alt="img"></p>
<h2 id="方法-2：每次push-x2F-pull时可以同时操作"><a href="#方法-2：每次push-x2F-pull时可以同时操作" class="headerlink" title="方法 2：每次push&#x2F;pull时可以同时操作"></a>方法 2：每次push&#x2F;pull时可以同时操作</h2><p>首先，指令 <strong>git remote -v</strong> 查看本地仓库所关联的远程仓库：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655706799778-d145bcc5-bc99-40e0-ae97-e84614d42f88.png" alt="img"></p>
<p>然后，不额外添加远程仓库，而是给现有的远程仓库添加额外的 URL。使用 <strong>git remote set-url -add</strong> ，已有的名为<strong>name</strong>的远程仓库添加一个远程地址，比如：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655707655729-c692b8da-a686-4e3b-ae63-f552f6457e45.png" alt="img"></p>
<p>再次查看所关联的远程仓库：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655707688970-e1d0cd08-1915-4359-8d8d-dafa3e338850.png" alt="img"></p>
<p>可以看到，我们并没有如方法 1 一般增加远程仓库的数目，而是给一个远程仓库赋予了多个地址（或者准确地说，多个用于push的地址）。</p>
<p>因此，这样设置后的push 和pull操作与最初的操作完全一致，不需要进行调整。</p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql数据库</title>
    <url>/found404.io/2022/07/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h1 id="Mysql基本概念"><a href="#Mysql基本概念" class="headerlink" title="Mysql基本概念"></a>Mysql基本概念</h1><h2 id="1-什么是数据库-🤔"><a href="#1-什么是数据库-🤔" class="headerlink" title="1.什么是数据库 🤔"></a>1.什么是数据库 🤔</h2><p>数据库(database)是用来组织。存储和营理数据的仓库。<br>当今世界是一个充满着数据的互联网世界，充斥着大量的数据。数据的来源有很多，比如出行记录、消费记录、浏览的网页、发送的消息等等.除了文本类型的数据，图像。音乐。声音都是数据。<br>为了方便管理互联网世界中的数据，就有了数据库管理系统的概念(简称:数据库) .用户可以对数据库中的数据进行新增、查询、更新、删除等操作。</p>
<span id="more"></span>

<h2 id="2-常见的数据库以及分类"><a href="#2-常见的数据库以及分类" class="headerlink" title="2.常见的数据库以及分类"></a>2.常见的数据库以及分类</h2><p>市面上最常见的数据库：</p>
<ul>
<li>MySQL数据库(目前使用最广泛流行度最高的开源免费数据库; Community(社区版免费) + Enterprise(企业版))</li>
<li>Oracle数据库(收费)</li>
<li>SQL Server数据库(收费)</li>
<li>Mongodb数据库(Community + Enterprise)</li>
</ul>
<p>其中，MySQL. Oracle. SQL Server 属于传统型数据库(又叫做:关系型数据库或SQL数据库)，这三者的设计理念相同，用法比较类似。</p>
<p>而Mongodb属于新型数据库(又叫做:非关系型数据库或NoSQL数据库)，它在一 定程度 上弥补了传统型数据库的缺陷。</p>
<h2 id="3-传统型数据库的数据阻止结构"><a href="#3-传统型数据库的数据阻止结构" class="headerlink" title="3.传统型数据库的数据阻止结构"></a>3.传统型数据库的数据阻止结构</h2><h3 id="1-Excel的数据组织结构"><a href="#1-Excel的数据组织结构" class="headerlink" title="1.Excel的数据组织结构"></a>1.Excel的数据组织结构</h3><p>每个Excel中,数据的组织结构分别为<strong>工作簿、工作表、数据行、列</strong>这4大部分组成。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220712230648045.png" alt="image-20220712230648045"></p>
<ol>
<li>整个Excel叫做工作簿</li>
<li>users和books是工作表</li>
<li>users工作表中有3行数据</li>
<li>每行数据由6列信息组成</li>
<li>每列信息都有对应的数据类型</li>
</ol>
<h3 id="2-传统型数据库的数据组织结构"><a href="#2-传统型数据库的数据组织结构" class="headerlink" title="2.传统型数据库的数据组织结构"></a>2.传统型数据库的数据组织结构</h3><p>在传统型数据库中，数据的组织结构分为**数据库(database)、数据表(table). 数据行(row)、 字段(field)**这 4大部分组成。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220712230855197.png" alt="image-20220712230855197"></p>
<ol>
<li>数据库类似于Excel的工作簿</li>
<li>数据表类似于Excel的工作表</li>
<li>数据行类似于 Excel的每一行数据</li>
<li>字段类似于Excel的列</li>
<li>每个字段都有对应的数据类型</li>
</ol>
<h3 id="3-实际开发中库、表、行、字段的关系"><a href="#3-实际开发中库、表、行、字段的关系" class="headerlink" title="3.实际开发中库、表、行、字段的关系"></a>3.实际开发中库、表、行、字段的关系</h3><ol>
<li>在实际项目开发中，-般情况下，每个项目都对应独立的数据库。</li>
<li>不同的数据，要存储到数据库的不同表中,例如:用户数据存储到users表中，图书数据存储到books表中。</li>
<li>每个表中具体存储哪些信息，由字段来决定，例如:我们可以为users表设计id、username、 password 这3个字段。</li>
<li>表中的行，代表每一条具体的数据。</li>
</ol>
<h1 id="安装并配置MySQL"><a href="#安装并配置MySQL" class="headerlink" title="安装并配置MySQL"></a>安装并配置MySQL</h1><h2 id="了解需要安装哪些MySQL相关的软件"><a href="#了解需要安装哪些MySQL相关的软件" class="headerlink" title="了解需要安装哪些MySQL相关的软件"></a>了解需要安装哪些MySQL相关的软件</h2><p>对于开发人员来说，只需要安装MySQL Server和MySQL Workbench这两个软件，就能满足开发的需要了。</p>
<ul>
<li>MySQL Server:专门用来提供数据存储和服务的软件。</li>
<li>MySQL Workbench:可视化的MySQL管理工具，通过它，可以方便的操作存储在MySQL Server中的数据。</li>
</ul>
<h2 id="MySQL在Windows环境下的安装"><a href="#MySQL在Windows环境下的安装" class="headerlink" title="MySQL在Windows环境下的安装"></a>MySQL在Windows环境下的安装</h2><p>跳过</p>
<h1 id="使用MySQL-Workbench管理数据库"><a href="#使用MySQL-Workbench管理数据库" class="headerlink" title="使用MySQL Workbench管理数据库"></a>使用MySQL Workbench管理数据库</h1><h2 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713192404034.png" alt="image-20220713192404034"></p>
<h2 id="2-创建数据表"><a href="#2-创建数据表" class="headerlink" title="2.创建数据表"></a>2.创建数据表</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713192913904.png" alt="image-20220713192913904"></p>
<p>DataType数据类型：</p>
<ol>
<li><strong>int</strong>整数</li>
<li>**varchar(len”长度“)**字符串</li>
<li>**tinyint(1)**布尔值</li>
</ol>
<p>字段的特殊标识：</p>
<ol>
<li>**PK (Primary Key)**主键、唯一标识</li>
<li><strong>NN (Not Null)</strong> 值不允许为空</li>
<li><strong>UQ (Unique)</strong> 值唯一</li>
<li><strong>Al (Auto Increment)</strong> 值自动增长</li>
<li><strong>Default&#x2F;Expression</strong>默认值</li>
</ol>
<h2 id="3-向表中写入数据"><a href="#3-向表中写入数据" class="headerlink" title="3.向表中写入数据"></a>3.向表中写入数据</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713194136724.png" alt="image-20220713194136724"></p>
<h1 id="什么是SQL"><a href="#什么是SQL" class="headerlink" title="什么是SQL"></a>什么是SQL</h1><p>SQL (英文全称: Structured Query Language)是结构化查询语言，专门用来访问和处理数据库的编程语言。能够让我们以编程的形式，操作数据库里面的数据。</p>
<blockquote>
<p>三个关键点:</p>
<ol>
<li>SQL是一门数据库编程语言</li>
<li>使用SQL语言编写出来的代码，叫做SQL语句</li>
<li>SQL语言只能在关系型数据库中使用(例如MySQL、Oracle、 SQL Server)。非关系型数据库(例如Mongodb)不支持SQL语言</li>
</ol>
</blockquote>
<h2 id="SQL能做什么"><a href="#SQL能做什么" class="headerlink" title="SQL能做什么"></a>SQL能做什么</h2><ol>
<li>从数据库中查询数据</li>
<li>向数据库中插入新的数据</li>
<li>更新数据库中的数据</li>
<li>从数据库删除数据</li>
<li>可以创建新数据库</li>
<li>可在数据库中创建新表</li>
<li>可在数据库中创建存储过程、 视图</li>
<li>ete…</li>
</ol>
<h2 id="SQL的学习目标"><a href="#SQL的学习目标" class="headerlink" title="SQL的学习目标"></a>SQL的学习目标</h2><p>重点掌握如何使用SQL从数据表中:</p>
<blockquote>
<p>查询数据(select) 、 插入数据(insert into)、更新数据(update). 删除数据 (delete)</p>
</blockquote>
<p>额外需要掌握的4种SQL语法:</p>
<blockquote>
<p>where条件、and和or运算符、orderby排序、count(*) 函数</p>
</blockquote>
<h2 id="SQL语法"><a href="#SQL语法" class="headerlink" title="SQL语法"></a>SQL语法</h2><h3 id="SQL的SELECT语句"><a href="#SQL的SELECT语句" class="headerlink" title="SQL的SELECT语句"></a>SQL的SELECT语句</h3><h4 id="1-语法"><a href="#1-语法" class="headerlink" title="1.语法"></a>1.语法</h4><p>SELECT语句用于从表中查询数据。执行的结果被存储在一个结果表中(称为结果集) 语法格式如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713200549136.png" alt="image-20220713200549136"></p>
<p>注意：SQL语句中的关键字对大小写不敏感。SELECT 等效于select, FROM 等效于from.</p>
<h4 id="2-SELECT-示例"><a href="#2-SELECT-示例" class="headerlink" title="2.SELECT*示例"></a>2.SELECT*示例</h4><p>我们希望从users表中选取所有列，可以使用符号*取代列的名称，示例如下：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713201000975.png" alt="image-20220713201000975"></p>
<h4 id="3-SELECT列名称示例"><a href="#3-SELECT列名称示例" class="headerlink" title="3.SELECT列名称示例"></a>3.SELECT列名称示例</h4><p>如需获取名为”username”和”password”的列的内容(从名为”users”的数据库表)，请使用下面的SELECT语句: </p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713201821882.png" alt="image-20220713201821882"></p>
<h3 id="SQL的INSERT-INTO语句"><a href="#SQL的INSERT-INTO语句" class="headerlink" title="SQL的INSERT INTO语句"></a>SQL的INSERT INTO语句</h3><h4 id="1-语句"><a href="#1-语句" class="headerlink" title="1.语句"></a>1.语句</h4><p>INSERT INTO语句用于向数据表中插入新的数据行，语法格式如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713202552024.png" alt="image-20220713202552024"></p>
<h4 id="2-INSERT-INTO示例"><a href="#2-INSERT-INTO示例" class="headerlink" title="2.INSERT INTO示例"></a>2.INSERT INTO示例</h4><p>向users表中，插入一条username为tony stark, password 为098123的用户数据，示例如下: .</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713202637208.png" alt="image-20220713202637208"></p>
<h3 id="SQL的UPDATE语句"><a href="#SQL的UPDATE语句" class="headerlink" title="SQL的UPDATE语句"></a>SQL的UPDATE语句</h3><h4 id="1-语句-1"><a href="#1-语句-1" class="headerlink" title="1.语句"></a>1.语句</h4><p>Update语句用于修改表中的数据。语法格式如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713203137364.png" alt="image-20220713203137364"></p>
<h4 id="2-UPDATE示例-更新某一行中的一个列"><a href="#2-UPDATE示例-更新某一行中的一个列" class="headerlink" title="2.UPDATE示例-更新某一行中的一个列"></a>2.UPDATE示例-更新某一行中的一个列</h4><p>把users表中id为7的用户密码，更新为888888.示例如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713203310275.png" alt="image-20220713203310275"></p>
<h4 id="3-UPDATE示例-更新某一行中的若干列"><a href="#3-UPDATE示例-更新某一行中的若干列" class="headerlink" title="3.UPDATE示例-更新某一行中的若干列"></a>3.UPDATE示例-更新某一行中的若干列</h4><p>把users表中id为2的用户密码和用户状态，分别更新为admin123和1.示例如下: .</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713203839910.png" alt="image-20220713203839910"></p>
<h3 id="SQL的DELETE语句"><a href="#SQL的DELETE语句" class="headerlink" title="SQL的DELETE语句"></a>SQL的DELETE语句</h3><h4 id="1-语法-1"><a href="#1-语法-1" class="headerlink" title="1.语法"></a>1.语法</h4><p>DELETE语句用于删除表中的行。语法格式如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713204215255.png" alt="image-20220713204215255"></p>
<h4 id="2-DELETE示例"><a href="#2-DELETE示例" class="headerlink" title="2.DELETE示例"></a>2.DELETE示例</h4><p>从users表中，删除id为4的用户，示例如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713204302189.png" alt="image-20220713204302189"></p>
<p><strong>注意：一定要加where</strong></p>
<h3 id="SQL的WHERE子句"><a href="#SQL的WHERE子句" class="headerlink" title="SQL的WHERE子句"></a>SQL的WHERE子句</h3><h4 id="1-语法-2"><a href="#1-语法-2" class="headerlink" title="1.语法"></a>1.语法</h4><p>WHERE子句用于限定选择的标准。在SELECT、UPDATE、DELETE 语句中，皆可使用WHERE子句来限定选择的标准。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713204639112.png" alt="image-20220713204639112"></p>
<h4 id="2-可在where子句中使用的运算符"><a href="#2-可在where子句中使用的运算符" class="headerlink" title="2.可在where子句中使用的运算符"></a>2.可在where子句中使用的运算符</h4><p>下面的运算符可在where子句中使用，用来限定选择的标准：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713204859441.png" alt="image-20220713204859441"></p>
<p>注意：在某些版本sql中，操作符&lt;&gt;可以写为!&#x3D;</p>
<h4 id="3-WHERE子句示例"><a href="#3-WHERE子句示例" class="headerlink" title="3.WHERE子句示例"></a>3.WHERE子句示例</h4><p>可以通过WHERE子句来限定SELECT的查询条件:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713205003534.png" alt="image-20220713205003534"></p>
<h3 id="SQL的AND和OR运算符"><a href="#SQL的AND和OR运算符" class="headerlink" title="SQL的AND和OR运算符"></a>SQL的AND和OR运算符</h3><h4 id="1-语法-3"><a href="#1-语法-3" class="headerlink" title="1.语法"></a>1.语法</h4><p>AND和OR可在WHERE子语句中把两个或多个条件结合起来。</p>
<ul>
<li>AND表示必须同时满足多个条件,相当于JavaScript中的&amp;&amp;运算符,例如if(a!&#x3D;&#x3D; 10&amp;&amp;a!&#x3D;&#x3D; 20)</li>
<li>OR表示只要满足任意一个条件即可. 相当于JavaScript中的II运算符,例如if(a!&#x3D;&#x3D; 10||a!&#x3D;&#x3D; 20)</li>
</ul>
<h4 id="2-AND运算符示例"><a href="#2-AND运算符示例" class="headerlink" title="2.AND运算符示例"></a>2.AND运算符示例</h4><p>使用AND来显示所有status为0,并且id小于3的用户:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713205734070.png" alt="image-20220713205734070"></p>
<h4 id="3-OR运算符示例"><a href="#3-OR运算符示例" class="headerlink" title="3.OR运算符示例"></a>3.OR运算符示例</h4><p>使用OR来显示所有status为1,或者username为zs的用户:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713205927224.png" alt="image-20220713205927224"></p>
<h3 id="SQL的ORDER-BY子句"><a href="#SQL的ORDER-BY子句" class="headerlink" title="SQL的ORDER BY子句"></a>SQL的ORDER BY子句</h3><h4 id="1-语法-4"><a href="#1-语法-4" class="headerlink" title="1.语法"></a>1.语法</h4><ul>
<li>ORDER BY语句用于根据指定的列对结果集进行排序。</li>
<li>ORDER BY语句默认按照升序对记录进行排序。</li>
<li>如果您希望按照降序对记录进行排序，可以使用ASC（可省略）关键字。</li>
<li>如果您希望按照降序对记录进行排序，可以使用DESC关键字。</li>
</ul>
<h4 id="2-OPDER-BY-子句-升序排序"><a href="#2-OPDER-BY-子句-升序排序" class="headerlink" title="2.OPDER BY 子句-升序排序"></a>2.OPDER BY 子句-升序排序</h4><p>对users表中的数据，按照status字段进行升序排序，示例如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713210340012.png" alt="image-20220713210340012"></p>
<h4 id="3-ORDER-BY-子句-降序排序"><a href="#3-ORDER-BY-子句-降序排序" class="headerlink" title="3.ORDER BY 子句-降序排序"></a>3.ORDER BY 子句-降序排序</h4><p>对users表中的数据，按照id字段进行降序排序，示例如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713210729998.png" alt="image-20220713210729998"></p>
<h4 id="4-ORDER-BY子句-多重排序"><a href="#4-ORDER-BY子句-多重排序" class="headerlink" title="4.ORDER BY子句-多重排序"></a>4.ORDER BY子句-多重排序</h4><p>对users表中的数据，先按照status字段进行降序排序，再按照username的字母顺序，进行升序排序,示例如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713211027356.png" alt="image-20220713211027356"></p>
<h3 id="SQL的COUNT-函数"><a href="#SQL的COUNT-函数" class="headerlink" title="SQL的COUNT(*)函数"></a>SQL的COUNT(*)函数</h3><h4 id="1-语法-5"><a href="#1-语法-5" class="headerlink" title="1.语法"></a>1.语法</h4><p>COUNT()函数用于返回查询结果的总数据条数，语法格式如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713211522705.png" alt="image-20220713211522705"></p>
<h4 id="2-COUNT-实例"><a href="#2-COUNT-实例" class="headerlink" title="2.COUNT(*)实例"></a>2.COUNT(*)实例</h4><p>查询users表中status为0的总数据条数：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713211705196.png" alt="image-20220713211705196"></p>
<h4 id="2-使用AS为列设置别名"><a href="#2-使用AS为列设置别名" class="headerlink" title="2.使用AS为列设置别名"></a>2.使用AS为列设置别名</h4><p>如果希望给查询出来的列名称设置别名，可以使用AS关键字,示例如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713211857686.png" alt="image-20220713211857686"></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713212153424.png" alt="image-20220713212153424"></p>
<h1 id="在项目中操作数据库步骤"><a href="#在项目中操作数据库步骤" class="headerlink" title="在项目中操作数据库步骤"></a>在项目中操作数据库步骤</h1><h2 id="在项目中操作mySQL的步骤"><a href="#在项目中操作mySQL的步骤" class="headerlink" title="在项目中操作mySQL的步骤"></a>在项目中操作mySQL的步骤</h2><ol>
<li>安装操作MySQL数据库的第三方模块(mysql)</li>
<li>通过mysql模块连接到MySQL数据库</li>
<li>通过mysql模块执行SQL语句</li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713212735747.png" alt="image-20220713212735747"></p>
<h2 id="安装与配置musql模块"><a href="#安装与配置musql模块" class="headerlink" title="安装与配置musql模块"></a>安装与配置musql模块</h2><h3 id="1-安装mysql模块"><a href="#1-安装mysql模块" class="headerlink" title="1.安装mysql模块"></a>1.安装mysql模块</h3><p>mysql模块是托管于npm上的第三方模块。它提供了在Node.js项目中连接和操作MySQL数据库的能力。</p>
<p>想要在项目中使用它，需要先运行如下命令,将mysql安装为项目的依赖包:</p>
<p><code>npm install mysql</code></p>
<h3 id="2-配置mysql模块"><a href="#2-配置mysql模块" class="headerlink" title="2.配置mysql模块"></a>2.配置mysql模块</h3><p>在使用mysq|模块操作MySQL数据库之前，必须先对mysql模块进行必要的配置，主要的配置步骤如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713213356159.png" alt="image-20220713213356159"></p>
<h3 id="3-测试mysql模块能否正常工作"><a href="#3-测试mysql模块能否正常工作" class="headerlink" title="3.测试mysql模块能否正常工作"></a>3.测试mysql模块能否正常工作</h3><p>调用db.query()函数，指定要执行的SQL语句，通过回调函数拿到执行的结果：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713214251680.png" alt="image-20220713214251680"></p>
<blockquote>
<p>‘select 1’ 测试mysql这个模块能否正常工作</p>
</blockquote>
<h2 id="使用mysql模块操作mysql数据库"><a href="#使用mysql模块操作mysql数据库" class="headerlink" title="使用mysql模块操作mysql数据库"></a>使用mysql模块操作mysql数据库</h2><h3 id="1-查询数据"><a href="#1-查询数据" class="headerlink" title="1.查询数据"></a>1.查询数据</h3><p>查询users表中所有的数据:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713215003242.png" alt="image-20220713215003242"></p>
<blockquote>
<p>注意：如果执行的是<strong>select</strong>查询语句，则执行的结果是<strong>数组</strong></p>
</blockquote>
<h3 id="2-插入数据"><a href="#2-插入数据" class="headerlink" title="2.插入数据"></a>2.插入数据</h3><p>向users表中新增数据，其中username为Spider-Man, password 为pcc321.示例代码如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713215445821.png" alt="image-20220713215445821"></p>
<blockquote>
<p>?符号可以进行数据的占位</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向users表中新增一条数据，其中username的值为Spider-Man，password的值为pcc123</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;Spider-Man&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;pcc123&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 定义待执行的SQL语句</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;insert into users (usernams,password) values (?,?)&#x27;</span>;</span><br><span class="line"></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, [user.<span class="property">username</span>, user.<span class="property">password</span>], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 执行sql语句失败</span></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 执行成功</span></span><br><span class="line">    <span class="comment">// 注意：如果执行的是insert into插入语句，则results是一个对象</span></span><br><span class="line">    <span class="comment">// 可以通过affectedRows属性，来判断是否插入数据成功</span></span><br><span class="line">    <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;插入数据成功！&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>注意：如果执行的是insert into插入语句，则results是一个对象，可以通过affectedRows属性，来判断是否插入数据成功</li>
<li>注意：数据的id具有唯一性，所以添加的数据可能不是按照正确顺序添加，使用过某一id的    数据就算被删除其id也不能被替代</li>
</ol>
</blockquote>
<h3 id="3-插入数据的便捷方式"><a href="#3-插入数据的便捷方式" class="headerlink" title="3.插入数据的便捷方式"></a>3.插入数据的便捷方式</h3><p>向表中新增数据时，如果数据对象的每个属性和数据表的字段一一对应， 则可以通过如下方式快速插入数据:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713221320032.png" alt="image-20220713221320032"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 演示插入数据的便捷方式</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    <span class="attr">usernams</span>: <span class="string">&#x27;Spider-man2&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;pcc456&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 定义待执行的SQL语句</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;insert into users set ?&#x27;</span>;</span><br><span class="line"><span class="comment">// 执行SQL语句</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, user, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;插入数据成功！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="4-更新数据"><a href="#4-更新数据" class="headerlink" title="4.更新数据"></a>4.更新数据</h3><p>可以通过以下方法，更新表中的数据：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713222055845.png" alt="image-20220713222055845"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.要更新的数据对象</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">usernams</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;000&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 2.定义SQL语句</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;update users set usernams=?,password=? where id=?&#x27;</span>;</span><br><span class="line"><span class="comment">// 3.执行sql语句</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, [user.<span class="property">usernams</span>, user.<span class="property">password</span>, user.<span class="property">id</span>], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更新数据成功！&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：执行了update语句后，执行的结果，也是一个对象，可以通过affectedRows判断是否更新成功</p>
</blockquote>
<h3 id="5-更新数据的便捷方式"><a href="#5-更新数据的便捷方式" class="headerlink" title="5.更新数据的便捷方式"></a>5.更新数据的便捷方式</h3><p>更新表数据时，如果数据对象的每个属性和数据表的字段一-对应， 则可以通过如下方式快速更新表数据:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713223115964.png" alt="image-20220713223115964"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 演示更新数据的便捷方式</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">usernams</span>: <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;000&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 定义SQL语句</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;update users set ? where id=?&#x27;</span>;</span><br><span class="line"><span class="comment">// 执行sql语句</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, [user, user.<span class="property">id</span>], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更新数据成功！&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="6-删除数据"><a href="#6-删除数据" class="headerlink" title="6.删除数据"></a>6.删除数据</h3><p>在删除数据时，推荐根据id这样的唯一标识，来删除对应的数据。示例如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713223644939.png" alt="image-20220713223644939"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除id为5的用户</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;delete from users where id=?&#x27;</span>;</span><br><span class="line"></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, <span class="number">5</span>, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除数据成功！&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="7-标记删除"><a href="#7-标记删除" class="headerlink" title="7.标记删除"></a>7.标记删除</h3><p>使用DELETE语句，会把真正的把数据从表中删除掉。为了保险起见，推荐使用标记删除的形式，来模拟删除的动作。</p>
<p>所谓的标记删除，就是在表中设置类似于status这样的状态字段，来标记当前这条数据是否被删除。<br>当用户执行了删除的动作时，我们并没有执行DELETE语句把数据删除掉，而是执行了UPDATE语句,将这条数据对应的status字段标记为删除即可。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713224853028.png" alt="image-20220713224853028"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标记删除</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;update users set status=? where id=?&#x27;</span>;</span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, [<span class="number">1</span>, <span class="number">6</span>], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;标记数据成功！&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="8-获取指定数量的数据"><a href="#8-获取指定数量的数据" class="headerlink" title="8.获取指定数量的数据"></a>8.获取指定数量的数据</h3><blockquote>
<p>SELECT * FROM 表名 LIMIT 0,30;</p>
<ul>
<li>获取第一个到第30个</li>
</ul>
<p>SELECT * FROM 表名 LIMIT 30,30;</p>
<ul>
<li>获取第31个到第60个</li>
</ul>
</blockquote>
<h3 id="9-关键词搜索"><a href="#9-关键词搜索" class="headerlink" title="9.关键词搜索"></a>9.关键词搜索</h3><blockquote>
<p>SELECT * FROM 表名 WHERE 表头 LIKE “%关键词%”;</p>
</blockquote>
<h3 id="10-多表查询相同参数"><a href="#10-多表查询相同参数" class="headerlink" title="10.多表查询相同参数"></a>10.多表查询相同参数</h3><blockquote>
<p>SELECT *<br>FROM  shopcar,goods<br>WHERE shopcar.goodId &#x3D; goods.id AND shopcar.username&#x3D;123456;</p>
<p>SELECT *<br>FROM  表名1,表名2<br>WHERE 表名1.表头 &#x3D; 表名2.表头 AND 表名1.表头&#x3D;参数;</p>
</blockquote>
<p>适用于你这个表中对应的id和另一个表中的数据对应，但是你又获取不到他们相同的所有数据，可以使用这个sql语句获取，而且还将其数据合并</p>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p><strong>results</strong>返回的是一个数组，要加上**results[0]**就可以获取到这个数组上的任意属性</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM/BOM</title>
    <url>/found404.io/2022/06/28/DOM-BOM/</url>
    <content><![CDATA[<h1 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h1><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654481169296-a0d9f0e5-2ada-4ab7-ad58-2d34e893cd58.png" alt="img"></p>
<span id="more"></span>

<p>DOM最根本的对象<strong>document</strong> (实际上是<strong>window . document</strong>)， 表示文档对象</p>
<p>每个载入浏览器的HTML文档都会称为document对象，把文档中每个标签都解析为对象</p>
<p>“document对象可以从脚本中对HTML页面中所有的元素进行访问”</p>
<h2 id="1-getElementById-x2F-getElementsByTagName"><a href="#1-getElementById-x2F-getElementsByTagName" class="headerlink" title="1.getElementById( ) &#x2F; getElementsByTagName( )"></a>1.getElementById( ) &#x2F; getElementsByTagName( )</h2><h3 id="getElementById-通过-id-获取节点"><a href="#getElementById-通过-id-获取节点" class="headerlink" title="getElementById( )   通过 id 获取节点"></a>getElementById( )   <em>通过</em> <em><strong>id</strong></em> <em>获取节点</em></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span>&gt;</span>2019-9-9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.因为文档页面从上往下加载，所以script写到标签下面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.get 获得 element 元素 by 通过 驼峰命名法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.参数 id大小写敏感的字符串</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4.返回的是一个元素对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> time = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;time&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(time);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> time);<span class="comment">//Object</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 5.console.dir 打印返回的元素对象 更好的查看里面的属性和方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">dir</span>(time);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="getElementsByTagName"><a href="#getElementsByTagName" class="headerlink" title="getElementsByTagName( )"></a>getElementsByTagName( )</h3><p><em>获取过来元素对象的集合 以</em><em><strong>伪数组</strong></em><em>形式储存</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>演示文档1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>演示文档2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>演示文档3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>演示文档4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>演示文档5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">id</span>=<span class="string">&quot;ol&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>01<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>02<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>03<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>04<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.返回的是 获取过来元素对象的集合 以伪数组形式储存</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(lis);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.依次打印里面的对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[i]);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//3.如果页面中只有一个li 返回的还是伪数组形式</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//4.如果页面没有这个元素 返回的是空的伪数组</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//5.element.getElementsByTagName(&#x27;标签名&#x27;); 父元素必须是指定的单个元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var ol = document.getElementsByTagName(&#x27;ol&#x27;);//[ol]</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(ol[0].getElementsByTagName(&#x27;li&#x27;));</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ol = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ol&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="getElementByName"><a href="#getElementByName" class="headerlink" title="getElementByName();"></a>getElementByName();</h3><p>接受一个参数**(属性name的值)** ,这个方法会返回带有给定<strong>name</strong>特性的所有元素.</p>
<h2 id="2-H5新增获取节点方法"><a href="#2-H5新增获取节点方法" class="headerlink" title="2.H5新增获取节点方法"></a>2.H5新增获取节点方法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>盒子1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>盒子2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.getElementsByClassName 根据类名获取某些元素集合</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> boxs = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(boxs);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.querySelector返回指定选择器的第一个元素对象 切记 选择器要加符号 .box #nav</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> firstBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(firstBox);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> nav = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#nav&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(nav);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(li);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//3.querySelectorAll()指定选择器所有元素对象集合</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> allBox = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(allBox);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(lis);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><strong>getElementsByClassName(‘box’);</strong> <strong>根据类名获取某些元素集合</strong></li>
<li><strong>querySelector(‘.box’);</strong> <strong>返回指定选择器的第一个元素对象 (<strong><strong>切记 选择器要加符号 .box #nav</strong></strong>)</strong></li>
<li><strong>querySelectorAll(‘.box’);</strong> <strong>指定选择器所有元素对象集合</strong></li>
</ol>
<h2 id="3-body-html获取"><a href="#3-body-html获取" class="headerlink" title="3.body,html获取"></a>3.body,html获取</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.获取 body元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> bodyEle = <span class="variable language_">document</span>.<span class="property">body</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(bodyEle);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.获取 html元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> htmlEle = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(htmlEle);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-获取伪元素"><a href="#4-获取伪元素" class="headerlink" title="4.获取伪元素"></a>4.获取伪元素</h2><h3 id="1-getComputedStyle"><a href="#1-getComputedStyle" class="headerlink" title="(1)getComputedStyle()"></a>(1)getComputedStyle()</h3><p>虽然js中没有明确的获取伪元素的方法，但是却可以通过**getComputedStyle()**获取伪元素的属性</p>
<p><strong>语法：	getComputedStyle(‘元素’,’伪类’)</strong>	</p>
<p><strong>getComputedStyle(‘元素’,null)</strong> <em><strong>获取元素</strong></em></p>
<h3 id="2-getPropertyValue"><a href="#2-getPropertyValue" class="headerlink" title="(2)getPropertyValue()"></a>(2)getPropertyValue()</h3><p>获取该伪元素的属性值</p>
<p><strong>语法：getPropertyValue(‘css属性’)</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&quot;伪元素&quot;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> divAfter = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> sty = <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(divAfter, <span class="string">&quot;:after&quot;</span>).<span class="property">content</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(sty); <span class="comment">// &quot;伪元素&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> sty1 = <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(divAfter, <span class="string">&quot;:after&quot;</span>).<span class="title function_">getPropertyValue</span>(<span class="string">&#x27;font-size&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(sty1); <span class="comment">// 20px</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="事件三要素"><a href="#事件三要素" class="headerlink" title="事件三要素"></a>事件三要素</h1><ol>
<li><strong>事件源</strong>     <em>事件被触发的对象</em></li>
<li><strong>事件类型</strong>   <em>如何触发什么事件</em></li>
<li><strong>事件处理程序</strong>   <em>触发什么事件</em></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>演示按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//点击按钮 弹出对话框</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.事件有三部分：事件源 事件类型 事件处理程序 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//(1) 事件源 事件被触发的对象   谁  按钮</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//(2) 事件类型 如何触发 什么事件 比如鼠标点击(onclick) 经过 键盘按下</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//(3) 事件处理程序 如何触发 什么事件</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;弹出框&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="innerXXX修改元素内容"><a href="#innerXXX修改元素内容" class="headerlink" title="innerXXX修改元素内容"></a>innerXXX修改元素内容</h1><h2 id="innerText和innerHTML的区别"><a href="#innerText和innerHTML的区别" class="headerlink" title="innerText和innerHTML的区别"></a>innerText和innerHTML的区别</h2><ol>
<li><strong>innerText</strong> 不识别html标签 非标准</li>
<li><strong>innerHTML</strong> 识别标签  W3C标准</li>
<li>outerHTML 获取节点本身和其里面的内容</li>
<li>textContent  仅仅获取文本   （类似innerText）</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        我是文字</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//innerText和innerHTML的区别</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. innerText 不识别html标签 非标准</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// div.innerText = &#x27;今天是:2022&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. innerHTML 识别标签  W3C标准</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;b&gt;今天是:&lt;/b&gt;2022&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 两个属性可读写 可以获取元素里面的内容 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">innerText</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">innerHTML</span>); <span class="comment">//会保留换行 空格</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="修改元素属性"><a href="#修改元素属性" class="headerlink" title="修改元素属性"></a>修改元素属性</h1><h2 id="1-修改节点属性"><a href="#1-修改节点属性" class="headerlink" title="1.修改节点属性"></a>1.修改节点属性</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../../img/图片/cs (1).webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;p1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//修改 元素属性 src</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> p1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;p1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> p2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;p2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.注册事件</span></span></span><br><span class="line"><span class="language-javascript">        p2.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">src</span> = <span class="string">&#x27;../../../img/图片/cs (2).webp&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">title</span> = <span class="string">&#x27;p2&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        p1.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">src</span> = <span class="string">&#x27;../../../img/图片/cs (1).webp&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">title</span> = <span class="string">&#x27;p1&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>获取到元素节点存放到一个<strong>变量</strong>后可以直接<strong>打点调用</strong>这个节点的<strong>属性</strong>更改</p>
<h2 id="2-修改表单属性"><a href="#2-修改表单属性" class="headerlink" title="2.修改表单属性"></a>2.修改表单属性</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;输入内容&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.注册事件</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// input.innerHTML = &#x27;点击了&#x27;; 普通盒子 比如div才可用</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 表单里面的值 文字通过 val 来修改</span></span></span><br><span class="line"><span class="language-javascript">            input.<span class="property">value</span> = <span class="string">&#x27;点击了&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//如果想要某个表单被禁用 不能被点击 disable 想要按钮button被禁用</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// btn.disabled = true;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this指向的是事件函数的调用者 就是btn自己</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>如果想要某个表单被禁用 不能被点击 disable 想要按钮button被禁用</strong></p>
<p><strong>btn.disabled &#x3D; true</strong><strong>;</strong></p>
<h2 id="3-修改样式属性"><a href="#3-修改样式属性" class="headerlink" title="3.修改样式属性"></a>3.修改样式属性</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.注册事件 处理程序</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//里面的属性采取驼峰命名法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//触发事件 将样式改为行内样式</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;black&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;250px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>触发事件 将样式改为****行内样式</strong></p>
<h2 id="4-className修改样式属性"><a href="#4-className修改样式属性" class="headerlink" title="4.className修改样式属性"></a>4.className修改样式属性</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.change</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;first&quot;</span>&gt;</span>文本内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.注册事件 处理程序</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.style.backgroundColor = &#x27;black&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.style.color = &#x27;#fff&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.style.fontSize = &#x27;25px&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 当前元素的类名class改为了&#x27;change&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;change&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 会直接更改 覆盖原先的class类名</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//如果想要保留原先的类名 可以如下做法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;first change&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>通过</strong><strong>.className****修改节点类名</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654486021557-a62f87cc-7e9b-4726-972a-b0162de620d6.png" alt="img"></p>
<p><strong>关于classList</strong></p>
<p><a href="https://blog.csdn.net/qq_37304197/article/details/81748349?ops_request_misc=%7B%22request_id%22:%22165450310816781685361768%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165450310816781685361768&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81748349-null-null.142%5Ev11%5Econtrol,157%5Ev13%5Econtrol&utm_term=classList&spm=1018.2226.3001.4187"><strong>🔗🔗classList🔗🔗</strong></a>   <em>node存放接收节点的变量</em></p>
<ol>
<li><strong>node.classList   						返回一个Object里面存放类名</strong></li>
<li><strong>node.classList.add(‘类名’)   			添加新的类名</strong></li>
<li><strong>node.classList.remove(‘类名’)  		删除对另类名</strong></li>
<li><strong>node.classList.item(索引)</strong>   </li>
<li><strong>node.classList.toggle(“类名”); 	引号中的类名，有就删除，没有就添加</strong></li>
</ol>
<h2 id="5-排他思想案例"><a href="#5-排他思想案例" class="headerlink" title="5.排他思想案例"></a>5.排他思想案例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//btns得到伪数组</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            btns[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//(1)先发所有的按钮背景颜色去除</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    btns[i].<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//(2)然后被点击的按钮变色</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.首先先排除其他</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="获取-x2F-设置自定义属性"><a href="#获取-x2F-设置自定义属性" class="headerlink" title="获取&#x2F;设置自定义属性"></a>获取&#x2F;设置自定义属性</h1><h2 id="H5之前的获取-x2F-设置自定义属性"><a href="#H5之前的获取-x2F-设置自定义属性" class="headerlink" title="H5之前的获取&#x2F;设置自定义属性"></a>H5之前的获取&#x2F;设置自定义属性</h2><h3 id="getAttribute-‘属性’-获取"><a href="#getAttribute-‘属性’-获取" class="headerlink" title=".getAttribute(‘属性’)  获取"></a>.getAttribute(‘属性’)  获取</h3><p><strong>get(得到)</strong></p>
<p><strong>attribute(属性)</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.获取元素的属性值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// (1) element.属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">id</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// (2) element.getAttribute(&#x27;属性&#x27;) get得到 attribute属性的意思</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     程序员自己添加的属性称为自定义属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;id&#x27;</span>)); <span class="comment">//demo</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;index&#x27;</span>)); <span class="comment">//1</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="setAttribute-‘属性’-’值’-设置"><a href="#setAttribute-‘属性’-’值’-设置" class="headerlink" title=".setAttribute(‘属性’,’值’)  设置"></a>.setAttribute(‘属性’,’值’)  设置</h3><p><strong>set(设置)</strong></p>
<p><strong>attribute(属性)</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2. 设置元素属性值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// (1) element.属性=&#x27;值&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">id</span> = <span class="string">&#x27;text&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// (2) element.setAttribute(&#x27;属性&#x27;,&#x27;值&#x27;); 主要针对于自定义属性</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;3&#x27;</span>); <span class="comment">//也可以改class</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="removeAttribute-属性-删除"><a href="#removeAttribute-属性-删除" class="headerlink" title=".removeAttribute(属性)  删除"></a>.removeAttribute(属性)  删除</h3><p><strong>remove(删除)</strong></p>
<p><strong>attribute(属性)</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//3. 移除属性 removeAttribute(属性)</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;index&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="attributes获取属性集合-所有属性"><a href="#attributes获取属性集合-所有属性" class="headerlink" title=".attributes获取属性集合  (所有属性)"></a>.attributes获取属性集合  <em>(所有属性)</em></h3><h2 id="H5自定义属性"><a href="#H5自定义属性" class="headerlink" title="H5自定义属性"></a>H5自定义属性</h2><p><strong>##H5规定自定义属性data-开头做为属性名并且赋值##</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">getTime</span>=<span class="string">&quot;20&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">data-list-name</span>=<span class="string">&quot;andy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(div.getTime);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;getTime&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// H5规定自定义属性data-开头做为属性名并且赋值。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-index&#x27;</span>, <span class="string">&#x27;data-index:20&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-index&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// h5新增获取自定义属性方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// dataset是一个集合里面存放了所有以data开头的自定义属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>.<span class="property">index</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>[<span class="string">&#x27;index&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 如果自定义属性里面有多个-链接的单词，我们获取的时候采取驼峰命名法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>.<span class="property">listName</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>[<span class="string">&#x27;listName&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>h5新增获取自定义属性方法</p>
<h3 id="dataset获取自定义属性-data开头属性"><a href="#dataset获取自定义属性-data开头属性" class="headerlink" title="dataset获取自定义属性  data开头属性"></a><strong>dataset获取自定义属性</strong>  <em><strong>data开头属性</strong></em></h3><p><strong>dataset</strong>是一个集合里面存放了所有以data开头的自定义属性</p>
<p>如果自定义属性里面有多个**-链接<strong>的单词，我们获取的时候采取</strong>驼峰命名法**</p>
<h1 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h1><h2 id="父子节点"><a href="#父子节点" class="headerlink" title="父子节点"></a>父子节点</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 节点的优点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;erweima&quot;</span>&gt;</span>X<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var box = document.querySelector(&#x27;.box&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.dir(box);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.父节点 parentNote</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> erweima = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.erweima&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var box=document.querySelector(&#x27;.box&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 得到的是离元素最近的父级节点(亲父级) 如果找不到就返回空 null</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(erweima.<span class="property">parentNode</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// DOM提供的方法(API)获取</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 子节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// (1)子节点 childNotes 所有的子节点 包含 元素节点 文本节点等等</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">childNodes</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//.nodeType 节点类型 不同数字对应不同类型</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">childNodes</span>[<span class="number">0</span>].<span class="property">nodeType</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// (2)子节点 children 获取所有的子元素节点 实际开发常用的</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">children</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// (3)子节点 firstChild 子节点第一个</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//  文本节点涵盖空格和文字</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">firstChild</span>); <span class="comment">//#text 文本节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">lastChild</span>); <span class="comment">//#text 文本节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// (4)子节点 firstElementChild 返回第一个子元素节点 ie9以上支持</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">firstElementChild</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// (5)实际开发中 既没有兼容性问题又返回第一个子元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">children</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">children</span>[ul.<span class="property">children</span>.<span class="property">length</span> - <span class="number">1</span>]); <span class="comment">//最后一个</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="父节点"><a href="#父节点" class="headerlink" title="父节点"></a>父节点</h3><p>node 节点</p>
<p><strong>node.parentNote</strong>得到的是离元素最近的父级元素节点(亲父级) 如果找不到就返回空 null</p>
<p><em>(只包含元素节点)</em></p>
<p><strong>node.parentElement</strong>得到的是离元素最近的父级元素节点(亲父级) 如果找不到就返回空 null</p>
<p><em>(只包含元素节点)</em></p>
<h3 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h3><p><strong>node.childNodes</strong>	得到node所有的子节点*(既包含元素节点、文本节点、注释节点)*</p>
<p><strong>node.childNodes[0].nodeType</strong>	 该节点的节点类型（返回一个数值）</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/26760678/1654505958781-d7e3ba30-4a4b-49b1-9fc4-9edf0feb4e00.png" alt="img"></p>
<p><strong>node.children</strong>			获取node所有的子元素节点 实际开发常用的*(只包含元素节点)*</p>
<p><strong>node.firstChild</strong>			子节点第一个节点*(既包含元素节点、文本节点、注释节点)*</p>
<p><strong>node.lastChild</strong>			子节点最后一个节点*(既包含元素节点、文本节点、注释节点)*</p>
<p><strong>childElementCount</strong>		返回子元素（不包括文本节点和注释）的个数</p>
<p>实际开发中获取方法</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654505851064-e1bc2453-f6e7-44f8-acf2-ac4af638c071.png" alt="img"></p>
<h3 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 兼容问题</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// nextSibling 下一个兄弟节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">nextSibling</span>); <span class="comment">//文本节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// previousSibling上一个兄弟节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">previousSibling</span>); <span class="comment">//文本节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.nextElementSibling 的到下一个兄弟元素节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">nextElementSibling</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">previousElementSibling</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">getNextElementSibling</span>(<span class="params">element</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> el = element;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">while</span> (el = el.<span class="property">nextSibling</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (el.<span class="property">nodeType</span> === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> el;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>node.nextSibling</strong> 	下一个兄弟节点:<em>(既包含元素节点、文本节点、注释节点)</em></p>
<p><strong>node.previousSibling</strong>	获取node的上一个兄弟节点*:(既包含元素节点、文本节点、注释节点)*</p>
<p><strong>node.nextElementSibling</strong> 	获取node的下一个兄弟元素节点*:(只包含元素节点)*</p>
<p><strong>node.previousElementSibling</strong>	获取node的上一个兄弟元素节点*:(只包含元素节点)*</p>
<h2 id="创建添加节点"><a href="#创建添加节点" class="headerlink" title="创建添加节点"></a>创建添加节点</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.创建元素节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.添加节点 node.appendChild(child) node父级 child 是子级 后面追加元素 类似于数组中的push</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        ul.<span class="title function_">appendChild</span>(li);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.node.insrtBefore(child,指定元素) 在指定元素的前面添加元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lili = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        ul.<span class="title function_">insertBefore</span>(lili, ul.<span class="property">children</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4.要在页面添加一个新的元素 1.创建元素 2.添加元素</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-创建节点"><a href="#1-创建节点" class="headerlink" title="1.创建节点"></a>1.创建节点</h3><p><strong>document.createElement</strong><strong>(‘<strong><strong>标签</strong></strong>‘)</strong>      <em>自动识别单双标签</em></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654500294447-65413060-d499-4261-9e18-f9e61dd1140d.png" alt="img"></p>
<h3 id="2-添加节点"><a href="#2-添加节点" class="headerlink" title="2.添加节点"></a>2.添加节点</h3><p><strong>node.appendChild</strong><strong>(child)</strong>  <em>node父级 child 是子级 后面追加元素 类似于数组中的push</em></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654500409758-399b3fe0-d79f-496f-a54f-5962e3066d78.png" alt="img"></p>
<p><strong>node.insrtBefore</strong><strong>(child,指定元素)</strong>  <em>在指定元素的前面添加元素</em></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654500572591-be97b45a-33ff-445f-9670-0694c7b0daa3.png" alt="img"></p>
<h3 id="3-替换节点"><a href="#3-替换节点" class="headerlink" title="3.替换节点"></a>3.替换节点</h3><p><strong>node.replaceChild</strong><strong>(child,指定元素)</strong> <em>要替换的节点从文档中删除,同时要插入的节点占据它的位置</em></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654573225003-2d51c9be-41d8-42c6-9303-67c60c9e0051.png" alt="img"></p>
<h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>熊大<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>熊二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>光头强<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 删除元素 node.removeChild(child)</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (ul.<span class="property">children</span>.<span class="property">length</span> == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                ul.<span class="title function_">removeChild</span>(ul.<span class="property">children</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>删除元素 node.removeChild(child)</strong></p>
<h2 id="复制克隆节点"><a href="#复制克隆节点" class="headerlink" title="复制克隆节点"></a>复制克隆节点</h2><p>**node.cloneNode( )**只复制标签 不复制内容</p>
<p>**node.cloneNode(true)**内容标签全部复制</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// node.cloneNode()只复制标签 不复制内容 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 添加true 深克隆 内容也克隆</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.克隆节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lili = ul.<span class="property">children</span>[<span class="number">0</span>].<span class="title function_">cloneNode</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.在ul中添加节点</span></span></span><br><span class="line"><span class="language-javascript">        ul.<span class="title function_">appendChild</span>(lili);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="注册-x2F-删除事件"><a href="#注册-x2F-删除事件" class="headerlink" title="注册&#x2F;删除事件"></a>注册&#x2F;删除事件</h1><h2 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h2><h3 id="1-传统注册事件-唯一性"><a href="#1-传统注册事件-唯一性" class="headerlink" title="1.传统注册事件  唯一性"></a>1.传统注册事件  唯一性</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654567236574-e6b523aa-e666-4350-94b4-d826f751382f.png" alt="img"></p>
<h3 id="2-方法监听注册事件-addEventListener-ie9以上"><a href="#2-方法监听注册事件-addEventListener-ie9以上" class="headerlink" title="2.方法监听注册事件  addEventListener  ie9以上"></a>2.方法监听注册事件  addEventListener  ie9以上</h3><ul>
<li>里面的事件类型是字符串必定加引号而月不带on</li>
<li>同一个元素同一个事件可以添加多个侦听器( 事件处理程序)</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654567353359-44fcc364-cb25-489c-a585-3e1c1c986b98.png" alt="img"></p>
<h3 id="3-attachEvent事件监听方式-仅了解不提倡使用"><a href="#3-attachEvent事件监听方式-仅了解不提倡使用" class="headerlink" title="3.attachEvent事件监听方式   仅了解不提倡使用"></a>3.attachEvent事件监听方式   仅了解不提倡使用</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654567401400-06a31444-ae07-47d4-baf5-57705c2bed99.png" alt="img"></p>
<h2 id="删除事件"><a href="#删除事件" class="headerlink" title="删除事件"></a>删除事件</h2><h3 id="1-传统方式解绑-node’元素’"><a href="#1-传统方式解绑-node’元素’" class="headerlink" title="1.传统方式解绑   node’元素’"></a>1.传统方式解绑   <em>node’元素’</em></h3><p><strong>node.onclick&#x3D;null</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654567648988-1f888cf6-0c10-4f84-ba95-c8ab39d4bc48.png" alt="img"></p>
<h3 id="2-removeEventListener-删除事件"><a href="#2-removeEventListener-删除事件" class="headerlink" title="2.removeEventListener 删除事件"></a>2.removeEventListener 删除事件</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654567684924-10492efa-f2d8-43b8-a08c-c2a19e4ea166.png" alt="img"></p>
<h3 id="3-老办法attachEvent-仅在ie9之前可用"><a href="#3-老办法attachEvent-仅在ie9之前可用" class="headerlink" title="3.老办法attachEvent 仅在ie9之前可用"></a>3.老办法attachEvent <em>仅在ie9之前可用</em></h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654567728098-295e58e4-b1a9-4ad5-a861-d411f15ca038.png" alt="img"></p>
<h1 id="DOM事件流代码验证"><a href="#DOM事件流代码验证" class="headerlink" title="DOM事件流代码验证"></a>DOM事件流代码验证</h1><p>dom事件流三个阶段</p>
<ol>
<li>JS代码中只能执行捕获或者冒泡其中的一个阶段。</li>
<li>onclick和attachEvent (ie)只能得到冒泡阶段。</li>
<li>捕获阶段 如果addEventListener第三个参数是true 那么则处于捕获阶段 <em>document-&gt;html-&gt;body-&gt;father-&gt;son</em></li>
</ol>
<h2 id="捕获阶段"><a href="#捕获阶段" class="headerlink" title="捕获阶段"></a>捕获阶段</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654568481514-ce930ecf-5199-4857-8d0c-86e81074eaf4.png" alt="img"></p>
<p>当点击<strong>son</strong>会依次触发<strong>从根元素到目标节点</strong>的事件</p>
<p>结果:  触发<strong>father - son</strong></p>
<h2 id="冒泡阶段"><a href="#冒泡阶段" class="headerlink" title="冒泡阶段"></a>冒泡阶段</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654569320445-d2ab52e1-5fd8-4334-8ece-27cb2779e880.png" alt="img"></p>
<p>当点击<strong>son</strong>会依次触发<strong>从目标元素到根节点</strong>的事件</p>
<p>结果:  触发<strong>son - father</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>,</span></span><br><span class="line"><span class="language-css">         <span class="selector-pseudo">:root</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: rebeccapurple;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// dom事件流三个阶段</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.JS代码中只能执行捕获或者冒泡其中的一个阶段。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.onclick和attachEvent (ie)只能得到冒泡阶段。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.捕获阶段 如果addEventListener第三个参数是true 那么则处于捕获阶段 document-&gt;html-&gt;body-&gt;father-&gt;son</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 捕获阶段</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4.冒泡阶段 如果addEventListener第三个参数是false或者省略 那么则处于冒泡阶段 相反</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 冒泡阶段</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var son = document.querySelector(&#x27;.son&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// son.addEventListener(&#x27;click&#x27;, function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     alert(&#x27;son&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;, false);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var father = document.querySelector(&#x27;.father&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// father.addEventListener(&#x27;click&#x27;, function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     alert(&#x27;father&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;, false);</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="e-target和this的区别-event对象"><a href="#e-target和this的区别-event对象" class="headerlink" title="e.target和this的区别   event对象"></a>e.target和this的区别   <em>event对象</em></h1><h2 id="e-target-x2F-this"><a href="#e-target-x2F-this" class="headerlink" title="e.target&#x2F;this"></a>e.target&#x2F;this</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        123</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//常见事件对象的属性和方法 this返回的的是绑定事件的对象(元素)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 区别: e.target 点击了那个元素，就返回那个元素;this 那个元素绑定了这个点击事件，那么就返回谁</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.e.target返回的是触发事件的对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 我们给ul绑定了事件 那么this就指向ul</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// e.target 指向我们点击的那个对象 谁触发了这个事件 我们点击的是1i e.target 指向的就是1i</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 了解兼容</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// div.onclick=function(e)&#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     e=e||window.event;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     var target = e.target || e.srcElement;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     console.log(target);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.了解跟this 有个非常相似的属性currentTarget ie678不认识</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>常见事件对象的属性和方法 this返回的的是绑定事件的对象(元素)</p>
<p>区别: 	</p>
<ul>
<li><strong>e.target</strong> 	点击了那个元素，就返回那个元素</li>
<li><strong>this</strong> 		哪个元素绑定了这个点击事件，那么就返回谁</li>
<li><strong>e.target.selectedIndex</strong>     获取被点击子元素的索引</li>
</ul>
<h2 id="e-button-返回被触发函数的鼠标被点击的下标"><a href="#e-button-返回被触发函数的鼠标被点击的下标" class="headerlink" title="e.button   返回被触发函数的鼠标被点击的下标"></a>e.button   返回被触发函数的鼠标被点击的下标</h2><h1 id="阻止默认行为-event对象"><a href="#阻止默认行为-event对象" class="headerlink" title="阻止默认行为  event对象"></a>阻止默认行为  <em>event对象</em></h1><h2 id="1-返回事件类型e-type"><a href="#1-返回事件类型e-type" class="headerlink" title="1.返回事件类型e.type"></a>1.返回事件类型e.type</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654588757570-3ddfdd50-4bfa-4aad-a4a2-b49b6af34bbb.png" alt="img"></p>
<p><strong>此时当触发事件时，就在控制台输出所触发的事件类型</strong></p>
<h2 id="2-阻止默认行为-事件"><a href="#2-阻止默认行为-事件" class="headerlink" title="2.阻止默认行为(事件)"></a>2.阻止默认行为(事件)</h2><p> <em>让链接不跳转 或者让提交按钮不提交</em></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654588902929-09afa0fd-12f3-4cd1-a229-bbcf9464a248.png" alt="img"></p>
<h2 id="3-传统方式-return-false"><a href="#3-传统方式-return-false" class="headerlink" title="3.传统方式 return false"></a>3.传统方式 return false</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654589028187-2885f65d-b02e-491d-86dd-affd651e2b45.png" alt="img"></p>
<h2 id="4-阻止冒泡"><a href="#4-阻止冒泡" class="headerlink" title="4.阻止冒泡"></a>4.阻止冒泡</h2><ul>
<li><strong>e.stopPropagation();</strong> 	<em>stop停止 Propagation 传播</em> <em>常规做法</em></li>
<li><strong>e.cancelBubble&#x3D;true;</strong> 	<em>cancle取消 bubble泡泡</em> <em>传统做法</em></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: rebeccapurple;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.冒泡阶段 如果addEventListener第三个参数是false或者省略 那么则处于冒泡阶段 相反</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// e.stopPropagation(); // stop停止 Propagation 传播 常规做法</span></span></span><br><span class="line"><span class="language-javascript">            e.<span class="property">cancelBubble</span> = <span class="literal">true</span>; <span class="comment">//cancle取消 bubble泡泡 传统做法</span></span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            e.<span class="title function_">stopPropagation</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;document&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-事件委托"><a href="#5-事件委托" class="headerlink" title="5.事件委托"></a>5.事件委托</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>点击弹框<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>点击弹框<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>点击弹框<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>点击弹框<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>点击弹框<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//事件委托核心原理 给父节点添加侦听器，利用事件冒泡影响每一个子节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// alert(&#x27;弹框&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                lis[i].<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="comment">//排他思想</span></span></span><br><span class="line"><span class="language-javascript">            e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>事件委托核心原理 <strong>给父节点添加侦听器，利用事件冒泡影响每一个子节点</strong></p>
<p><a href="https://blog.csdn.net/qq_38128179/article/details/86293394?ops_request_misc=%7B%22request_id%22:%22165465447016782388090175%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165465447016782388090175&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-86293394-null-null.142%5Ev11%5Econtrol,157%5Ev13%5Econtrol&utm_term=%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98&spm=1018.2226.3001.4187"><strong>🔗🔗事件委托🔗🔗</strong></a></p>
<h2 id="6-禁止选中和右键行为"><a href="#6-禁止选中和右键行为" class="headerlink" title="6.禁止选中和右键行为"></a>6.禁止选中和右键行为</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    演示文本-无法选中文本-无法右键菜单</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.contextmenu 禁止右键菜单</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;contextmenu&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.selectstart 禁止选中文字</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;selectstart&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="鼠标事件-x2F-坐标问题"><a href="#鼠标事件-x2F-坐标问题" class="headerlink" title="鼠标事件 &#x2F; 坐标问题"></a>鼠标事件 &#x2F; 坐标问题</h1><h2 id="1-client-鼠标在可视区域的坐标"><a href="#1-client-鼠标在可视区域的坐标" class="headerlink" title="1.client 鼠标在可视区域的坐标"></a>1.client 鼠标在可视区域的坐标</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654658100226-1994bb9f-58ba-42ae-a97b-a0bcf832d178.png" alt="img"></p>
<h2 id="2-page-鼠标在文档的坐标-兼容问题"><a href="#2-page-鼠标在文档的坐标-兼容问题" class="headerlink" title="2.page 鼠标在文档的坐标 兼容问题"></a>2.page 鼠标在文档的坐标 <em>兼容问题</em></h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654658136881-5af81d56-0e4e-4ad8-be02-18020060d94c.png" alt="img"></p>
<p>涵盖了被卷去的部分</p>
<h2 id="3-screen-鼠标在电脑屏幕的坐标"><a href="#3-screen-鼠标在电脑屏幕的坐标" class="headerlink" title="3.screen 鼠标在电脑屏幕的坐标"></a>3.screen 鼠标在电脑屏幕的坐标</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654658163694-f1ac6404-cc35-4def-8382-adfcd41dde55.png" alt="img"></p>
<ul>
<li>click：单击事件。</li>
<li>dblclick：双击事件。</li>
<li>mousedown：按下鼠标键时触发。</li>
<li>mouseup：松开按下的鼠标键时触发。</li>
<li>mousemove：鼠标移动事件。</li>
<li>mouseover：移入事件。</li>
<li>mouseout：移出事件。</li>
<li>mouseenter：移入事件。</li>
<li>mouseleave：移出事件。</li>
<li>contextmenu：右键事件。</li>
</ul>
<p>mouseover事件和mouseenter事件，都是鼠标进入一个节点时触发。两者的区别是，mouseenter事件只触发一次，而只要鼠标在节点内部移动，mouseover事件会在子节点上触发多次。</p>
<ul>
<li>在mouseover事件下，当鼠标移入父盒子会触发事件，但是从子盒子移入父盒子也会触发一次事件</li>
<li>在mouseenter事件下，当鼠标移入父盒子中的子盒子，再移出子盒子并不会触发两次</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: purple;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// mouseover鼠标经过自身盒子会触发.经过子盒子还会触发</span></span></span><br><span class="line"><span class="language-javascript">        father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// mouseenter只会经过自身盒子触发</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// mouseenter不会冒泡</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 配合使用mouseleave(鼠标离开)同样不会冒泡</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/qq_42669658/article/details/82531144"><strong>🔗🔗鼠标事件blog🔗🔗</strong></a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../CSS/touxiang.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> pic = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1.mousemove只要鼠标移动就会触发</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> x = e.<span class="property">pageX</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> y = e.<span class="property">pageY</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2.注意不要忘记添加px单位</span></span></span><br><span class="line"><span class="language-javascript">            pic.<span class="property">style</span>.<span class="property">left</span> = x - <span class="number">82</span> + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            pic.<span class="property">style</span>.<span class="property">top</span> = y - <span class="number">82</span> + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="仿京东放大镜案例"><a href="#仿京东放大镜案例" class="headerlink" title="仿京东放大镜案例"></a>仿京东放大镜案例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.preview_img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">285px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: move;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.preview_img</span>&gt;<span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.mask</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.big</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">5px</span> solid gray;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.big</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;preview_img&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./001.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;big&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./001.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 800px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bigImg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> preview_img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.preview_img&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> mask = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.mask&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> big = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.big&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 当我们鼠标经过preview_img 就显示和隐藏mask遮挡层和big大盒子</span></span></span><br><span class="line"><span class="language-javascript">        preview_img.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseover&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            mask.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            big.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        preview_img.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseout&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            mask.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            big.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 鼠标移动的时候，让黄色的盒子跟鼠标来走</span></span></span><br><span class="line"><span class="language-javascript">        preview_img.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// (1)先计算出鼠标在盒子内的坐标</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> x = e.<span class="property">pageX</span> - <span class="variable language_">this</span>.<span class="property">offsetLeft</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> y = e.<span class="property">pageY</span> - <span class="variable language_">this</span>.<span class="property">offsetTop</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// (2)mask.offsetWidth减去盒子的一半</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// (3)mask移动的距离</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> maskX = x - mask.<span class="property">offsetWidth</span> / <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> maskY = y - mask.<span class="property">offsetHeight</span> / <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// (4)如果x坐标小于0就让他停在0的位置</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> maskMax = preview_img.<span class="property">offsetWidth</span> - mask.<span class="property">offsetWidth</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (maskX &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                maskX = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maskX &gt;= maskMax) &#123;</span></span><br><span class="line"><span class="language-javascript">                maskX = maskMax;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (maskY &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                maskY = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maskY &gt;= preview_img.<span class="property">offsetHeight</span> - mask.<span class="property">offsetHeight</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                maskY = preview_img.<span class="property">offsetHeight</span> - mask.<span class="property">offsetHeight</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            mask.<span class="property">style</span>.<span class="property">left</span> = maskX + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            mask.<span class="property">style</span>.<span class="property">top</span> = maskY + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 大图片的移动距离=遮挡层移动距离*大图片最大移动距离/遮挡层的最大移动距离</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> bigImg = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.bigImg&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 大图片最大移动距离</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> bigMax = bigImg.<span class="property">offsetWidth</span> - big.<span class="property">offsetWidth</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 大图片距离</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> bigX = maskX * bigMax / maskMax;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> bigY = maskY * bigMax / maskMax;</span></span><br><span class="line"><span class="language-javascript">            bigImg.<span class="property">style</span>.<span class="property">left</span> = -bigX + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            bigImg.<span class="property">style</span>.<span class="property">top</span> = -bigY + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h1><h2 id="1-keyup-按键弹起的时候触发"><a href="#1-keyup-按键弹起的时候触发" class="headerlink" title="1. keyup 按键弹起的时候触发"></a>1. keyup 按键弹起的时候触发</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654669083014-96fd7257-2c5d-4185-a6d0-9911db9a56ee.png" alt="img"></p>
<h2 id="2-keydown-按键按下的时候触发"><a href="#2-keydown-按键按下的时候触发" class="headerlink" title="2. keydown 按键按下的时候触发"></a>2. keydown 按键按下的时候触发</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654669137983-6227fd61-01d8-48a9-aa31-f668d4304dbb.png" alt="img"></p>
<h2 id="3-keypress-按键按下的时候触发"><a href="#3-keypress-按键按下的时候触发" class="headerlink" title="3. keypress 按键按下的时候触发"></a>3. keypress 按键按下的时候触发</h2><ul>
<li><strong>keypress区分字母大小写</strong> </li>
<li><strong>不识别功能键 ctrl shift 方向键</strong></li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654669227779-a9316f92-4a36-4116-bc16-aca863c8ee03.png" alt="img"></p>
<p>执行顺序 keydown-keypress-keyup</p>
<h2 id="4-e-keyCode获取相应的ASCII码值"><a href="#4-e-keyCode获取相应的ASCII码值" class="headerlink" title="4.e.keyCode获取相应的ASCII码值"></a>4.e.keyCode获取相应的ASCII码值</h2><ul>
<li><strong>keyup</strong>和<strong>keydown</strong>不区分字母大小写</li>
<li><strong>keypress</strong>区分字母大小写</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654669720171-10e1c086-4485-4600-9869-1e493c15f514.png" alt="img"></p>
<h2 id="5-e-key获取按键的字符"><a href="#5-e-key获取按键的字符" class="headerlink" title="5.e.key获取按键的字符"></a>5.e.key获取按键的字符</h2><h2 id="6-e-ctrlKey判断是否为ctrl键-返回-布尔值"><a href="#6-e-ctrlKey判断是否为ctrl键-返回-布尔值" class="headerlink" title="6.e.ctrlKey判断是否为ctrl键  返回**布尔值"></a>6.e.ctrlKey判断是否为ctrl键  <em>返回**布尔值</em></h2><h1 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h1><h2 id="1-获取焦点onfocus"><a href="#1-获取焦点onfocus" class="headerlink" title="1.获取焦点onfocus"></a>1.获取焦点onfocus</h2><h2 id="2-失去焦点onblur"><a href="#2-失去焦点onblur" class="headerlink" title="2.失去焦点onblur"></a>2.失去焦点onblur</h2><h2 id="3-onchange下拉菜单选择时触发"><a href="#3-onchange下拉菜单选择时触发" class="headerlink" title="3.onchange下拉菜单选择时触发"></a>3.onchange下拉菜单选择时触发</h2><h2 id="4-输入时触发oninput"><a href="#4-输入时触发oninput" class="headerlink" title="4.输入时触发oninput"></a>4.输入时触发oninput</h2><h2 id="5-选择时触发onselect光标框选时"><a href="#5-选择时触发onselect光标框选时" class="headerlink" title="5.选择时触发onselect	光标框选时"></a>5.选择时触发onselect	<em>光标框选时</em></h2><h2 id="6-提交时触发onsubmit"><a href="#6-提交时触发onsubmit" class="headerlink" title="6.提交时触发onsubmit"></a>6.提交时触发onsubmit</h2><h2 id="7-重置时触发onreset"><a href="#7-重置时触发onreset" class="headerlink" title="7.重置时触发onreset"></a>7.重置时触发onreset</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onfocus</span>=<span class="string">&quot;focusFn()&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;获取焦点&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;blurFn()&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;失去焦点&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;01&quot;</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;02&quot;</span> <span class="attr">selected</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;03&quot;</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;04&quot;</span>&gt;</span>p4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">oninput</span>=<span class="string">&quot;inputFn(this)&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入时触发&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;h2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onselect</span>=<span class="string">&quot;selectFn(this)&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;选择时触发&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">&quot;submitFn()&quot;</span> <span class="attr">onreset</span>=<span class="string">&quot;resetFn()&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取焦点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">focusFn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;获取焦点&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 失去焦点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">blurFn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失去焦点了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// onchange</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> sel = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;select&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        sel.<span class="property">onchange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 输入时触发</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> h2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;h2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">inputFn</span>(<span class="params">self</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(self.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">            h2.<span class="property">innerHTML</span> = self.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 选择时触发</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">selectFn</span>(<span class="params">self</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(self.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 提交时触发</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">submitFn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;提交了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 重置时触发</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">resetFn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;重置了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="scroll滚动事件"><a href="#scroll滚动事件" class="headerlink" title="scroll滚动事件"></a>scroll滚动事件</h1><p>内容高度&#x2F;宽度 不包含边框 包含padding</p>
<h2 id="scrollTop折叠部分高度"><a href="#scrollTop折叠部分高度" class="headerlink" title="scrollTop折叠部分高度"></a>scrollTop折叠部分高度</h2><p><strong>scrollTop</strong>就是滚动条向下滚动上面被隐藏部分的高度  <em>并不适用于页面窗口</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        内容内容内容内容内容内容 内容内容内容内容内容内容 内容内容内容内容内容内容 内容内容内容内容内容内容 内容内容内容内容内容内容 内容内容内容内容内容内容 内容内容内容内容内容内容 内容内容内容内容内容内容 内容内容内容内容内容内容 内容内容内容内容内容内容 内容内容内容内容内容内容 内容内容内容内容内容内容 内容内容内容内容内容内容 内容内容内容内容内容内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// scroll 滚动事件</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">scrollTop</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// scrollTop就是滚动条向下滚动上面被隐藏部分的高度</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655188997507-ba126c1e-f1b9-4746-990c-13f599befabe.png" alt="img"></p>
<h1 id="页面加载事件"><a href="#页面加载事件" class="headerlink" title="页面加载事件"></a>页面加载事件</h1><p><strong>window.onload</strong>页面全部加载完毕才去执行</p>
<p>只能写一个会以最后一个为主</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// window.onload页面全部加载完毕才去执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 只能写一个会以最后一个为主</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;点击我&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用addEventListener可解决</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;点击我&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="number">33</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// load 等页面内容全部加载完毕，包含DOM元素 图片 flash css等等</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// DOMContentLoaded 是DOM加载完毕，不包含图片 flash css等就可以执行</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="调整窗口事件"><a href="#调整窗口事件" class="headerlink" title="调整窗口事件"></a>调整窗口事件</h1><p><strong>resize</strong> <em><strong>调整窗口触发</strong></em></p>
<ul>
<li><strong>window.innerWidth</strong>   		<em><strong>获取窗口宽度</strong></em></li>
<li><strong>window.innerHeight</strong>		<em><strong>获取窗口高度</strong></em></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// resize 窗口变化触发</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">innerHeight</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h2><p>语法规范：<strong>windows.setTimeout(调用函数，延时时间);</strong></p>
<ol>
<li>这个window在调用的时候可以省略</li>
<li>这个延时时间单位i毫秒 但可以省略 如果省略则默认为0</li>
<li>这个调用函数可以直接写函数 还可以写函数名 还有一个写法 ‘函数名()’</li>
<li>页面中可能有很多定时器,我们经常给定时器加标识符 (名字)</li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654681938149-c2710173-ee0c-4263-9aad-677b517c91a5.png" alt="img"></p>
<p>异步任务</p>
<h3 id="清除定时器clearTimeout-变量"><a href="#清除定时器clearTimeout-变量" class="headerlink" title="清除定时器clearTimeout(变量)"></a>清除定时器<strong>clearTimeout(变量)</strong></h3><p><strong>clearTimeout(变量)</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击停止定时器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> time = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;爆炸了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">5000</span>);</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearTimeout</span>(time);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h2><p><strong>window.setInterval(回调函数,[间隔毫秒数]);</strong></p>
<p>每隔**[间隔毫秒数]**触发一次函数</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654682117835-2678d70c-b9a3-4737-9b71-5766f853dcff.png" alt="img"></p>
<h3 id="清除定时器clearInterval-变量"><a href="#清除定时器clearInterval-变量" class="headerlink" title="清除定时器clearInterval(变量)"></a>清除定时器<strong>clearInterval(变量)</strong></h3><p><strong>clearInterval(变量)</strong></p>
<h1 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h1><p>this指向问题一般情况下this的最终指向的是那个调用它的对象</p>
<h2 id="1-全局作用域或者普通函数中this"><a href="#1-全局作用域或者普通函数中this" class="headerlink" title="1.全局作用域或者普通函数中this"></a>1.全局作用域或者普通函数中this</h2><p>指向全局对象<strong>window</strong>(注意定时器里面的this指向<strong>window</strong>)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// this指向问题一般情况下this的最终指向的是那个调用它的对象</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.全局作用域或者普通函数中this指向全局对象window(注意定时器甲面的this指向window)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//window</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2-函数中的this"><a href="#2-函数中的this" class="headerlink" title="2.函数中的this"></a>2.函数中的this</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654744499437-6ea6b88a-d412-4772-9064-e590f576ae41.png" alt="img"></p>
<p><strong>注：<strong><strong>匿名函数</strong></strong>中的<strong><strong>this</strong></strong>也同样指向****windows</strong></p>
<h2 id="3-定时器中的this"><a href="#3-定时器中的this" class="headerlink" title="3.定时器中的this"></a>3.定时器中的this</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654744551802-255f5ba4-a4a8-42b1-9baf-8d488175c3d1.png" alt="img"></p>
<h2 id="4-对象或者构造函数中的this"><a href="#4-对象或者构造函数中的this" class="headerlink" title="4.对象或者构造函数中的this"></a>4.对象或者构造函数中的this</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">     </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.调用中谁调用this指向谁</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> o = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// this指向的是o这个对象</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    o.<span class="title function_">sayHi</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.构造函数中this指向构造函数的实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">name, age</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//指向fun实例对象</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title function_">fun</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>对象中的<strong>this</strong>指向它本身</li>
<li>构造函数中的<strong>this</strong>指向它这个构造函数</li>
</ul>
<p><em>构造函数中的this因为new的过程使得this指向发生了转移</em></p>
<p><strong>new的整个过程：</strong></p>
<ol>
<li>new会在内存中创建一个新的空对像</li>
<li>new会让this指向这个新对象</li>
<li>执行构造函数中的代码</li>
<li>return这个新对象</li>
</ol>
<h2 id="5-绑定事件中的this"><a href="#5-绑定事件中的this" class="headerlink" title="5.绑定事件中的this"></a>5.绑定事件中的this</h2><p>谁绑定事件<strong>this</strong>就指向谁</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654744731772-a804b07f-d121-4b03-aa9c-57980de6fc8d.png" alt="img"></p>
<h2 id="6-箭头函数this指向特殊性"><a href="#6-箭头函数this指向特殊性" class="headerlink" title="6.箭头函数this指向	特殊性"></a>6.箭头函数this指向	<em>特殊性</em></h2><p>箭头函数的this指向它的父作用域，箭头函数声明在全局作用域下其this指向window，若不在全局作用域下，this指向其父作用域</p>
<p><strong>箭头函数的this永远指向其父作用域，箭头函数没有自己的this</strong></p>
<h3 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654746204921-fab4c532-3bae-4292-9e9d-b5f9d6d75eac.png" alt="img"></p>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654746238269-01e68480-a644-4ce2-9c57-d94c32499fe0.png" alt="img"></p>
<h1 id="改变this指向方法"><a href="#改变this指向方法" class="headerlink" title="改变this指向方法"></a>改变this指向方法</h1><h2 id="1-call-方法-常用于继承"><a href="#1-call-方法-常用于继承" class="headerlink" title="1.call()方法    常用于继承"></a>1.call()方法    <em>常用于继承</em></h2><p>call(无数个参数);</p>
<ul>
<li>第一个参数：改变this指向</li>
<li>第二个参数：实参</li>
<li>使用之后会自动执行该函数，不适合用在定时器处理函数或者事件处理函数</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655455484583-0d0dd80b-d5c2-4752-9623-fdd9cf6b7e47.png" alt="img"> </p>
<h2 id="2-apply-方法"><a href="#2-apply-方法" class="headerlink" title="2.apply()方法"></a>2.apply()方法</h2><p>apply（两个参数）</p>
<ul>
<li>第一个参数：改变this指向</li>
<li>第二个参数：数组或者伪数组（里面为实参）</li>
<li>特点：使用时候会自动执行函数，不适合用在定时器处理函数或者事件处理函数</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655457205108-985cd7e9-ae97-4743-942d-6a12deb83123.png" alt="img"></p>
<h2 id="3-bind-方法"><a href="#3-bind-方法" class="headerlink" title="3.bind()方法"></a>3.bind()方法</h2><p>bind（无数个参数）</p>
<ul>
<li>第一个参数：改变this指向</li>
<li>第二个参数之后：实参</li>
<li>返回值为一个新的函数</li>
<li>使用的时候需要手动调用下返回的新函数（不会自动执行）</li>
<li>作用：改变事件处理函数或者定时器处理函数的this指向</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655457422671-0e2884fe-92a5-449b-9deb-e42a3cccafab.png" alt="img"></p>
<h2 id="三者区别"><a href="#三者区别" class="headerlink" title="三者区别"></a>三者区别</h2><p><strong>call、apply</strong>与<strong>bind</strong>区别：前两个可以自动执行，<strong>bind</strong>不会自动执行，需要手动调用</p>
<p><strong>call、bind</strong>与<strong>apply</strong>区别：前两个都有无数个参数，<strong>apply</strong>只有两个参数，而且第二个参数为**[数组]**</p>
<h1 id="浏览器页面相关方法和事件"><a href="#浏览器页面相关方法和事件" class="headerlink" title="浏览器页面相关方法和事件"></a>浏览器页面相关方法和事件</h1><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><ul>
<li><strong>location.assign(‘url地址’)</strong>  	记录浏览记录，有后退功能</li>
<li><strong>location.replace(‘url地址’)</strong>  	不记录浏览记录，没有后退功能</li>
<li><strong>location.reload()</strong>			刷新页面</li>
<li><strong>location.href &#x3D;  ‘’</strong>			跳转页面</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 记录浏览记录，可实现后退功能</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// location.assign(&#x27;http://www.baidu.com&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 不记录浏览记录，没有后退功能</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// location.replace(&#x27;http://www.baidu.com&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 刷新页面</span></span></span><br><span class="line"><span class="language-javascript">            location.<span class="title function_">reload</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="history实现页面前进-仿浏览器前进页面"><a href="#history实现页面前进-仿浏览器前进页面" class="headerlink" title="history实现页面前进    仿浏览器前进页面"></a>history实现页面前进    <em>仿浏览器前进页面</em></h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;60-发送短信案例.html&quot;</span>&gt;</span>点击我去往页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            history.<span class="title function_">forward</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// history.go(1); // 也可以实现前进跳转</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>点击a标签跳转页面再返回此时再次点击前进按钮则会实现页面跳转</strong></p>
<p><em>实现浏览器前进后退效果</em></p>
<h2 id="pageshow事件"><a href="#pageshow事件" class="headerlink" title="pageshow事件"></a>pageshow事件</h2><p>当点击a标签跳转后，再退回后不会再触发alert方法，通过<strong>pageshow</strong>事件即可解决</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http//www.baidu.com&quot;</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 点击链接跳转下一界面后再退回正常情况并不会触发alert</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// pageshow事件完美解决这个问题</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// pageshow添加给window.</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pageshow&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="number">11</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="offset-x2F-scroll-x2F-client系列"><a href="#offset-x2F-scroll-x2F-client系列" class="headerlink" title="offset&#x2F;scroll&#x2F;client系列"></a>offset&#x2F;scroll&#x2F;client系列</h1><h2 id="1-offset"><a href="#1-offset" class="headerlink" title="1.offset"></a>1.offset</h2><h3 id="offsetTop-x2F-offsetLeft"><a href="#offsetTop-x2F-offsetLeft" class="headerlink" title="offsetTop&#x2F;offsetLeft"></a>offsetTop&#x2F;offsetLeft</h3><p><strong>可以得到元素的偏移位置返回的不带单位的数值</strong></p>
<p><strong>它以带有定位的父亲为准</strong> <strong>如果有父亲或者父亲没有定位</strong> <strong>则以body为准</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655470123512-aac4c250-3062-47ae-b896-44f7bac6f187.png" alt="img"></p>
<h3 id="window-pageYoffset-页面卷去的高度"><a href="#window-pageYoffset-页面卷去的高度" class="headerlink" title="window.pageYoffset  页面卷去的高度"></a>window.pageYoffset  页面卷去的高度</h3><h3 id="offsetWidth-x2F-offsetHeight"><a href="#offsetWidth-x2F-offsetHeight" class="headerlink" title="offsetWidth&#x2F;offsetHeight"></a>offsetWidth&#x2F;offsetHeight</h3><p>可以得到元素大小 宽度和高度 是包含 <strong>padding + border + width;</strong></p>
<p><strong>与style的区别:</strong></p>
<ul>
<li><strong>offset</strong>可以得到任意样式表中的样式值(数字型)		<em>包含padding值</em></li>
<li><strong>style</strong>只能得到行内样式表中的样式值(字符串型)		<em>不包含padding值</em></li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654755515627-807871ff-e068-4970-b901-6d1a9d16eaae.png" alt="img"></p>
<h3 id="offsetX-x2F-offsetY"><a href="#offsetX-x2F-offsetY" class="headerlink" title="offsetX &#x2F; offsetY"></a>offsetX &#x2F; offsetY</h3><p>元素距其<strong>父元素</strong>的偏移坐标</p>
<h3 id="offsetParent"><a href="#offsetParent" class="headerlink" title="offsetParent"></a>offsetParent</h3><p>返回带有定位的父亲 否则返回的是<strong>body</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: purple;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">45px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.w</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: royalblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">15px</span> solid red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;w&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// offset系列</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.可以得到元素的偏移位置返回的不带单位的数值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(father.<span class="property">offsetTop</span>); <span class="comment">//距离</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(father.<span class="property">offsetLeft</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 它以带有定位的父亲为准 如果有父亲或者父亲没有定位 则以body为准</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">offsetLeft</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> w = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.w&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.可以得到元素大小 宽度和高度 是包含 padding + border + width;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(w.<span class="property">offsetWidth</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(w.<span class="property">offsetHeight</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.返回带有定位的父亲 否则返回的是body</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">offsetParent</span>); <span class="comment">// 返回带有定位的父亲 否则返回的是body</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">parentNode</span>); <span class="comment">//返回父亲 是最近一级的父亲 亲爸爸 不管父亲有没有定位</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-scroll"><a href="#2-scroll" class="headerlink" title="2.scroll"></a>2.scroll</h2><p><strong>scroll</strong>计算出的高度或者宽度涵盖了被折叠部分</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655191086306-4064c008-e9c4-48f1-850d-d0a8729aaa9a.png" alt="img"></p>
<ul>
<li>document.documentElement**.scroll**(0, 100);</li>
<li>document.documentElement**.scrollTo**(0, 100);</li>
<li>document.documentElement**.scrollBy**(0, 100);</li>
</ul>
<ol>
<li><strong>scrollTo</strong>是’到达’，**.scrollTo**(0, 100)是固定到达100，当你已经在100则无法再次执行</li>
<li><strong>scrollBy</strong>是’执行’，**.scrollBy**(0, 100)是每当点击一次则移动100，可重复执行</li>
<li><strong>scroll</strong>和<strong>scrollTo</strong>一样，没什么区别</li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655194792765-550de9e9-0ab5-44a2-b030-b185bcc2029c.png" alt="img"></p>
<ul>
<li><strong>scrollTop</strong>指的是“元素中的内容”超出“元素上边界”的那部分的高度。</li>
</ul>
<h2 id="3-client"><a href="#3-client" class="headerlink" title="3.client"></a>3.client</h2><p>最大的区别就是<strong>client</strong>		不包含边框</p>
<p>输出的高度&#x2F;宽度是可视内容的高度&#x2F;宽度  <em>（人眼看到的部分大小</em><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655188997507-ba126c1e-f1b9-4746-990c-13f599befabe.png" alt="img"></p>
<p>[**🔗🔗clientX、offsetX、screenX、pageX的区别🔗🔗**](<a href="https://blog.csdn.net/Serena_tz/article/details/113939879?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=clientx">https://blog.csdn.net/Serena_tz/article/details/113939879?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=clientx</a> screenx pagex offsetx &amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-1-113939879.142^v16^control,157^v14^control&amp;spm&#x3D;1018.2226.3001.4187)</p>
<h2 id="案例-‘获取鼠标在盒子内坐标’"><a href="#案例-‘获取鼠标在盒子内坐标’" class="headerlink" title="案例 ‘获取鼠标在盒子内坐标’"></a>案例 ‘获取鼠标在盒子内坐标’</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(e.pageX); 鼠标在页面的x，y坐标</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(e.pageY);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(box.offsetLeft); 盒子距离页面左边距离</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> x = e.<span class="property">pageX</span> - <span class="variable language_">this</span>.<span class="property">offsetLeft</span>; <span class="comment">// 鼠标在盒子内的x坐标</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> y = e.<span class="property">pageY</span> - <span class="variable language_">this</span>.<span class="property">offsetTop</span>; <span class="comment">// 鼠标在盒子内的y坐标</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;x坐标是&#x27;</span> + x + <span class="string">&#x27;y坐标是&#x27;</span> + y;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655274453803-b3d6b959-aa7e-41a9-bfac-55cfba4ead26.png" alt="img"></p>
<h1 id="封装一个动画函数"><a href="#封装一个动画函数" class="headerlink" title="封装一个动画函数"></a>封装一个动画函数</h1><ol>
<li>获得盒子当前位置</li>
<li>让盒子在当前位置加上1个移动距离</li>
<li>加一个结束定时器的条件</li>
<li>注意此元素需要添加定位,才能使用element.style.left</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params">obj, target, callback</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(callback); callback = function()&#123;&#125; 调用的时候callback()</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span></span><br><span class="line"><span class="language-javascript">    obj.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 步长值写道定时器里面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 把步长值改为整数 不要出现小数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var step = Math.ceil((target - obj.offsetLeft) / 10);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> step = (target - obj.<span class="property">offsetLeft</span>) / <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">        step = step &gt; <span class="number">0</span> ? <span class="title class_">Math</span>.<span class="title function_">ceil</span>(step) : <span class="title class_">Math</span>.<span class="title function_">floor</span>(step);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (obj.<span class="property">offsetLeft</span> == target) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//停止动画 停止定时器</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//回调函数写道定时器结束里面</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// if (callback) &#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     //调用函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     callback();</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">            callback &amp;&amp; <span class="title function_">callback</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 短路运算</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 把每次加一这个步长值改为慢慢变小的值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 步长公式：(目标值 - 现在的位置)/10</span></span></span><br><span class="line"><span class="language-javascript">        obj.<span class="property">style</span>.<span class="property">left</span> = obj.<span class="property">offsetLeft</span> + step + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">20</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="节流和防抖"><a href="#节流和防抖" class="headerlink" title="节流和防抖"></a>节流和防抖</h1><h2 id="1-节流"><a href="#1-节流" class="headerlink" title="1.节流"></a>1.节流</h2><p>节流就是指连续触发事件但是在 n 秒中只执行一次函数。节流会稀释函数的执行频率</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all <span class="number">0.5s</span> ease;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> index = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 开启节流阀</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (flag) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 关闭节流阀</span></span></span><br><span class="line"><span class="language-javascript">            flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            index = index + <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">            div.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;index&#125;</span>px)`</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">500</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-防抖"><a href="#2-防抖" class="headerlink" title="2.防抖"></a>2.防抖</h2><p>防抖就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。连续点击按钮只会重置500ms，只有最后一次点击时500ms后才会执行方法。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all <span class="number">0.5s</span> ease;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> index = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (timer !== <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearTimeout</span>(timer);</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            index = index + <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">            div.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;index&#125;</span>px)`</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">500</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="移动端事件"><a href="#移动端事件" class="headerlink" title="移动端事件"></a>移动端事件</h1><ul>
<li><strong>touchstart</strong>	<strong>点击事件</strong></li>
<li><strong>touchmove</strong>	<strong>拖动事件</strong></li>
<li><strong>touchend</strong>	<strong>松手事件</strong></li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655262416536-b2fb10c6-f036-44bd-8536-e9eff70439b8.png" alt="img"></p>
<p><strong>targetTouches[0]</strong> 就可以得到触摸dom元素的第一个手指的相关信息 比如手指的坐标</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655262506029-4dcf0ee5-7ca7-4340-8508-3e3c0cdecb1b.png" alt="img"></p>
<p><a href="https://blog.csdn.net/weixin_42349568/article/details/109240923?ops_request_misc=%7B%22request_id%22:%22165526231616782184615037%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165526231616782184615037&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-3-109240923-null-null.142%5Ev16%5Econtrol,157%5Ev14%5Econtrol&utm_term=touchend&spm=1018.2226.3001.4187"><strong>🔗🔗关于移动端手指触发事件blog🔗🔗</strong></a></p>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><ul>
<li>利用RegExp对象创建 正则表达式	<strong>var regexp &#x3D; new RegExp(&#x2F;123&#x2F;)</strong>   &#x2F;&#x2F;要求输入123</li>
<li>利用字面量 创建正则表达式	<strong>var rg &#x3D; &#x2F;123&#x2F;</strong></li>
<li>test 方法用来检测字符串是否符合正则表达式要求规范  <strong>console.log(rg.test(123))</strong>  &#x2F;&#x2F;true</li>
</ul>
<p>var  rag &#x3D; &#x2F;abc&#x2F;</p>
<p><strong>只要含有abc这个字符串返回的都是true</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655862362465-cdda7a6c-2767-45d7-9029-32ced1e49684.png" alt="img"></p>
<h2 id="边界符"><a href="#边界符" class="headerlink" title="边界符 ^ $"></a>边界符 ^ $</h2><p>var  reg&#x3D;&#x2F;^abc&#x2F;</p>
<p><strong>^ 以谁开始 $ 以谁结束</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655862463627-749e1009-51e9-4dff-b886-f8dabf372fb9.png" alt="img"></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655862479079-e04808cb-491d-4486-8165-83d9017eb079.png" alt="img"></p>
<h2 id="字符类："><a href="#字符类：" class="headerlink" title="字符类："></a>字符类：</h2><p>var  reg2&#x3D;&#x2F;[abc]&#x2F;;</p>
<p><strong>[   ] 表示有一系列字符可供选择 只是匹配其中一个就可</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655862591463-437eaba3-7cbe-4b48-88b1-1636590b2ee4.png" alt="img"></p>
<p>var  reg3&#x3D;&#x2F;^[abc]$&#x2F;</p>
<p><strong>三选一 只有a 或是 b 或是 c 这三个字母才会返回true</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655862693221-db58825a-3940-4a03-9f02-e46c02b144cc.png" alt="img"></p>
<p>var  reg4&#x3D;&#x2F;^[a-z]$&#x2F;</p>
<p><strong>26个英文字母任何 一 个小写字母返回true</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655862747987-423af08f-aff7-46f0-bf89-45b8cf433961.png" alt="img"></p>
<p><strong>字符组合：</strong></p>
<p>var  reg5&#x3D;&#x2F;^[a-zA-Z0-9_-]$&#x2F;</p>
<p><strong>26个英文字母(大小全含)任何一字母返回true</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655863000533-b4e6bbb0-07c0-464d-8f5d-eb76b4131a93.png" alt="img"></p>
<p><strong>取反 ^ :</strong></p>
<p>var  reg6&#x3D;&#x2F;^[^a-zA-Z0-9_-]$&#x2F;</p>
<p><strong>最里面的^表示取反 不能含有 a-zA-Z0-9_-</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655863217971-d16a8def-8df9-44ed-a619-18f78ab70f41.png" alt="img"></p>
<h2 id="量次符："><a href="#量次符：" class="headerlink" title="量次符："></a>量次符：</h2><p>用来设定某个模式出现的次数（简单理解就是让下面的a字符重复多少次）</p>
<p>var  reg7&#x3D;&#x2F;^a*$&#x2F;</p>
<p>*** 相当于 &gt;&#x3D;0 可以出现0次或多次**</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655863360901-ace1d8df-221a-4578-a2c7-d762240e4351.png" alt="img"></p>
<p>var  reg8&#x3D;&#x2F;^a+$&#x2F;</p>
<p><strong>+ 相当于 &gt;&#x3D;1 可以出现1次或多次</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655863443298-681e69fb-8398-4d0b-8d51-d29f90ad1f38.png" alt="img"></p>
<p>var  reg9&#x3D;&#x2F;^a?$&#x2F;</p>
<p><strong>? 相当于 1 || 0 ，可以出现1次或0次</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655863558575-4a3e9616-b0e8-4249-b6c7-33967c1d0b57.png" alt="img"></p>
<p>var  rmg&#x3D;&#x2F;^a{3}$&#x2F;</p>
<p><strong>{3} 就是重复3次</strong></p>
<p><em>在谁后面就代表前面的可以重复几次</em></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655863611825-e99b1895-f790-47b7-a48a-7385e7012241.png" alt="img"></p>
<p>var  rmg1&#x3D;&#x2F;^a{3,}$&#x2F;</p>
<p><strong>{3,} 大于等于3次</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655863671440-f010ae03-4fca-4c3c-b7ca-5fb7a57f9eeb.png" alt="img"></p>
<p>var  rmg2&#x3D;&#x2F;^a{3,6}$&#x2F;</p>
<p><strong>{3,6} 大于等于3次 并且小于等于6次</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655863748367-0c39e2e1-43bf-4695-960c-d23aa88997d2.png" alt="img"></p>
<p><strong>(  )代表分组</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655870767795-6539b2dd-4d5b-437a-bf2c-8d6adef59336.png" alt="img"></p>
<h2 id="统一化字符："><a href="#统一化字符：" class="headerlink" title="统一化字符："></a>统一化字符：</h2><ul>
<li><strong>\d</strong>  匹配0-9之间任一数字,相当于  <strong>[0-9]</strong></li>
<li><strong>\D</strong>  匹配所有0-9之外的字符,相当于  <strong>[^0-9]</strong></li>
<li><strong>\w</strong>  匹配任意的字母,数字和下划线,相当于  <strong>[A-Za-z0-9_]</strong></li>
<li><strong>\W</strong>  除所有字母,数字和下划线外的字符,相当于  <strong>[^A-Za-z0-9_]</strong></li>
<li><strong>\s</strong>  匹配空格(包含换行符 制表符 空格符) 相当于  <strong>[\t\r\n\v\f]</strong></li>
<li><strong>\S</strong>  匹配非空格字符,相当于  <strong>[^\t\r\n\v\f]</strong></li>
</ul>
<h2 id="正则表达式替换"><a href="#正则表达式替换" class="headerlink" title="正则表达式替换"></a>正则表达式替换</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">style</span>=<span class="string">&quot;resize: none;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 替换 replace</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var str = &#x27;andy和red&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var newStr = str.replace(&#x27;andy&#x27;, &#x27;body&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var newStr = str.replace(/andy/, &#x27;body&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(newStr);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;textarea&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            div.<span class="property">innerHTML</span> = text.<span class="property">value</span>.<span class="title function_">replace</span>(<span class="regexp">/操|gay|9/g</span>, <span class="string">&#x27;*&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// g  属于全局匹配</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// i  忽略大小写</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// gi 全局匹配+忽略大小写</span></span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>g    属于全局匹配</li>
<li>i     忽略大小写</li>
<li>gi  全局匹配+忽略大小写</li>
</ul>
<h2 id="中文编码范围-x2F-u4e00-u9fa5-x2F"><a href="#中文编码范围-x2F-u4e00-u9fa5-x2F" class="headerlink" title="中文编码范围   &#x2F;[\u4e00-\u9fa5]&#x2F;"></a>中文编码范围   &#x2F;[\u4e00-\u9fa5]&#x2F;</h2><p><strong>&#x2F;[\u4e00-\u9fa5]&#x2F;</strong>   中文编码范围\u4e00是一个unicode编码</p>
<h2 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2><ul>
<li>手机号:   <strong>&#x2F;^1[3|4|5|6|7|8|9]\d{9}$&#x2F;</strong></li>
<li>密码:   <strong>&#x2F;^[a-zA-Z0-9_-]{6,16}$&#x2F;</strong></li>
</ul>
<h1 id="BOM操作扩展"><a href="#BOM操作扩展" class="headerlink" title="BOM操作扩展"></a>BOM操作扩展</h1><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/d4d075ee9982467290c30398aa3eee59.png" alt="img"><br><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/4d2bfa28bf4148d987d27444373e4d19.png" alt="img"></p>
<h2 id="什么是BOM？"><a href="#什么是BOM？" class="headerlink" title="什么是BOM？"></a>什么是BOM？</h2><p>BOM<code>（Browser Object Model）</code>即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其顶级对象是 window，并且每个对象都提供了很多方法与属性</p>
<h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><p>window 对象给我们提供了一个 location 属性用于获取或设置窗体的 URL，并且可以用于解析 URL</p>
<table>
<thead>
<tr>
<th><strong>location对象属性</strong></th>
<th><strong>返回值</strong></th>
</tr>
</thead>
<tbody><tr>
<td>location.href</td>
<td>获取或设置整个url地址</td>
</tr>
<tr>
<td>location.host</td>
<td>返回主机(域名) <a href="http://www.baidu.com/">www.baidu.com</a></td>
</tr>
<tr>
<td>location.port</td>
<td>获取或设置整个url地址</td>
</tr>
<tr>
<td>location.pathname</td>
<td>返回路径</td>
</tr>
<tr>
<td>location.search</td>
<td>返回参数</td>
</tr>
<tr>
<td>location.hash</td>
<td>返回片段 #后面内容，常用于链接锚点</td>
</tr>
<tr>
<td>location.protocol</td>
<td>返回协议</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>location对象方法</strong></th>
<th><strong>返回值</strong></th>
</tr>
</thead>
<tbody><tr>
<td>location.assign()</td>
<td>跟href一样，可以跳转页面(也称为重定向页面)</td>
</tr>
<tr>
<td>location.replace()</td>
<td>替换当前页面，因为不记录历史，所以不能后退页面</td>
</tr>
<tr>
<td>location.reload()</td>
<td>重新加载页面，相当于刷新按钮或者f5 如果参数为true 强制刷新ctrl+f5</td>
</tr>
</tbody></table>
<hr>
<h3 id="点击按钮跳转页面案例"><a href="#点击按钮跳转页面案例" class="headerlink" title="点击按钮跳转页面案例:"></a>点击按钮跳转页面案例:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>location<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         location.<span class="property">href</span> = <span class="string">&#x27;https://blog.csdn.net/WYF857446152/article/details/124860285?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165595085816782391824458%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165595085816782391824458&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-124860285-null-null.142^v20^control,157^v15^new_3&amp;utm_term=bom%E6%93%8D%E4%BD%9C&amp;spm=1018.2226.3001.4187&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="location-search接收返回的参数实现数据交互案例："><a href="#location-search接收返回的参数实现数据交互案例：" class="headerlink" title="location.search接收返回的参数实现数据交互案例："></a>location.search接收返回的参数实现数据交互案例：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;64-index.html&quot;</span>&gt;</span></span><br><span class="line">        用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">search</span>); <span class="comment">// ?uname=andy</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.先去掉？ substr(&#x27;起始的位置&#x27;,截取几个字符);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> params = location.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>); <span class="comment">// uname=andy</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(params);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.利用等号把字符串分割为数组 split(&#x27;=&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> arr = params.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.把数据写进div中</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">innerHTML</span> = arr[<span class="number">1</span>] + <span class="string">&#x27;欢迎您!&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><p>navigator 对象包含有关浏览器的信息，它有很多属性，我们最常用的是 <code>userAgent</code>，该属性可以返回由客户机发送服务器的 <code>user-agent</code> 头部的值。</p>
<h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><p>window对象给我们提供了一个 history对象，与浏览器历史记录进行交互。该对象包含用户（在浏览器窗口中）访问过的URL。</p>
<table>
<thead>
<tr>
<th><strong>history对象方法</strong></th>
<th><strong>返回值</strong></th>
</tr>
</thead>
<tbody><tr>
<td>back()</td>
<td>可以后退功能</td>
</tr>
<tr>
<td>forward()</td>
<td>前进功能</td>
</tr>
<tr>
<td>go(参数)</td>
<td>前进后退功能 参数如果是1前进一个页面如果是-1后退一个页面</td>
</tr>
</tbody></table>
<h1 id="webstorag"><a href="#webstorag" class="headerlink" title="webstorag"></a>webstorag</h1><h2 id="会话存储之sessionStorage"><a href="#会话存储之sessionStorage" class="headerlink" title="会话存储之sessionStorage"></a>会话存储之sessionStorage</h2><p>用户上传的数据并不会传输到服务器而是保存在本地浏览器中*(浏览器历史记录原理)*</p>
<ul>
<li>sessionStorage.setItem(‘uname’, val);		<em>储存数据</em></li>
<li>sessionStorage.getItem(‘uname’);		<em>获取数据</em></li>
<li>sessionStorage.removeItem(‘uname’);	<em>删除数据</em></li>
<li>sessionStorage.clear( );					<em>清除所有数据</em></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;set&quot;</span>&gt;</span>储存数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;get&quot;</span>&gt;</span>获取数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;remove&quot;</span>&gt;</span>删除数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;del&quot;</span>&gt;</span>清空所有数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ipt = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> set = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.set&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> get = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.get&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> remove = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.remove&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> del = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.del&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        set.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 当我们点击之后 就可以把表单里面的值存储起来</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> val = ipt.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            sessionStorage.<span class="title function_">setItem</span>(<span class="string">&#x27;uname&#x27;</span>, val);</span></span><br><span class="line"><span class="language-javascript">            sessionStorage.<span class="title function_">setItem</span>(<span class="string">&#x27;pwd&#x27;</span>, val);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        get.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 当我们点击之后 就可以把表单里面的值获取过来</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(sessionStorage.<span class="title function_">getItem</span>(<span class="string">&#x27;uname&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        remove.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 当我们点击之后 就可以把表单里面的值删除</span></span></span><br><span class="line"><span class="language-javascript">            sessionStorage.<span class="title function_">removeItem</span>(<span class="string">&#x27;uname&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        del.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 当我们点击之后 清除所有数据</span></span></span><br><span class="line"><span class="language-javascript">            sessionStorage.<span class="title function_">clear</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="本地存储之localStorage"><a href="#本地存储之localStorage" class="headerlink" title="本地存储之localStorage"></a>本地存储之localStorage</h2><p>localStorage.setItem(‘username’, val)			<em>储存数据</em></p>
<p>localStorage.getItem(‘username’)				<em>获取数据</em></p>
<p>localStorage.removeItem(‘username’)		<em>删除数据</em></p>
<p>localStorage.clear( )							<em>清除所有数据</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;set&quot;</span>&gt;</span>储存数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;get&quot;</span>&gt;</span>获取数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;remove&quot;</span>&gt;</span>删除数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;del&quot;</span>&gt;</span>清空所有数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ipt = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> set = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.set&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> get = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.get&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> remove = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.remove&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> del = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.del&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        set.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> val = ipt.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;username&#x27;</span>, val);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        get.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        remove.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        del.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">localStorage</span>.<span class="title function_">clear</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="webStorage-和-cookie-的区别？"><a href="#webStorage-和-cookie-的区别？" class="headerlink" title="webStorage 和 cookie 的区别？"></a>webStorage 和 cookie 的区别？</h2><h3 id="共同点："><a href="#共同点：" class="headerlink" title="共同点："></a>共同点：</h3><p>都是保存在浏览器端，且同源的。<br>cookie:存储在用户本地终端上的数据。数据存储空间小。<br>localStorage:没有时间限制的数据存储，数据存储空间大<br>sessionStorage:针对一个 session 的数据存储,当用户关  闭浏览器窗口后，数据会被删除。</p>
<h3 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h3><p><strong>cookie：</strong>数据始终在同源的http请求中携带。cookie数据不能超  过4k，同时因为每次http请求都会携带cookie，所以cookie只适  合保存很小的数据。</p>
<p><strong>sessionStorage和localStorage</strong>不会自动把数据发给服务器，仅在本地保存。sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</p>
<ol>
<li><strong>大小不同</strong><br>cookie：数据不能超过4k。<br>sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</li>
<li><strong>有效期不同</strong><br>cookie:可设置过期时间，直到设置时间到达之前  ，浏览器窗口关闭时也保留数据。<br>localStorage:始终有效，即使浏览器窗口关闭。<br>sessionStorage:当浏览器窗口关闭前有效，不能持久保持</li>
<li><strong>作用域不同</strong><br>cookie:所有同源窗口中都是共享的。<br>localStorage:在所有同源窗口中都是共享的。<br>sessionStorage:不在不同的浏览器窗口中共享，即使是同一个  页面；</li>
</ol>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>BOM</tag>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>基于express制作服务器</title>
    <url>/found404.io/2022/06/30/Express%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="基于express制作服务器"><a href="#基于express制作服务器" class="headerlink" title="基于express制作服务器"></a>基于express制作服务器</h1><h2 id="安装必要的包"><a href="#安装必要的包" class="headerlink" title="安装必要的包"></a>安装必要的包</h2><ul>
<li><code>npm i express</code></li>
<li>创建<code>app.js</code>文件</li>
<li>创建<code>router.js</code>路由文件</li>
</ul>
<span id="more"></span>

<h2 id="路由文件"><a href="#路由文件" class="headerlink" title="路由文件"></a>路由文件</h2><p><strong>router.js文件</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> rouder =express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">rouder.<span class="title function_">get</span>(<span class="string">&#x27;/user/list&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>:<span class="number">200</span>,</span><br><span class="line">        <span class="attr">data</span>:[</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">01</span>,<span class="attr">title</span>:<span class="string">&#x27;demo1&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">02</span>,<span class="attr">title</span>:<span class="string">&#x27;demo2&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">03</span>,<span class="attr">title</span>:<span class="string">&#x27;demo3&#x27;</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">rouder.<span class="title function_">post</span>(<span class="string">&#x27;/user/add&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>:<span class="number">200</span>,</span><br><span class="line">        <span class="attr">success</span>:<span class="string">&#x27;post发送成功&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">rouder.<span class="title function_">post</span>(<span class="string">&#x27;/user/posform&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> query = req.<span class="property">body</span> </span><br><span class="line">    <span class="comment">//post请求返回的数据使用body接收，但是也要配置全局中间件对表单数据进行解析</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>:<span class="number">200</span>,</span><br><span class="line">        <span class="attr">success</span>:<span class="string">&#x27;post发送成功&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:query</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露路由模块</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = rouder;</span><br></pre></td></tr></table></figure>

<h2 id="app-js文件"><a href="#app-js文件" class="headerlink" title="app.js文件"></a>app.js文件</h2><h3 id="内置的表单转换中间件"><a href="#内置的表单转换中间件" class="headerlink" title="内置的表单转换中间件"></a>内置的表单转换中间件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置中间件</span></span><br><span class="line"><span class="comment">// 通过express.json()解析表单中的json格式数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"><span class="comment">// 通过express.urlencoded()解析表单中的url-encoded格式的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br></pre></td></tr></table></figure>

<h3 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.导入解析表单数据的中间件</span></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="comment">// 2.使用app.use()注册中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(parser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br></pre></td></tr></table></figure>

<h3 id="app文件"><a href="#app文件" class="headerlink" title="app文件"></a>app文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> router=<span class="built_in">require</span>(<span class="string">&#x27;./02-路由模块&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.导入解析表单数据的中间件</span></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="comment">// 2.使用app.use()注册中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(parser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载静态资源</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, express.<span class="title function_">static</span>(__dirname + <span class="string">&#x27;/public&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决跨域问题---------------------------------------------------</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type,Content-Length,Authorization,Origin,Accept,X-Requested-With&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;GET,POST,OPTIONS.PUT,PATCH,DELETE&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;X-Powered-By&#x27;</span>, <span class="string">&#x27;3.2.1&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// --------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用这个路由全局中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Example app listening on port http://localhost:8080`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="静态资源文件index-html"><a href="#静态资源文件index-html" class="headerlink" title="静态资源文件index.html"></a>静态资源文件index.html</h2><blockquote>
<p>存放在public文件夹下</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello Express!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;get&quot;</span>&gt;</span>GET请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;post&quot;</span>&gt;</span>POST请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user/posform&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">id</span>=<span class="string">&quot;f1&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;.get&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&quot;http://192.168.210.146:8080/user/posform/user/list&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;.post&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&quot;http://192.168.210.146:8080/user/posform/user/add&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取页面已有的一个form表单</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#f1&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 第二种阻止表单默认提交行为(跟第一种一样)</span></span></span><br><span class="line"><span class="language-javascript">            e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 利用serialize()获取表单中的所有数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 前提是被获取表单必须有name属性</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// serializeArray()也可以获取表单中的数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> shujv = $(<span class="variable language_">this</span>).<span class="title function_">serialize</span>();</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">post</span>(<span class="string">&#x27;http://192.168.210.146:8080/user/posform&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                shujv, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用CORS解决跨域问题"><a href="#使用CORS解决跨域问题" class="headerlink" title="使用CORS解决跨域问题"></a>使用CORS解决跨域问题</h2><blockquote>
<p>可以使用CORS这个第三方包解决跨域问题，其实还有另一种解决方案JSONP，但后者仅支持GET请求</p>
</blockquote>
<ol>
<li>运行<code>npm install cors</code>安装中间件</li>
<li>使用<code>const cors = require(&#39;cors&#39;)</code>导入中间件</li>
<li>在路由之前调用<code>app.use(cors())</code>配置中间件</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> router=<span class="built_in">require</span>(<span class="string">&#x27;./02-路由模块&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.导入解析表单数据的中间件</span></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="comment">// 2.使用app.use()注册中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(parser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决跨域---------------------------------------------------</span></span><br><span class="line"><span class="comment">// 在路由之前配置cors</span></span><br><span class="line"><span class="keyword">const</span> cors=<span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br><span class="line"><span class="comment">// ----------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载静态资源</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, express.<span class="title function_">static</span>(__dirname + <span class="string">&#x27;/public&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用这个路由全局中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Example app listening on port http://localhost:8080`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>node.js</category>
      </categories>
      <tags>
        <tag>node.js</tag>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title>React中阻止冒泡</title>
    <url>/found404.io/2022/08/26/React%E4%B8%AD%E9%98%BB%E6%AD%A2%E5%86%92%E6%B3%A1/</url>
    <content><![CDATA[<h1 id="React中阻止冒泡"><a href="#React中阻止冒泡" class="headerlink" title="React中阻止冒泡"></a>React中阻止冒泡</h1><p>原因：在制作一个关于日历组件的时候，遇到一个bug😥,点击input框让日历显示，点击日历以外的区域日历框隐藏。但是无效！且有闪烁bug！</p>
<blockquote>
<p>原本的思路是利用获取焦点失去焦点实现，点击input获取焦点显示日历框，失去焦点后再隐藏日历框。</p>
<p>但是!  日历框中有切换月份的按钮，当点击按钮时会失去焦点，又再次触发失去焦点的事件，有闪烁bug。如图：</p>
</blockquote>
<span id="more"></span>

<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220826223515130.png" alt="image-20220826223515130"></p>
<p>所以我就给div添加了<code>tabIndex=&quot;-1&quot;</code>使div也可以添加获取焦点失去焦点方法。为最外层的div添加click事件获取焦点显示日历盒子，但是当点击日历盒子内部的标签后会依次触发<span style="color:red">失去焦点，获取焦点</span>事件，形成闪烁(我的显示与隐藏是提前写好的动画类名)；</p>
<p>以上就是我最初尝试的方法一，无效。后来想到可以利用点击html触发隐藏日历盒子的方法</p>
<blockquote>
<p>为document添加点击事件，</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 点击除去日历以外的部分隐藏日历</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">onclick</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">setShow</span>(<span class="literal">false</span>) <span class="comment">// 隐藏日历盒子</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,[])<span class="comment">//仅仅在第一次return后触发</span></span><br></pre></td></tr></table></figure>

<p>但是，如果不在点击div显示日历盒子的方法内添加阻止冒泡，当点击日历盒子内的任何地方，都会冒泡到document上触发隐藏盒子的方法；所以就要利用阻止冒泡！</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// div获取焦点</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">divFocus</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="property">nativeEvent</span>.<span class="title function_">stopImmediatePropagation</span>();</span><br><span class="line">    <span class="title function_">setFocus</span>(<span class="literal">true</span>) <span class="comment">// 设置触发div后的样式为开启</span></span><br><span class="line">    <span class="title function_">setShow</span>(<span class="literal">true</span>) <span class="comment">// 设置日历盒子显示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时，点击日历盒子以外的地方就会将日历盒子隐藏！😋</p>
<p><a href="https://blog.csdn.net/w799766/article/details/82591372?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166152398716782184695484%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166152398716782184695484&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-82591372-null-null.142%5Ev42%5Epc_ran_alice,185%5Ev2%5Econtrol&utm_term=react%20%E9%98%BB%E6%AD%A2%E5%86%92%E6%B3%A1&spm=1018.2226.3001.4187">参考帖子(力推)</a></p>
]]></content>
      <categories>
        <category>框架</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>框架</tag>
        <tag>阻止冒泡行为</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js</title>
    <url>/found404.io/2022/06/30/Node-js/</url>
    <content><![CDATA[<h1 id="什么是Node-js"><a href="#什么是Node-js" class="headerlink" title="什么是Node.js"></a>什么是Node.js</h1><p><strong>Node.js</strong>是一个基于Chrome V8引擎的JavaScript运行环境</p>
<h2 id="Node-js中的JavaScript运行环境"><a href="#Node-js中的JavaScript运行环境" class="headerlink" title="Node.js中的JavaScript运行环境"></a>Node.js中的JavaScript运行环境</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655822357450-119a84ee-f87e-471f-adeb-96b9c664695e.png" alt="img"></p>
<p>注意：</p>
<ol>
<li>浏览器是JavaScript的前端运行环境</li>
<li>Node.js是JavaScript的后端运行环境</li>
<li>Node.js中无法调用DOM和BOM等浏览器内置API</li>
</ol>
<span id="more"></span>

<h2 id="Node-js框架"><a href="#Node-js框架" class="headerlink" title="Node.js框架"></a>Node.js框架</h2><p>Node.js作为-个JavaScript的运行环境,仅仅提供了基础的功能和API。然而，基于Node.js提供的这些基础能，很多强大</p>
<p>的工具和框架如雨后春笋，层出不穷,所以学会了Node.js ，可以让前端程序员胜任更多的工作和岗位:</p>
<p>①基于Express框架(<a href="http://www.expressjs.com.cn/">http://www.expressjs.com.cn/</a>) ，可以快速构建Web应用</p>
<p>②基于Electron框架(<a href="https://electronjs.org/">https://electronjs.org/</a>) , 可以构建跨平台的桌面应用</p>
<p>③基于restify框架<a href="http://restify.com/">http://restify.com/</a>) ，可以快速构建API接口项目</p>
<p>④读写和操作数据库、创建实用的命令行工具辅助前端开发、etc..</p>
<h1 id="关于终端"><a href="#关于终端" class="headerlink" title="关于终端"></a>关于终端</h1><p>转为开发人员设计，用于实现人机交互的一种方式。</p>
<ul>
<li>win+r 打开运行输入cmd打开终端</li>
<li>在文件路径中输入cmd打开终端</li>
<li>按住shift+右键有一个powershell终端</li>
</ul>
<p><strong>常用的终端命令：</strong></p>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">node -v</td>
<td align="center">查看node.js版本</td>
</tr>
<tr>
<td align="center">cd  &#x2F;</td>
<td align="center">进入根目录</td>
</tr>
<tr>
<td align="center">cd ..</td>
<td align="center">去到上一层目录</td>
</tr>
<tr>
<td align="center">f:</td>
<td align="center">进入F盘</td>
</tr>
<tr>
<td align="center">cls</td>
<td align="center">清空终端</td>
</tr>
<tr>
<td align="center">mkdir 文件名</td>
<td align="center">新建文件夹</td>
</tr>
</tbody></table>
<p><strong>终端快捷键：</strong></p>
<ol>
<li><strong>使用↑键可以快速定位到上一次执行的命令</strong></li>
<li><strong>使用tab键能够快速补全路径</strong></li>
<li><strong>使用esc键能够快速清空当前输入的命令</strong></li>
</ol>
<h1 id="fs文件系统模块"><a href="#fs文件系统模块" class="headerlink" title="fs文件系统模块"></a>fs文件系统模块</h1><p>fs模块是Node.js官方提供的，用来操作文件的模块，它提供了一系列的方法和属性。用来满足用户对文件的操作需求。</p>
<p>例如：</p>
<ul>
<li>**fs.readFile( )**方法，用来读取指定文件中的内容</li>
<li>**fs.writeFile( )**方法，用来向指定文件中写入内容</li>
</ul>
<p>如果在javaScript代码中，使用fs模块来操作文件，则需要使用如下方式导入他：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655904379652-fb60eeb1-f9a9-4703-864e-e83eea12097f.png" alt="img"></p>
<h2 id="fs-readFile-的语法格式-读取文件内容"><a href="#fs-readFile-的语法格式-读取文件内容" class="headerlink" title="fs.readFile()的语法格式      读取文件内容"></a>fs.readFile()的语法格式      <em>读取文件内容</em></h2><p>使用fs.readFile()方法，可以读取指定文件中的内容，语法格式如下：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/a205835e3c0951ef.png" alt="png"></p>
<p>参数解读：</p>
<ul>
<li>参数1：<strong>必选</strong>参数，字符串，表示文件的路径。</li>
<li>参数2：可选参数，表示以什么<strong>编码格式</strong>来读取文件。</li>
<li>参数3：<strong>必选</strong>参数，文件读取完成后，通过回调函数拿到读取的结果。</li>
</ul>
<p>示例代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入fs模块  来操作文件</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 调用fs.readFile()方法读取文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数1：读取文件的存放路径</span></span><br><span class="line"><span class="comment">// 参数2：读取文件时候采用的编码格式 一般默认指定utf8</span></span><br><span class="line"><span class="comment">// 参数3：回调函数，拿到读取失败和成功的结果 err dataStr</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./files/11.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, dataStr</span>) &#123;</span><br><span class="line">    <span class="comment">// 2.1 打印失败的结果</span></span><br><span class="line">    <span class="comment">//如果读取成功，则err的值为null</span></span><br><span class="line">    <span class="comment">//如果读取失败，则err的值为错误对象 dataStr的值为undefined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------&#x27;</span>);</span><br><span class="line">    <span class="comment">// 2.2 打印成功的结果</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(dataStr);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>成功：</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/e41f9d8c61cbe03b.png" alt="png"></p>
<p><strong>失败：</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/58cc12468873bbe8.png" alt="png"></p>
<p>优化写法：</p>
<blockquote>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1a6b2b72ed2946a8.png" alt="png"></p>
</blockquote>
<h2 id="fs-writeFile-的语法格式-写入文件内容"><a href="#fs-writeFile-的语法格式-写入文件内容" class="headerlink" title="fs.writeFile( )的语法格式      写入文件内容"></a>fs.writeFile( )的语法格式      <em>写入文件内容</em></h2><p>使用fs.writeFile()方法，可以向指定文件中写入内容。语法格式如下：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/adf82be76daf111c.png" alt="png"></p>
<p>参数解读：</p>
<ul>
<li>参数1：<strong>必选</strong>参数，指定一个文件路径的字符串，表示文件的存放路径。</li>
<li>参数2：<strong>必选</strong>参数，表示要写入的内容。</li>
<li>参数3：可选参数，表示以什么格式写入文件内容，默认utf8。</li>
<li>参数4：<strong>必选</strong>参数，文件写入完成后的回调函数。</li>
</ul>
<p>代码示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入fs文件系统模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用fs.writeFile()方法，写入文件内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//参数1：表示文件的存放路径</span></span><br><span class="line"><span class="comment">//参数2：表示要写入的内容</span></span><br><span class="line"><span class="comment">//参数3：省略</span></span><br><span class="line"><span class="comment">//参数4：回调函数</span></span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;f:/files/2.txt&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="comment">// 2.1如果文件写入成功，则err的值等于null</span></span><br><span class="line">    <span class="comment">// 2.2如果文件写入失败，则err的值等于一个错误对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>优化写法：</p>
<blockquote>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/edd1798ffc5eec30.png" alt="png"></p>
</blockquote>
<h2 id="dirname解决路径拼接错误"><a href="#dirname解决路径拼接错误" class="headerlink" title="__dirname解决路径拼接错误"></a>__dirname解决路径拼接错误</h2><p>有时候出现路径拼接错误是因为提供了.&#x2F;或者..&#x2F;开头的相对路径导致</p>
<blockquote>
<p>解决方法:</p>
<ul>
<li>提供一个完整路径</li>
<li>但是移植性差,不利用代码维护</li>
<li>使用__dirname</li>
<li>__dirname代表的是当前目录路径</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(__dirname + <span class="string">&#x27;/files/2.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, dataStr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取失败&#x27;</span> + err.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取成功&#x27;</span> + dataStr);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="path路径模块"><a href="#path路径模块" class="headerlink" title="path路径模块"></a>path路径模块</h1><blockquote>
<p><strong>path模块</strong>是Node.js官方提供的,用来<strong>处理路径</strong>的模块.它提供了一系列的方法和属性,用来满足用户对路径的处理需求.</p>
<p>例如:</p>
<ul>
<li>path.join()方法,用来<strong>将多个路径片段拼接成一个完整的路径字符串</strong></li>
<li>path.basename()方法,用来从路径字符串中,将文件名解析出来</li>
</ul>
</blockquote>
<p>如果要在JavaScript代码中使用path模块来处理路径,则需要使用如下方式导入他:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="path-join-的语法格式"><a href="#path-join-的语法格式" class="headerlink" title="path.join()的语法格式"></a>path.join()的语法格式</h2><p>使用path.join()方法,可以把多个路径片段拼接为完整的路径字符串,语法格式如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.<span class="title function_">join</span>([...paths])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>参数解读:</p>
<ul>
<li>..paths&lt; string &gt;路径片段的序列</li>
<li>返回值:&lt; string &gt;</li>
</ul>
</blockquote>
<p>代码示例:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/2883715f9505b5a9.png" alt="png"></p>
<h2 id="path-basename-的语法格式"><a href="#path-basename-的语法格式" class="headerlink" title="path.basename()的语法格式"></a>path.basename()的语法格式</h2><p>使用path.basename()方法,可以获取路径中的最后一部分,经常通过这个方法获取路径中的文件名,语法格式如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.<span class="title function_">basename</span>(path[,ext])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>参数解读:</p>
<ul>
<li>path<code>&lt;string&gt;</code>必选参数,表示一个路径的字符串</li>
<li>ext<code>&lt;string&gt;</code>可选参数,表示文件扩展名</li>
<li>返回:<code>&lt;string&gt;</code>表示路径中的最后一部分</li>
</ul>
</blockquote>
<p>示例代码：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/e6b7240594ea3cf6.png" alt="png"></p>
<h2 id="path-extname-代码示例"><a href="#path-extname-代码示例" class="headerlink" title="path.extname()代码示例"></a>path.extname()代码示例</h2><blockquote>
<p>使用path.extname()方法，可以获取路径中的扩展名部分</p>
</blockquote>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/6f381844b033d682.png" alt="png"></p>
<h2 id="path-resolve-‘-x2F-a-js’"><a href="#path-resolve-‘-x2F-a-js’" class="headerlink" title="path.resolve(‘.&#x2F;a.js’)"></a>path.resolve(‘.&#x2F;a.js’)</h2><blockquote>
<p>可以将相对路径变成绝对路径</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.<span class="title function_">resolve</span>(<span class="string">&#x27;./a.js&#x27;</span>);  <span class="comment">//返回值是一个绝对路径</span></span><br></pre></td></tr></table></figure>

<h1 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h1><blockquote>
<p>什么是客户端？什么是服务器？</p>
<ol>
<li>在网络节点中，负责消耗资源的电脑，叫做<strong>客户端</strong></li>
<li><u>负责对外提供网络资源的电脑</u>，叫做<strong>服务器</strong></li>
</ol>
</blockquote>
<p>http模块是Node.js官方提供的，用来创建web服务器的模块，通过http模块提供的http.createServer()方法，就能方便把一台普通的电脑，变成一台web服务器，从而对外提供web资源服务。</p>
<p>如果希望使用http模块创建Web服务器，则需要导入他：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="进一步理解http模块的作用"><a href="#进一步理解http模块的作用" class="headerlink" title="进一步理解http模块的作用"></a>进一步理解http模块的作用</h2><blockquote>
<p>服务器和普通电脑的区别在于，服务器上安装了web服务器插件。例如：IIS，Apache等。通过安装这些服务器软件，就能把一台普通电脑变成一台web服务器。</p>
</blockquote>
<blockquote>
<p>在node.js中我们不需要使用IIS、Apache等这些第三方web服务器软件，因为我们可以基于Node.js提供的http模块，通过几行代码就能轻松手写一个服务器软件，从而对外提供web服务。</p>
</blockquote>
<h2 id="服务器相关概念"><a href="#服务器相关概念" class="headerlink" title="服务器相关概念"></a>服务器相关概念</h2><h3 id="1-IP地址"><a href="#1-IP地址" class="headerlink" title="1.IP地址"></a>1.IP地址</h3><p>IP地址就是互联网上每台计算机的唯-地址,因此IP地址具有唯一性。 如果把“个人电脑”比作”-台电话”，那么”IP地址”就相当于“电话号码”，只有在知道对方IP地址的前提下，才能与对应的电脑之间进行数据通信。</p>
<p>IP地址的格式:通常用”点分十进制”表示成(a.b.c.d) 的形式，其中, a,b,c,d 都是0~255之间的十进制整数。例如:用点分十进表示的IP地址(192.168.1.1)</p>
<p><strong>注意：</strong></p>
<ol>
<li>互联网中每台Web服务器，都有自己的IP地址，例如:大家可以在Windows的终端中运行ping www baidu.com命令,即可查看到百度服务器的IP地址。</li>
<li>在开发期间，自己的电脑既是一台服务器, 也是-个客户端，为了方便测试，可以在自己的浏览器中输入127.0.0.1 这个IP地址,就能把自己的电脑当做一台服务器进行访问了.</li>
</ol>
<h3 id="2-域名和域名服务器"><a href="#2-域名和域名服务器" class="headerlink" title="2.域名和域名服务器"></a>2.域名和域名服务器</h3><p>尽管IP地址能够唯-地标记网络上的计算机，但IP地址是一长串数字,不直观，而且不便于记忆，于是人们又发明了另一套字符型的地址方案，即所谓的域名(Domain Name)地址</p>
<p>IP地址和域名是一对应的关系， 这份对应关系存放在一种叫做域名服务器(DNS, Domain name server)的电脑中。使用者只需通过好记的域名访问对应的服务器即可，对应的转换工作由域名服务器实现。因此，域名服务器就是提供IP地址和域名之间的转换服务的服务器。</p>
<p><strong>注意：</strong></p>
<ol>
<li>单纯使用IP地址，互联网中的电脑也能够正常工作。但是有了域名的加持，能让互联网的世界变得更加方便。</li>
<li>在开发测试期间，<strong>127.0.0.1</strong> 对应的域名是<strong>localhost</strong>,它们都代表我们自己的这台电脑，在使用效果上没有任何区别。</li>
</ol>
<h3 id="3-端口号"><a href="#3-端口号" class="headerlink" title="3.端口号"></a>3.端口号</h3><p>计算机中的端口号,就好像是现实生活中的门牌号一样。 通过门牌号,外卖小哥可以在整栋大楼众多的房间中，准确把外卖送到你的手中。<br>同样的道理，在一台电脑中,可以运行成百上千个web服务。每个web服务都对应-个唯的端口号. 客户端发送过来的网络请求,通过端口号,可以被准确地交给<strong>对应的web服务</strong>进行处理。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220628214815281.png" alt="image-20220628214815281"></p>
<p><strong>注意：</strong></p>
<ol>
<li>每个端口号不能同时被多个web服务器占用</li>
<li>在实际运用中URL中的80端口可以被省略</li>
</ol>
<h2 id="创建最基本的web服务器"><a href="#创建最基本的web服务器" class="headerlink" title="创建最基本的web服务器"></a>创建最基本的web服务器</h2><p><strong>创建web服务器的基本步骤</strong></p>
<blockquote>
<ol>
<li>导入http模块</li>
<li>创建web服务器实例</li>
<li>为服务器实例绑定<strong>require</strong>事件，<strong>监听客户端的请求</strong></li>
<li>启动服务器</li>
</ol>
</blockquote>
<h3 id="步骤1-导入http模块"><a href="#步骤1-导入http模块" class="headerlink" title="步骤1-导入http模块"></a>步骤1-导入http模块</h3><p>如果希望在自己电脑上创建一个web服务器，从而对外提供web服务，则需要导入http模块：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="步骤2-创建web服务器实例"><a href="#步骤2-创建web服务器实例" class="headerlink" title="步骤2-创建web服务器实例"></a>步骤2-创建web服务器实例</h3><p>调用**http.createServer()**方法，即可快速创建一个web服务器实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>();</span><br></pre></td></tr></table></figure>

<h3 id="步骤3-为服务器实例绑定request事件"><a href="#步骤3-为服务器实例绑定request事件" class="headerlink" title="步骤3-为服务器实例绑定request事件"></a>步骤3-为服务器实例绑定request事件</h3><p>为服务器实例绑定request事件，即可监听客户端发送过来的网络请求：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用服务器实例的.on()方法，为服务器绑定一个request事件</span></span><br><span class="line">sever.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 只要有客户端来请求我们的服务器，就会触发request事件，从而调用这个事件处理函数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Someone visit our web server&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="req请求对象"><a href="#req请求对象" class="headerlink" title="req请求对象"></a>req请求对象</h4><p>只要服务器接收了客户端的请求，就会调用server.on()为服务器绑定的request事件处理函数。如果想在事件处理函数中，访问与客户端相关的<strong>数据</strong>或者<strong>属性</strong>，就可以使用如下方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="function">(<span class="params">req</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// req 是请求对象，它包含了与客户端相关的数据和属性，例如：</span></span><br><span class="line">    <span class="comment">// req.url 是客户端请求的url地址</span></span><br><span class="line">    <span class="comment">// req.method 是客户端的method请求类型</span></span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">`Your request url is <span class="subst">$&#123;req.url&#125;</span>,and request method is <span class="subst">$&#123;req.method&#125;</span>`</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="res响应对象"><a href="#res响应对象" class="headerlink" title="res响应对象"></a>res响应对象</h4><p>在服务器的request使事件处理函数中，如果想访问与服务器相关的<strong>数据</strong>或<strong>属性</strong>，可以使用如下方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//req是请求对象，包含了与客户端相关的数据和属性</span></span><br><span class="line">    <span class="comment">// req.url是客户端请求的url地址</span></span><br><span class="line">    <span class="keyword">const</span> url = req.<span class="property">url</span>;</span><br><span class="line">    <span class="comment">// req.method是客户端请求的method类型</span></span><br><span class="line">    <span class="keyword">const</span> method = req.<span class="property">method</span></span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">`Your request url is <span class="subst">$&#123;url&#125;</span>,and request method is <span class="subst">$&#123;method&#125;</span>`</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">    <span class="comment">// 调用res.end()方法向客户端响应一些内容</span></span><br><span class="line">    res.<span class="title function_">end</span>(str);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="解决中文乱码问题"><a href="#解决中文乱码问题" class="headerlink" title="解决中文乱码问题"></a>解决中文乱码问题</h4><p>当调用res.end()方法，向客户端发送中文内容时候，就会出现乱码问题，此时，需要手动设置内容的编码格式：</p>
<p><code>res.setHeader(&#39;Content-Type&#39;, &#39;text/html;charset=utf-8&#39;);</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 发送内容包含中文</span></span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">`你请求的url地址是<span class="subst">$&#123;req.url&#125;</span>,请求的method类型是<span class="subst">$&#123;req.method&#125;</span>`</span>;</span><br><span class="line">    <span class="comment">// 调用res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/html;charset=utf-8&#x27;)方法</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">    <span class="comment">// 调用res.end()方法向客户端响应一些内容</span></span><br><span class="line">    res.<span class="title function_">end</span>(str);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="步骤4-启动服务器"><a href="#步骤4-启动服务器" class="headerlink" title="步骤4-启动服务器"></a>步骤4-启动服务器</h3><p>调用服务器实例的.listen()方法，即可启动当前的web服务器实例:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用server.listen(端口号，callback回调函数)方法，即可启动web服务器</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http server running at http//127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="根据不同的url相应不同的html内容"><a href="#根据不同的url相应不同的html内容" class="headerlink" title="根据不同的url相应不同的html内容"></a>根据不同的url相应不同的html内容</h2><p><strong>核心实现步骤：</strong></p>
<ol>
<li>获取<strong>请求的url地址</strong></li>
<li>设置<strong>默认的响应内容</strong>为<u>404 Not found</u></li>
<li>判断用户请求的是否为**&#x2F;<strong>或</strong>&#x2F;index.html**首页</li>
<li>判断用户请求的是否为**&#x2F;about.html**关于页面</li>
<li>设置<strong>Content-Type响应头</strong>,防止中文乱码</li>
<li>使用**res.end( )**把内容响应给客户端</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 获取请求的url地址</span></span><br><span class="line">    <span class="keyword">const</span> url = req.<span class="property">url</span>;</span><br><span class="line">    <span class="comment">// 2. 设置默认的响应内容为&lt;u&gt;404 Not found&lt;/u&gt;</span></span><br><span class="line">    <span class="keyword">let</span> content = <span class="string">`&lt;h1&gt;404 Not Found&lt;/h1&gt;`</span>;</span><br><span class="line">    <span class="comment">// 3. 判断用户请求的是否为/或/index.html首页</span></span><br><span class="line">    <span class="comment">// 4. 判断用户请求的是否为/about.html关于页面</span></span><br><span class="line">    <span class="keyword">if</span> (url === <span class="string">&#x27;/&#x27;</span> || url === <span class="string">&#x27;/index.html&#x27;</span>) &#123;</span><br><span class="line">        content = <span class="string">`&lt;h1&gt;首页&lt;/h1&gt;`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">&#x27;/about.html&#x27;</span>) &#123;</span><br><span class="line">        content = <span class="string">`&lt;h1&gt;关于页面&lt;/h1&gt;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5. 设置Content-Type响应头,防止中文乱码</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>);</span><br><span class="line">    <span class="comment">// 6. 使用res.end( )把内容响应给客户端</span></span><br><span class="line">    res.<span class="title function_">end</span>(content);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 4. 启动服务器</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server running at http://127.0.0.1:8080&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="process-系统进程模块"><a href="#process-系统进程模块" class="headerlink" title="process 系统进程模块"></a>process 系统进程模块</h1><p><a href="https://blog.csdn.net/qq_30071415/article/details/117508606?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165994983116781432989484%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165994983116781432989484&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-117508606-null-null.142%5Ev39%5Epc_rank_v38,185%5Ev2%5Econtrol&utm_term=node%20process&spm=1018.2226.3001.4187">参考文档</a></p>
<blockquote>
<p>procee系统的进程模块<br>用process区分代码的运行环境<br>未来在框架的T程化开发中:用来区分前端代码的运行环境</p>
</blockquote>
<h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><h2 id="什么是模块化？"><a href="#什么是模块化？" class="headerlink" title="什么是模块化？"></a>什么是模块化？</h2><p><strong>模块化</strong>是指解决一个复杂问题时，自顶向下逐层<strong>把系统划分为若干模块的过程</strong>。对整个系统来说，<strong>模块是可以组合，分解，更换的单元</strong>。</p>
<p>编程领域中的模块化，就是遵守固定的规则，把一个大文件拆分成独立并相互依赖的多个小模块：</p>
<blockquote>
<p>把代码进行模块化拆分的好处：</p>
<ol>
<li>提高了代码的<strong>复用性</strong></li>
<li>提高了代码的<strong>可维护性</strong></li>
<li>可以实现<strong>按需加载</strong></li>
</ol>
</blockquote>
<h2 id="模块化规范"><a href="#模块化规范" class="headerlink" title="模块化规范"></a>模块化规范</h2><p><strong>模块化规范</strong>就是对代码进行模块化的拆分与组合时，需要遵循的那些规则。</p>
<p>例如：</p>
<ul>
<li>使用什么样的语法格式来<em>引入模块</em></li>
<li>在模块中使用什么样的语法格式<em>向外暴露成员</em></li>
</ul>
<p><strong>模块化的好处</strong>：大家都遵循同样的模块化规范写代码，降低了沟通的成本，极大方便了各个模块之间的相互调用，利人利己。</p>
<h2 id="Node-js中模块的分类"><a href="#Node-js中模块的分类" class="headerlink" title="Node.js中模块的分类"></a>Node.js中模块的分类</h2><p>Node.js中根据模块来源的不同，将模块分为了3大类，分别是：</p>
<ul>
<li><strong>内置模块</strong>（内置模块是Node.js官方提供的，例如：fs，path，http等）</li>
<li><strong>自定义模块</strong>（用户创建的每个js文件，都是自定义模块）</li>
<li><strong>第三方模块</strong>（由第三方开发出来的模块，并非官方提供的内置模块，也不用用户创建的自定义模块。使用前要先下载）</li>
</ul>
<h2 id="加载模块"><a href="#加载模块" class="headerlink" title="加载模块"></a>加载模块</h2><p>使用强大的require()方法，可以加在需要的内置模块，用户自定义模块，第三方模块进行使用。例如：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220630212456568.png" alt="image-20220630212456568"></p>
<p><strong>注意：</strong>使用require()方法加载其他模块时候，会执行被加载模块中的代码。</p>
<h2 id="Node-js中的模块作用域"><a href="#Node-js中的模块作用域" class="headerlink" title="Node.js中的模块作用域"></a>Node.js中的模块作用域</h2><h3 id="1-什么是模块作用域"><a href="#1-什么是模块作用域" class="headerlink" title="1.什么是模块作用域"></a>1.什么是模块作用域</h3><p>和函数作用域类似，在自定义模块中定义的变量，方法。等成员，只能在当前模块内被访问，这种模块级别的访问限制，叫做<strong>模块作用域</strong>；</p>
<h3 id="2-模块作用域的好处"><a href="#2-模块作用域的好处" class="headerlink" title="2.模块作用域的好处"></a>2.模块作用域的好处</h3><p><strong>防止全局变量污染的问题</strong></p>
<p>当两个js文件中有相同的变量，就会造成全局变量污染</p>
<h3 id="3-向外共享模块作用域中的成员"><a href="#3-向外共享模块作用域中的成员" class="headerlink" title="3.向外共享模块作用域中的成员"></a>3.向外共享模块作用域中的成员</h3><h4 id="1-module对象"><a href="#1-module对象" class="headerlink" title="1.module对象"></a>1.module对象</h4><p>在每个.js自定义模块中都有一个module对象，它里面存储了和当前模块有关的信息，打印如下：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220630221520536.png" alt="image-20220630221520536"></p>
<h4 id="2-module-exports对象"><a href="#2-module-exports对象" class="headerlink" title="2.module.exports对象"></a>2.module.exports对象</h4><p>在自定义模块中。可以使用module.exports对象，将模块内的成员共享出去，供外界使用。</p>
<p>外界用**require( )**方法导入自定义模块时候。得到的就是module.exports所指向对象。</p>
<blockquote>
<p>如果想要公开自定义模块中的一部分，可以直接为<code>module.exports</code>添加属性或者方法</p>
</blockquote>
<h4 id="3-共享成员时的注意点"><a href="#3-共享成员时的注意点" class="headerlink" title="3.共享成员时的注意点"></a>3.共享成员时的注意点</h4><p>使用require()方法导入模块时，导入的结果，<strong>永远以module.exports指向的对象为准。</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220630223935943.png" alt="image-20220630223935943"></p>
<h4 id="4-exports对象"><a href="#4-exports对象" class="headerlink" title="4.exports对象"></a>4.exports对象</h4><p>由于module.exports单词写起来比较复杂，为了简化向外共享成员的代码，Node 提供了<strong>exports</strong> 对象。默认情况下，<strong>exports 和module.exports指向同一个对象</strong>。最终共享的结果，还是以<strong>module.exports</strong>指向的对象为准。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220630224730743.png" alt="image-20220630224730743"></p>
<p>注意：</p>
<p>最终共享的结果，还是以<strong>module.exports</strong>指向的对象为准。</p>
<blockquote>
<p>如果module.exports这个老六偷偷指向了另一个对象，则以它为准😅</p>
</blockquote>
<h4 id="5-exports和module-exports的使用误区"><a href="#5-exports和module-exports的使用误区" class="headerlink" title="5.exports和module.exports的使用误区"></a>5.exports和module.exports的使用误区</h4><p>时刻谨记，<strong>require()<strong>模块时,得到的永远是</strong>module exports</strong>指向的对象:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220630225810795.png" alt="image-20220630225810795"></p>
<h3 id="Node-js中的模块化规范"><a href="#Node-js中的模块化规范" class="headerlink" title="Node.js中的模块化规范"></a>Node.js中的模块化规范</h3><p>Node.js遵循了CommonJs模块化规范。CommonJS规定了<strong>模块的特性和各模块之间相互依赖。</strong></p>
<p>CommonJS规定：</p>
<ol>
<li>每个模块内部，<strong>module</strong>变量代表当前模块</li>
<li>module变量是一个对象，它的exports属性，（即<strong>module.exports）是对外的接口</strong></li>
<li>加载某个模块，其实就是加载该模块的module.exports属性，<strong>require()方法用于加载模块</strong>。</li>
</ol>
<h1 id="npm与包"><a href="#npm与包" class="headerlink" title="npm与包"></a>npm与包</h1><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><h3 id="什么是包"><a href="#什么是包" class="headerlink" title="什么是包"></a>什么是包</h3><blockquote>
<p>Node.js中的<strong>第三方模块</strong>又叫做<strong>包。</strong></p>
<p>就像电脑和计算机指的是相同的东西。第三方模块和包指的是同一个概念。只不过叫法不同</p>
</blockquote>
<h3 id="包的来源"><a href="#包的来源" class="headerlink" title="包的来源"></a>包的来源</h3><p>不同于Node.js中的内置模块与自定义模块，包是由第三方个人或团队开发出来的，免费供所有人使用。</p>
<blockquote>
<p>注意：Node.js中的包都是免费开源的，不需要付费即可免费下载使用。</p>
</blockquote>
<h3 id="为什么需要包"><a href="#为什么需要包" class="headerlink" title="为什么需要包"></a>为什么需要包</h3><p>由于Node.js的内置模块仅提供了一些底层的API，导致在基于内置模块进行项目开发的时候，效率低。包是基于内置模块封装出来的，提供了更高级，更方便的API，极大的提高了开发效率。</p>
<p>包和内置模块之间的关系，类似于<strong>jQuery</strong>和<strong>浏览器API</strong>之间的关系。</p>
<h3 id="从哪里下载包"><a href="#从哪里下载包" class="headerlink" title="从哪里下载包"></a>从哪里下载包</h3><p>国外有家IT公司,叫做npm, Inc.这家公司旗下有一个非常著名的网站: <a href="https://www.npmjs.com/">https://www.npmjs.com/</a> .它是全球最大的包共享平台，你可以从这个网站上搜索到任何你需要的包，只要你有足够的耐心!<br>到目前位置，全球约1100多万的开发人员，通过这个包共享平台，开发并共享了超过120多万个包供我们使用。<br>npm, Inc. 公司提供了一个地址为<a href="https://registy.npmjs.org/%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%9D%A5%E5%AF%B9%E5%A4%96%E5%85%B1%E4%BA%AB%E6%89%80%E6%9C%89%E7%9A%84%E5%8C%85%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E4%BB%8E%E8%BF%99%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E4%B8%8B%E8%BD%BD%E8%87%AA%E5%B7%B1%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E5%8C%85%E3%80%82">https://registy.npmjs.org/的服务器，来对外共享所有的包，我们可以从这个服务器上下载自己所需要的包。</a></p>
<p><strong>注意：</strong></p>
<ul>
<li>从 <a href="https://www.npmjs.com/%E7%BD%91%E7%AB%99%E4%B8%8A%E6%90%9C%E7%B4%A2%E8%87%AA%E5%B7%B1%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E5%8C%85">https://www.npmjs.com/网站上搜索自己所需要的包</a></li>
<li>从<a href="https://registy.npmjs.org服务器上下载自己需要的包/">https://registy.npmjs.org服务器上下载自己需要的包</a></li>
</ul>
<h3 id="如何下载包"><a href="#如何下载包" class="headerlink" title="如何下载包"></a>如何下载包</h3><p>npm, Inc.公司提供了-一个包管理工具,我们可以使用这个包管理工具，从<a href="https://registry.npmis/">https://registry.npmis</a> org&#x2F;服务器把需要的包下载到本地使用。<br>这个包管理”工具的名字叫做Node Package Manager (简称npm包管理工具)，这个包管理工具随着Node.js的安装包-起被安装到了用户的电脑上。<br>大家可以在终端中执行<strong>npm-v</strong>命令,来查看自己电脑上所安装的npm包管理工具的版本号:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702100627668.png" alt="image-20220702100627668"></p>
<h2 id="npm初体验"><a href="#npm初体验" class="headerlink" title="npm初体验"></a>npm初体验</h2><h3 id="格式化时间高级做法"><a href="#格式化时间高级做法" class="headerlink" title="格式化时间高级做法"></a>格式化时间高级做法</h3><ol>
<li>使用npm包管理工具，在项目中安装格式化时间的包moment ，使用<code>npm install moment</code>或者<code>npm i moment</code>命令</li>
<li>使用require( )导入格式化时间的包</li>
<li>参考moment的官方API文档对时间进行格式化</li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702105458124.png" alt="image-20220702105458124"></p>
<h3 id="初次安装后多出的文件"><a href="#初次安装后多出的文件" class="headerlink" title="初次安装后多出的文件"></a>初次安装后多出的文件</h3><p>初次装包完成后，在项目文件夹下多-个叫做 <strong>node_ modules</strong>的文件夹和<strong>package-lock.json</strong>的配置文件。</p>
<p><strong>其中：</strong></p>
<ul>
<li><strong>node_modules</strong>文件夹用来存放所有已安装到项目中的包。require()导入第三方包时,就是从这个目录中查找并加载包。</li>
<li><strong>package-lock.json</strong>配置文件用来记录node. _modules目录下的每一个包的下载信息， 例如包的名字、版本号、下载地址等。</li>
</ul>
<p>注意:程序员不要手动修改node_ modules 或package-lock.json文件中的任何代码，npm包管理工具会自动维护它们。</p>
<h3 id="安装指定版本的包"><a href="#安装指定版本的包" class="headerlink" title="安装指定版本的包"></a>安装指定版本的包</h3><p>默认情况下，使用npm install命令安装包的时候，会自动安装最新版本的包。如果需要安装指定版本的包,可以在包名之后,通过@符号指定具体的版本，例如:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702105945239.png" alt="image-20220702105945239"></p>
<h4 id="包的语义化版本规范"><a href="#包的语义化版本规范" class="headerlink" title="包的语义化版本规范"></a>包的语义化版本规范</h4><p>包的版本号是以”点分十进制”形式进行定义的,总共有三位数字,例如 <em>2.24.0</em><br>其中每一位数字所代表的的含义如下:</p>
<ul>
<li><p>第1位数字:大版本</p>
</li>
<li><p>第2位数字:功能版本</p>
</li>
<li><p>第3位数字: Bug修复版本</p>
</li>
</ul>
<p>版本号提升的规则:只要前面的版本号增长了，则后面的版本号归零。</p>
<h4 id="包管理配置文件"><a href="#包管理配置文件" class="headerlink" title="包管理配置文件"></a>包管理配置文件</h4><p>npm规定，在项目根目录中，必须提供一个叫做 package.json的包管理配置文件。用来记录与项目有关的一一些配置信息。例如:</p>
<ul>
<li>项目的名称、版本号、描述等</li>
<li>项目中都用到了哪些包</li>
<li>哪些包只在开发期间会用到</li>
<li>那些包在开发和部署时都需要用到</li>
</ul>
<h5 id="dependencies节点"><a href="#dependencies节点" class="headerlink" title="dependencies节点"></a>dependencies节点</h5><p>package.json文件中，有一个<strong>dependencies</strong>节点，专门用来记录您使用<strong>npm install</strong>命令安装了哪些包。</p>
<h4 id="快速生成package-json"><a href="#快速生成package-json" class="headerlink" title="快速生成package.json"></a>快速生成package.json</h4><p>npm包管理工具提供了一个快捷命令，可以在执行命令时所处的目录中，快捷创建package.json这个包管理配置文件：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702115625776.png" alt="image-20220702115625776"></p>
<p>注意：</p>
<p>①上述命令只能在英文的目录下成功运行!所以，项目文件夹的名称-定要使用英文命名,不要使用中文,不能出现空格。<br>②运行npm install命令安装包的时候，npm包管理工具会自动把包的名称和版本号,记录到package.json中。</p>
<h4 id="git合作开发遇到的问题"><a href="#git合作开发遇到的问题" class="headerlink" title="git合作开发遇到的问题"></a>git合作开发遇到的问题</h4><p>在实际上开发中，上传至git的前提下会自动屏蔽掉node_modules文件中的所有第三方包。通过<code>.gitignore</code>配置文件忽略掉该文件。避免项目文件过大。</p>
<p>而在拿到项目的时候，可以通过<code>npm install</code>或者<code>npm i</code>指令安装所有你需要的第三方包。</p>
<h3 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h3><p>可以运行<code>npm uninstall</code>命令，来卸载指定的包：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702143705150.png" alt="image-20220702143705150"></p>
<p>注意：npm uninstall 命令执行后，会把卸载的包，自动从package.json的dependencies中移除掉</p>
<h3 id="devDependencies-x2F-dependencies节点"><a href="#devDependencies-x2F-dependencies节点" class="headerlink" title="devDependencies&#x2F;dependencies节点"></a>devDependencies&#x2F;dependencies节点</h3><ul>
<li><p>如果某些包只在项目开发中会用到，在项目上线后不会用到，则建议把这些包记录到<strong>devDependencies</strong>节点中     <em>开发依赖</em>      <code>npm i 包名 --save</code></p>
</li>
<li><p>与之对应的，如果某些包在开发和项目上线之后都需要用到，则建议把这些包记录到<strong>dependencies</strong>节点中。     <em>运行依赖</em>        <code>npm i 包名 --save-dev </code>   <em>默认下的包都是运行依赖</em></p>
</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702144612559.png" alt="image-20220702144612559"></p>
<h2 id="淘宝NPM镜像服务器"><a href="#淘宝NPM镜像服务器" class="headerlink" title="淘宝NPM镜像服务器"></a>淘宝NPM镜像服务器</h2><p>淘宝在国内搭建了-一个服务器，专门把国外官方服务器上的包同步到国内的服务器，然后在国内提供下包的服务。从而极大的提高了下包的速度。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702145215179.png" alt="image-20220702145215179"></p>
<p><strong>扩展：</strong></p>
<p>镜像是一种文件存储形式。一个磁盘上的数据在另一个磁盘上存在完全相同的副本即为镜像</p>
<h3 id="切换npm的下包镜像源"><a href="#切换npm的下包镜像源" class="headerlink" title="切换npm的下包镜像源"></a>切换npm的下包镜像源</h3><p>下包的镜像源，指的是下包的服务器地址</p>
<ul>
<li><code>npm config get registry</code> 查看当前下包镜像源</li>
<li><code>npm config set registry=https://registry.npm.taobao.org/</code>将下包的镜像源切换为淘宝镜像源</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702145804759.png" alt="image-20220702145804759"></p>
<h3 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h3><p>为了更方便的切换下包的镜像源，我们可以安装nrm这个小工具，利用nrm提供的终端命令,可以快速查看和切换下包的镜像源。</p>
<ul>
<li><code>npm i nrm -g</code>通过npm包管理器，将nrm安装为全局可用的工具</li>
<li><code>nrm ls</code>查看所有可用镜像源</li>
<li><code>nrm use taobao</code>将下包的镜像源切换为淘宝镜像</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702150232535.png" alt="image-20220702150232535"></p>
<h2 id="包的分类"><a href="#包的分类" class="headerlink" title="包的分类"></a>包的分类</h2><h3 id="项目包"><a href="#项目包" class="headerlink" title="项目包"></a>项目包</h3><p>那些被安装到项目的<strong>node _modules</strong>目录中的包，都是项目包。</p>
<p>项目包又分为两类，分别是；</p>
<ul>
<li><strong>开发依赖包</strong>(被记录到<em>devDependencies</em>节点中的包，只在开发期间会用到)</li>
<li><strong>核心依赖包</strong>(被记录到<em>dependencies</em>节点中的包，在开发期间和项目.上线之后都会用到)</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702152312713.png" alt="image-20220702152312713"></p>
<h3 id="全局包"><a href="#全局包" class="headerlink" title="全局包"></a>全局包</h3><p>在执行<code>npm install </code>命令时，如果提供了-g 参数，则会把包安装为全局包。<br>全局包会被安装到<strong>C:\Users\用户目录\AppData\Roaming\npm\node_ modules</strong> 目录下。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702152638662.png" alt="image-20220702152638662"></p>
<p>注意：</p>
<ol>
<li>只有<strong>工具性质的包</strong>，才有全局安装的必要性，因为它们提供了好用的终端命令。</li>
<li>判断某个包是否需要全局安装后再能使用，可以参考官方提供的使用说明即可。</li>
</ol>
<h3 id="i5ting-toc"><a href="#i5ting-toc" class="headerlink" title="i5ting_toc"></a>i5ting_toc</h3><p>iting_toc是一个可以把md文档转为html页面的小工具,使用步骤如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702152934464.png" alt="image-20220702152934464"></p>
<h2 id="规范包结构"><a href="#规范包结构" class="headerlink" title="规范包结构"></a>规范包结构</h2><p>在清楚了包的概念以及如何下载和使用包之后，接下来,我们深入了解一下包的内部结构。</p>
<p>一个规范的包，它的组成结构,必须符合以下3点要求:</p>
<ol>
<li>包必须以单独的目录而存在</li>
<li>包的顶级目录下要必须包含package.json 这个包管理配置文件</li>
<li>package.json 中必须包含name, version, main这三个属性,分别代表包的名字版本号、包的入口。</li>
</ol>
<p> 注意:以上3点要求是一个规范的包结构必须遵守的格式，关于更多的约束，可以参考网站</p>
<h2 id="发布包"><a href="#发布包" class="headerlink" title="发布包"></a>发布包</h2><p>在符合规范包结构的前提下就可以自己制作一个包并发布到npm网站。</p>
<h3 id="关于包的规范"><a href="#关于包的规范" class="headerlink" title="关于包的规范"></a>关于包的规范</h3><h4 id="关于package-json文件"><a href="#关于package-json文件" class="headerlink" title="关于package.json文件"></a>关于package.json文件</h4><ul>
<li><p>name    <em>发布包时的包名字，不可以与他人重复</em></p>
</li>
<li><p>version   <em>包版本</em></p>
</li>
<li><p>type  <em>配置模块化语法</em></p>
<ul>
<li>moduel      <em>作为es模块处理</em></li>
<li>commonjs    <em>作为commonjs模块处理</em></li>
</ul>
</li>
<li><p>mian  <em>入口文件</em></p>
</li>
<li><p>scripts   <em>自定义执行指令</em></p>
</li>
<li><p>description   <em>被检索时所展示的描述</em></p>
</li>
<li><p>keywords   <em>被检索的关键字</em></p>
</li>
<li><p>author    <em>作者信息</em></p>
</li>
<li><p>license    <em>开源协议</em></p>
</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702165535367.png" alt="image-20220702165535367"></p>
<h4 id="遵循模块化规范"><a href="#遵循模块化规范" class="headerlink" title="遵循模块化规范"></a>遵循模块化规范</h4><p>入口文件写入到<code>index.js</code>文件下，方法文件放入src文件中</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702165828338.png" alt="image-20220702165828338"></p>
<h4 id="关于入口文件index-js"><a href="#关于入口文件index-js" class="headerlink" title="关于入口文件index.js"></a>关于入口文件index.js</h4><ol>
<li>dateNew&#x2F;escape是对象</li>
<li>需要挂载到module.exports</li>
<li>使用<code>...</code>运算符展开这两个对象</li>
<li>让他们的所有属性交给新的对象module.exports</li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702165855497.png" alt="image-20220702165855497"></p>
<h3 id="发布包-1"><a href="#发布包-1" class="headerlink" title="发布包"></a>发布包</h3><p>在npm官网注册好账号后在终端登录账户</p>
<ul>
<li>使用指令<code>npm login </code></li>
</ul>
<p>依次输入用户名 - 密码 - 邮箱</p>
<ul>
<li>推送 <code>npm  publish</code></li>
</ul>
<p><strong>注意：</strong><u>镜像服务器必须是npm官方地址</u></p>
<h3 id="删除包"><a href="#删除包" class="headerlink" title="删除包"></a>删除包</h3><p>运行<code>npm unpublish 包名 --force</code>命令，即可从npm删除已发布的包。</p>
<p>注意：</p>
<ol>
<li><code>npm unpublish</code>命令只能删除72小时以内发布的包</li>
<li><code>npm unpublish</code>删除的包，在24小时内不允许重复发布</li>
<li>发布包的时候要慎重，尽量不要往npm上发布没有意义的包!</li>
</ol>
<h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><h2 id="Express简介"><a href="#Express简介" class="headerlink" title="Express简介"></a>Express简介</h2><h3 id="什么是Express"><a href="#什么是Express" class="headerlink" title="什么是Express"></a>什么是Express</h3><p>官方给出的概念: Express 是基于Node.js平台,快速、开放、极简的Web开发框架。<br>通俗的理解: Express 的作用和Node.js内置的http模块类似，是专门用来创建Web服务器的。<br>Express的本质:就是一个npm上的第三方包，提供了快速创建Web服务器的便捷方法。</p>
<blockquote>
<p>Express的中文官网:. <a href="http://www.expressjs.com.cn/">http://www.expressjs.com.cn/</a></p>
</blockquote>
<h2 id="EXpress基本使用"><a href="#EXpress基本使用" class="headerlink" title="EXpress基本使用"></a>EXpress基本使用</h2><h3 id="Express安装"><a href="#Express安装" class="headerlink" title="Express安装"></a>Express安装</h3><p>在项目所处目录中，使用<code>npm install express@4.17.1</code>安装指定版本或者<code>npm install express --save</code>安装最新版本</p>
<h3 id="创建基本的web服务器"><a href="#创建基本的web服务器" class="headerlink" title="创建基本的web服务器"></a>创建基本的web服务器</h3><ol>
<li>导入express模块</li>
<li>创建web服务器</li>
<li>启动web服务器</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.导入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 2.创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 3.启动web服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;express server running at http://127.0.0.1&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="监听GET请求"><a href="#监听GET请求" class="headerlink" title="监听GET请求"></a>监听GET请求</h3><p>通过<code>app.get()</code>方法，可以监听客户端的GET请求，具体的语法格式如下：</p>
<ul>
<li>参数1：客户端请求的URL地址</li>
<li>参数2：请求对应的处理函数<ul>
<li>​		req：请求对象（包含了与请求相关的属性和方法）</li>
<li>​        res：响应对象（包含了与响应相关的属性与方法）</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;请求URL&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;<span class="comment">/*处理函数*/</span>&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="监听POST请求"><a href="#监听POST请求" class="headerlink" title="监听POST请求"></a>监听POST请求</h3><p>通过<code>app.post()</code>方法，可以监听客户端的POST请求，具体语法如下：</p>
<ul>
<li>参数1：客户端请求的URL地址</li>
<li>参数2：请求对应的处理函数<ul>
<li>​		req：请求对象（包含了与请求相关的属性和方法）</li>
<li>​        res：响应对象（包含了与响应相关的属性与方法）<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;请求URL&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;<span class="comment">/*处理函数*/</span>&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="把内容响应给客户端"><a href="#把内容响应给客户端" class="headerlink" title="把内容响应给客户端"></a>把内容响应给客户端</h3><p>通过<code>res.send()</code>方法，可以把处理好的内容，发送给客户端：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 向客户端发送JSON请求</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">        <span class="attr">gender</span>:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 向客户端发送文本请求</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;请求成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="获取URL中携带的查询参数query"><a href="#获取URL中携带的查询参数query" class="headerlink" title="获取URL中携带的查询参数query"></a>获取URL中携带的查询参数query</h3><p>通过<code>req.query</code>对象，可以访问到客户端通过<strong>查询字符串</strong>的形式，发送到服务器的参数:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702200820315.png" alt="image-20220702200820315"></p>
<h3 id="获取URL中的动态参数params"><a href="#获取URL中的动态参数params" class="headerlink" title="获取URL中的动态参数params"></a>获取URL中的动态参数params</h3><p>通过req.params对象，可以访问到URL中，通过：匹配到的动态参数：</p>
<blockquote>
<p>:id并非固定写法，”:”才是，id是可变的</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// url地址中，可以通过:参数名的形式，匹配动态参数值</span></span><br><span class="line"><span class="comment">// 注意：这里的:id是一个动态的参数</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/:id/:pass&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// req.params 是动态匹配到的URL参数，默认也是一个空对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>);</span><br><span class="line">    <span class="comment">// 里面存放着通过:动态匹配到的参数值</span></span><br><span class="line">    res.<span class="title function_">send</span>(req.<span class="property">params</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><em>postmen测试url：</em><code>http://192.168.210.146:8080/login/666/789</code></p>
<ul>
<li>此时得到的   <strong>id为666   pass为789</strong></li>
</ul>
<h2 id="托管静态资源"><a href="#托管静态资源" class="headerlink" title="托管静态资源"></a>托管静态资源</h2><h3 id="1-express-static"><a href="#1-express-static" class="headerlink" title="1.express.static()"></a>1.express.static()</h3><p>express提供了一个非常好用的函数，叫做<code>express.static()</code>,通过它,我们可以非常方便地创建一个静态资源服务器。<br>例如，通过如下代码就可以将public 目录下的图片、CSS 文件、JavaScript 文件对外开放访问了:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意: Express 在指定的静态目录中查找文件,并对外提供资源的访问路径。<br>因此，存放静态文件的目录名不会出现在URL中。</p>
</blockquote>
<h3 id="2-托管多个静态目录"><a href="#2-托管多个静态目录" class="headerlink" title="2.托管多个静态目录"></a>2.托管多个静态目录</h3><p>当有两个文件都需要开放自己创建静态服务器，可以反复调用<code>express.static()</code>方法</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704201533438.png" alt="image-20220704201533438"></p>
<p>访问静态资源文件时，express.static() 函数会根据目录的添加顺序查找所需的文件。<em>优先级总是第一个</em></p>
<h3 id="3-挂载路径前缀"><a href="#3-挂载路径前缀" class="headerlink" title="3.挂载路径前缀"></a>3.挂载路径前缀</h3><p>如果希望在托管的静态资源访问路径之前，挂载路径前缀，则可以使用如下的方式:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704201812592.png" alt="image-20220704201812592"></p>
<p>现在，你就可以通过带有 &#x2F;public 前缀地址来访问 public 目录中的文件了:</p>
<ul>
<li><a href="http://localhost:3000/public/images/kitten.jpg">http://localhost:3000/public/images/kitten.jpg</a></li>
<li><a href="http://localhost:3000/publicss/style.css">http://localhost:3000/publicss/style.css</a></li>
<li><a href="http://localhost:3000/public/js/appjis">http://localhost:3000/public/js/appjis</a></li>
</ul>
<h2 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h2><h3 id="为什么使用nodemon"><a href="#为什么使用nodemon" class="headerlink" title="为什么使用nodemon"></a>为什么使用nodemon</h3><p>在编写调试Node.js项目的时候,如果修改了项目的代码,则需要频繁的手动close掉,然后再重新启动,非常繁琐。<br>现在,我们可以使用noderaon (<a href="https://www.npmjs.com/package/nodemon">https://www.npmjs.com/package/nodemon</a>) 这个工具， 它能够监听项目文件的变动，当代码被修改后，nodemon 会自动帮我们重启项目，极大方便了开发和调试。</p>
<p>使用指令<code>npm i -g nodemon</code>下载</p>
<h3 id="使用nodemon"><a href="#使用nodemon" class="headerlink" title="使用nodemon"></a>使用nodemon</h3><p>通过<code>nodemon &#39;js文件&#39;</code>来启动服务器，当更改代码后，就不需要再重启服务器，nodemon会自动重启服务器。</p>
<h1 id="Express路由"><a href="#Express路由" class="headerlink" title="Express路由"></a>Express路由</h1><h2 id="路由的概念"><a href="#路由的概念" class="headerlink" title="路由的概念"></a>路由的概念</h2><h3 id="现实生活中的路由"><a href="#现实生活中的路由" class="headerlink" title="现实生活中的路由"></a>现实生活中的路由</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704204921200.png" alt="image-20220704204921200"></p>
<blockquote>
<p>在这里，路由是按键与服务之间的映射关系</p>
</blockquote>
<h2 id="Express中的路由"><a href="#Express中的路由" class="headerlink" title="Express中的路由"></a>Express中的路由</h2><p>在Express中,路由指的是客户端的请求与服务器处理函数之间的映射关系。<br>Express中的路由分3部分组成，分别是请求的<strong>类型、请求的URL地址、处理函数，</strong>格式如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">METHOD</span>(<span class="variable constant_">PATH</span>,<span class="variable constant_">HANDLER</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Express中路由的例子"><a href="#Express中路由的例子" class="headerlink" title="Express中路由的例子"></a>Express中路由的例子</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//匹配GET请求，且请求URL为 / </span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Hello World！&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配POST请求，且请求URL为 /</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Got a POST requset&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="路由的匹配过程"><a href="#路由的匹配过程" class="headerlink" title="路由的匹配过程"></a>路由的匹配过程</h2><p>每当一个请求到达服务器之后,需要先经过路由的匹配，只有匹配成功之后，才会调用对应的处理函数。<br>在匹配时，会按照路由的顺序进行四配，如果请求类型和请求的URL同时匹配成功，则Express会将这次请求，转交给对应的function函数进行处理。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704205953632.png" alt="image-20220704205953632"></p>
<p><strong>路由匹配的注意点:</strong><br>①按照定义的先后顺序进行匹配<br>②请求类型和请求的URL同时匹配成功，才会调用对应的处理函数</p>
<h2 id="路由的使用"><a href="#路由的使用" class="headerlink" title="路由的使用"></a>路由的使用</h2><h3 id="1-简单的用法"><a href="#1-简单的用法" class="headerlink" title="1.简单的用法"></a>1.简单的用法</h3><p>在Express中使用路由最简单的方式，就是把路由挂载到app上,示例代码如下: </p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704210606633.png" alt="image-20220704210606633"></p>
<h3 id="2-模块化路由"><a href="#2-模块化路由" class="headerlink" title="2.模块化路由"></a>2.模块化路由</h3><p>为了方便对路由进行模块化的管理，Express 不建议将路由直接挂载到app.上,而是推荐将路由抽离为单独的模块。<br>将路由抽离为单独模块的步骤如下:</p>
<ol>
<li>创建路由模块对应的js文件</li>
<li>调用express.Router(  )函数创建路由对象</li>
<li>向路由对象上挂载具体的路由</li>
<li>使用module.exports向外共享路由对象</li>
<li>使用app.use(  )函数注册路由模块</li>
</ol>
<h4 id="2-1创建路由模块"><a href="#2-1创建路由模块" class="headerlink" title="2.1创建路由模块"></a>2.1创建路由模块</h4><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704211721516.png" alt="image-20220704211721516"></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704211805998.png" alt="image-20220704211805998"></p>
<h4 id="2-2注册路由模块"><a href="#2-2注册路由模块" class="headerlink" title="2.2注册路由模块"></a>2.2注册路由模块</h4><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704212429225.png" alt="image-20220704212429225"></p>
<p>注意：**app.use(  )**函数的作用。就是用来注册全局中间件</p>
<h4 id="2-3为路由模块添加前缀"><a href="#2-3为路由模块添加前缀" class="headerlink" title="2.3为路由模块添加前缀"></a>2.3为路由模块添加前缀</h4><p>类似于托管静态资源时，为静态资源统一挂载访问前缀一样,路由模块添加前缀的方式也非常简单:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704212854019.png" alt="image-20220704212854019"></p>
<h2 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h2><h3 id="现实中的例子"><a href="#现实中的例子" class="headerlink" title="现实中的例子"></a>现实中的例子</h3><p>在处理污水的时候，一般都要经过三个处理环节， 从而保证处理过后的废水，达到排放标准。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704213133927.png" alt="image-20220704213133927"></p>
<p>处理污水的三个中间环节，就可以叫做中间件。</p>
<h3 id="中间件的调用流程"><a href="#中间件的调用流程" class="headerlink" title="中间件的调用流程"></a>中间件的调用流程</h3><p>当一个请求到达Express 的服务器之后，可以连续调用多个中间件，从而对这次请求进行预处理。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704213408392.png" alt="image-20220704213408392"></p>
<h3 id="中间件的格式"><a href="#中间件的格式" class="headerlink" title="中间件的格式"></a>中间件的格式</h3><p>Express的中间件，本质上就是一个function处理管道函数，Express 中间件的格式如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704213619533.png" alt="image-20220704213619533"></p>
<p>注意:中间件函数的形参列表中，<strong>必须包含next参数。</strong>而路由处理函数中只包含req和res.</p>
<h3 id="next函数的作用"><a href="#next函数的作用" class="headerlink" title="next函数的作用"></a>next函数的作用</h3><p><strong>next函数</strong>是实现多个中间件连续调用的关键，它表示把流转关系转交给下一个中间件或路由。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704213842958.png" alt="image-20220704213842958"></p>
<h2 id="使用Express中间件"><a href="#使用Express中间件" class="headerlink" title="使用Express中间件"></a>使用Express中间件</h2><h3 id="定义中间件函数"><a href="#定义中间件函数" class="headerlink" title="定义中间件函数"></a>定义中间件函数</h3><p>可以通过如下的方式，定义一个最简单的中间件函数:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个简单的中间件函数</span></span><br><span class="line"><span class="keyword">const</span> mw = <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个简单的中间件函数&#x27;</span>);</span><br><span class="line">    <span class="comment">// 把流转关系转交给下一个中间件或路由</span></span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="全局生效的中间件"><a href="#全局生效的中间件" class="headerlink" title="全局生效的中间件"></a>全局生效的中间件</h3><p>客户端发起的任何请求，到达服务器之后,都会触发的中间件，叫做全局生效的中间件。<br>通过调用<code>app.use(mw);</code>即可定义一个全局生效的中间件，示例代码如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 定义一个简单的中间件函数</span></span><br><span class="line"><span class="keyword">const</span> mw = <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个简单的中间件函数&#x27;</span>);</span><br><span class="line">    <span class="comment">// 把流转关系转交给下一个中间件或路由</span></span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 将mw注册为全局生效的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(mw);</span><br><span class="line"><span class="comment">//------------------------------------------------------------------</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了/路由&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home page&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了/user 路由&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;User page&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>简化合并写法：</strong></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704215434074.png" alt="image-20220704215434074"></p>
<h3 id="定义多个全局中间件"><a href="#定义多个全局中间件" class="headerlink" title="定义多个全局中间件"></a>定义多个全局中间件</h3><p>可以使用app.use0连续定义多个全局中间件。客户端请求到达服务器之后，会按照中间件定义的先后顺序依次进行调用，示例代码如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义第一个全局中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了第一个全局中间件&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 定义第二个全局中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了第二个全局中间件&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home page!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="局部生效的中间件"><a href="#局部生效的中间件" class="headerlink" title="局部生效的中间件"></a>局部生效的中间件</h3><p>不使用<strong>app.use（）</strong>定义的中间件，叫做局部生效的中间件,示例代码如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义中间件函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw1</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了第一个局部中间件&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 创建路由 将参数添加在路由中</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, mw1, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home page!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;User page!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>定义多个局部生效的中间件：</strong></p>
<p>可以在路由中，通过如下两种等价的方式，使用多个局部中间件：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704223103512.png" alt="image-20220704223103512"></p>
<h2 id="中间件的作用"><a href="#中间件的作用" class="headerlink" title="中间件的作用"></a>中间件的作用</h2><p>多个中间件之间，共享同- -份req和res.基于这样的特性，我们可以在上游的中间件中，统-为req或res对象添加自定义的属性或方法，供下游的中间件或路由进行使用。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704215943188.png" alt="image-20220704215943188"></p>
<h2 id="中间件注意事项"><a href="#中间件注意事项" class="headerlink" title="中间件注意事项"></a>中间件注意事项</h2><ol>
<li>一定要在路由之前注册中间件(除了错误级别中间件)</li>
<li>客户端发送过来的请求，可以连续调用多个中间件进行处理</li>
<li>执行完中间件的业务代码之后，不要忘记调用next(函数</li>
<li>为了防止代码逻辑混乱，调用next(函数后不要再写额外的代码</li>
<li>连续调用多个中间件时，多个中间件之间，共享req和res对象</li>
</ol>
<h2 id="中间件分类"><a href="#中间件分类" class="headerlink" title="中间件分类"></a>中间件分类</h2><p>为了方便大家理解和记忆中间件的使用，Express 官方把常见的中间件用法，分成了5大类，分别是:</p>
<ol>
<li>应用级别的中间件</li>
<li>路由级别的中间件</li>
<li>错误级别的中间件</li>
<li>Express 内置的中间件</li>
<li>第三方的中间件</li>
</ol>
<h3 id="应用级别中间件"><a href="#应用级别中间件" class="headerlink" title="应用级别中间件"></a>应用级别中间件</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704225836330.png" alt="image-20220704225836330"></p>
<h3 id="路由级别中间件"><a href="#路由级别中间件" class="headerlink" title="路由级别中间件"></a>路由级别中间件</h3><p>绑定到express.Router()实例上的中间件，叫做路由级别的中间件。它的用法和应用级别中间件没有任何区别。只不过，应用级别中间件是绑定到app实例上，路由级别中间件绑定到router实例上,代码示例如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704230207988.png" alt="image-20220704230207988"></p>
<h3 id="错误级别中间件"><a href="#错误级别中间件" class="headerlink" title="错误级别中间件"></a>错误级别中间件</h3><p>错误级别中间件的作用:专门用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题。<br>格式:错误级别中间件的function 处理函数中,必须有4个形参,形参顺序从前到后，分别是(err, req, res, next)。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220704230903532.png" alt="image-20220704230903532"></p>
<p><strong>注意:错误级别的中间件,必须注册在所有路由之后!</strong></p>
<h3 id="Express内置中间件"><a href="#Express内置中间件" class="headerlink" title="Express内置中间件"></a>Express内置中间件</h3><p>自Express 4.16.0版本开始，Express 内置了3个常用的中间件,极大的提高了Express项目的开发效率和体验:<br>①<strong>express.static</strong> 快速托管静态资源的内置中间件,例如: HTML文件，图片，CSS 样式等(无兼容性)<br>②<strong>express.json</strong> 解析JSON格式的请求体数据(有兼容性,仅在4.16.0+版本中可用)<br>③<strong>express.urlencoded</strong> 解析URL-encoded格式的请求体数据(有兼容性，仅在4.16.0+版本中可用)</p>
<p><strong>express.json</strong>实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置中间件</span></span><br><span class="line"><span class="comment">// 通过express.json()解析表单中的json格式数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在服务器中可以使用req.body这个属性来接受客户端发送过来的请求体</span></span><br><span class="line">    <span class="comment">// 默认情况下，如果不配置 解析表单数据的中间件，默认为undefined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>express.urlencoded</strong>实例：</p>
<blockquote>
<p>express.urlencoded({ extended: false }) 固定写法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置中间件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过express.urlencoded()解析表单中的url-encoded格式的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/book&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="comment">// 在服务器中可以使用req.body这个属性来获取json格式的表单和url-encoded格式数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="第三方的中间件"><a href="#第三方的中间件" class="headerlink" title="第三方的中间件"></a>第三方的中间件</h3><p>非Express官方内置的，而是由第三方开发出来的中间，叫做第三方中间件，在项目中，大家可以按需下载并配置第三方中间件，从而提高项目的开发效率。</p>
<p>例如：在<a href="mailto:&#101;&#x78;&#112;&#x72;&#x65;&#115;&#115;&#x40;&#52;&#x2e;&#x31;&#54;&#x2e;&#x30;">&#101;&#x78;&#112;&#x72;&#x65;&#115;&#115;&#x40;&#52;&#x2e;&#x31;&#54;&#x2e;&#x30;</a>之前的版本中，经常使用body-parser这个第三方中间件，来解析请求体数据，使用步骤如下：</p>
<ol>
<li>运行<code>npm install body-parser</code>安装中间件</li>
<li>使用require导入中间件</li>
<li>使用app.use()注册并且使用中间件</li>
</ol>
<h2 id="使用Express写接口"><a href="#使用Express写接口" class="headerlink" title="使用Express写接口"></a>使用Express写接口</h2><h3 id="1-创建基本的服务器"><a href="#1-创建基本的服务器" class="headerlink" title="1.创建基本的服务器"></a>1.创建基本的服务器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ........</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-创建API路由模块"><a href="#2-创建API路由模块" class="headerlink" title="2.创建API路由模块"></a>2.创建API路由模块</h3><p>首先写一个模块化路由并暴露出去</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模块化路由</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载对应的路由</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向外暴露路由</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = routers;</span><br></pre></td></tr></table></figure>

<p>导入模块化路由并将路由模块挂载到中间件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./14.APIrouter&#x27;</span>);</span><br><span class="line"><span class="comment">// 把路由模块注册到app上(中间件)</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-编写GET接口"><a href="#3-编写GET接口" class="headerlink" title="3.编写GET接口"></a>3.编写GET接口</h3><p>在路由模块 挂载对应的路由：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模块化路由模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routers = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载对应的路由</span></span><br><span class="line">routers.<span class="title function_">get</span>(<span class="string">&#x27;/get&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过req.query获取客户端通过查询字符串 发送到服务器的数据</span></span><br><span class="line">    <span class="keyword">const</span> query = req.<span class="property">query</span>;</span><br><span class="line">    <span class="comment">// 调用res.send()方法,向客户端相应处理的数据</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">0</span>, <span class="comment">// 0处理成功,1处理失败</span></span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;GET 请求成功!&#x27;</span>, <span class="comment">// 状态的描述</span></span><br><span class="line">        <span class="attr">data</span>: query <span class="comment">//需要响应给客户端的数据</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向外暴露路由</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = routers;</span><br></pre></td></tr></table></figure>

<h3 id="4-编写POST请求"><a href="#4-编写POST请求" class="headerlink" title="4.编写POST请求"></a>4.编写POST请求</h3><p>使用post请求需要配置解析表单数据的中间件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置解析表单数据的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> routers = <span class="built_in">require</span>(<span class="string">&#x27;./14.APIrouter&#x27;</span>);</span><br><span class="line"><span class="comment">// 把路由模块注册到app上(中间件) 并添加前缀&#x27;/api&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, routers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在路由模块编写POST接口：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模块化路由模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routers = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载对应的路由</span></span><br><span class="line"><span class="comment">// get接口</span></span><br><span class="line">routers.<span class="title function_">get</span>(<span class="string">&#x27;/get&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过req.query获取客户端通过查询字符串 发送到服务器的数据</span></span><br><span class="line">    <span class="keyword">const</span> query = req.<span class="property">query</span>;</span><br><span class="line">    <span class="comment">// 调用res.send()方法,向客户端相应处理的数据</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">0</span>, <span class="comment">// 0处理成功,1处理失败</span></span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;GET 请求成功!&#x27;</span>, <span class="comment">// 状态的描述</span></span><br><span class="line">        <span class="attr">data</span>: query <span class="comment">//需要响应给客户端的数据</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// post接口</span></span><br><span class="line">routers.<span class="title function_">post</span>(<span class="string">&#x27;/post&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//通过req.body获取请求体中包含的url-encoded格式的数据</span></span><br><span class="line">    <span class="keyword">const</span> body = req.<span class="property">body</span>;</span><br><span class="line">    <span class="comment">// 调用res.send()方法,向客户端响应结果</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;POST 请求成功!&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: body</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 向外暴露路由</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = routers;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>req.query</code>：我们用来接收GET方式提交的参数。</li>
<li><code>req.body</code>：我们用来接收POST提交的参数。</li>
<li><code>req.param</code>：两种都能接收到。</li>
</ul>
<h3 id="CORS跨域资源共享"><a href="#CORS跨域资源共享" class="headerlink" title="CORS跨域资源共享"></a>CORS跨域资源共享</h3><h4 id="1-接口的跨域问题"><a href="#1-接口的跨域问题" class="headerlink" title="1.接口的跨域问题"></a>1.接口的跨域问题</h4><p>刚才编写的GET和POST接口，存在一个严重问题：<strong>不支持跨域请求</strong></p>
<p>解决接口跨域问题的方案主要有两种：</p>
<ol>
<li>CORS（主流解决方案，推荐）</li>
<li>JSONP（有缺陷的解决方案，只支持GET请求）</li>
</ol>
<h4 id="2-使用cors中间件解决跨域问题"><a href="#2-使用cors中间件解决跨域问题" class="headerlink" title="2.使用cors中间件解决跨域问题"></a>2.使用cors中间件解决跨域问题</h4><p>cors是express的一个第三方中间件。通过安装和配置cors中间件。可以很方便的解决跨域问题，使用步骤如下：</p>
<ol>
<li>运行<code>npm install cors</code>安装中间件</li>
<li>使用<code>const cors = require(&#39;cors&#39;)</code>导入中间件</li>
<li>在路由之前调用<code>app.use(cors())</code>配置中间件</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 配置解析表单数据的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 一定要在路由之前，配置cors这个中间件，从而解决接口的跨域问题</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br><span class="line"><span class="comment">//-----------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> routers = <span class="built_in">require</span>(<span class="string">&#x27;./14.APIrouter&#x27;</span>);</span><br><span class="line"><span class="comment">// 把路由模块注册到app上(中间件) 并添加前缀&#x27;/api&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, routers);</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="3-什么是cors"><a href="#3-什么是cors" class="headerlink" title="3.什么是cors"></a>3.什么是cors</h4><p>CORS (Cross-Origin Resource Sharing,跨域资源共享)由-系列HTTP响应头组成，这些HTTP响应头决定浏览器是否阻止前端JS代码跨域获取资源。</p>
<p>浏览器的网源安全策略默认会阻止网页“跨域”获取资源。但如果接口服务器配熏了CORS相关的HTTP响应头，就可以解除浏览器端的跨域访问限制，</p>
<h4 id="4-cors注意事项"><a href="#4-cors注意事项" class="headerlink" title="4.cors注意事项"></a>4.cors注意事项</h4><ol>
<li>cors只要在服务器端进行配置，客户端浏览器无需做任何额外的配置，即可请求开启了cors的接口。</li>
<li>cors在浏览器中有兼容性，只有支持XMLHttpPequest Level2的浏览器，才能正常访问开启了CORS的服务端接口（例如：IE10，Chrome4+，FireFox3.5+）</li>
</ol>
<h4 id="5-CORS响应头-Access-Control-Allow-Origin"><a href="#5-CORS响应头-Access-Control-Allow-Origin" class="headerlink" title="5.CORS响应头 - Access-Control-Allow-Origin"></a>5.CORS响应头 - Access-Control-Allow-Origin</h4><p>响应头部中可以携带一个Access-Control-Allow-Origin字段，其语法如下；</p>
<p><code>Access-Control-Allow-Origin:&lt;origin&gt;|*</code></p>
<p>其中，origin参数的值制定了允许访问该资源的外域URL</p>
<p>例如：下面的字段值将只允许来自<a href="http://itcast.cn的请求：">http://itcast.cn的请求：</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;http://itcast.cn&#x27;</span>);</span><br></pre></td></tr></table></figure>

<hr>
<p>如果指定了Access-Control-Allow-Origin字段的值为通配符*，表示允许来自任何域的请求。示例代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,*);</span><br></pre></td></tr></table></figure>

<h4 id="6-CORS响应头部-Access-Control-Allow-Headers"><a href="#6-CORS响应头部-Access-Control-Allow-Headers" class="headerlink" title="6.CORS响应头部- Access-Control-Allow-Headers"></a>6.CORS响应头部- Access-Control-Allow-Headers</h4><p>默认情况下，CORS仅支持客户端向服务器发送如下的9个请求头:<br>Accept、 Accept-L anguage、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、 Width 、Content-Type (值仅限于 text&#x2F;plain. multipart&#x2F;form-data、 application&#x2F;x-www-form-urlencoded 三者之一)<br>如果客户端向服务器发送了额外的请求头信息，则需要在服务器端，通过Access-Control-Allow-Headers对额外的请求头进行声明，否则这次请求会失败!</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>,<span class="string">&#x27;Content-Type,x-Custom-Header&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="7-CORS响应头部-Access-Control-Allow-Methods"><a href="#7-CORS响应头部-Access-Control-Allow-Methods" class="headerlink" title="7.CORS响应头部- Access-Control-Allow-Methods"></a>7.CORS响应头部- Access-Control-Allow-Methods</h4><p>默认情况下，CORS仅支持客户端发起GET、POST、HEAD请求。<br>如果客户端希望通过PUT、DELETE 等方式请求服务器的资源，则需要在服务器端，通过Access-Control-Alow-Methods来指明实际请求所允许使用的HTTP方法。<br>示例代码如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只允许 POST GET DELETE HEAD 请求方式</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>,<span class="string">&#x27;POST,GET,DELETE,HEAD&#x27;</span>);</span><br><span class="line"><span class="comment">// 允许所有http请求</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>,*);</span><br></pre></td></tr></table></figure>

<h4 id="8-CORS请求的分类"><a href="#8-CORS请求的分类" class="headerlink" title="8.CORS请求的分类"></a>8.CORS请求的分类</h4><p>客户端在请求CORS接口时，根据请求方式和请求头的不同。可以将CORS的请求分为两大类，分别是：</p>
<blockquote>
<ol>
<li>简单请求</li>
<li>预检请求</li>
</ol>
</blockquote>
<h5 id="A-简单请求"><a href="#A-简单请求" class="headerlink" title="A.简单请求"></a>A.简单请求</h5><p>同时满足以下两大类的请求，就属于简单请求：</p>
<blockquote>
<ol>
<li>请求方式：GET POST HEAD 三者之一</li>
<li>HTTP头部信息不超过以下几种字段:无自定义头部字段。Accept. Accept-Language. Content-Language. DPR.Downlink. Save-Data. Viewport-Width. Width . Content-Type (只有三个值applic ation&#x2F;x-www-form-urlencoded. multipart&#x2F;form- data. text&#x2F;plain)</li>
</ol>
</blockquote>
<h5 id="B-预检请求"><a href="#B-预检请求" class="headerlink" title="B.预检请求"></a>B.预检请求</h5><p>只要符合以下任意一个条件的请求。都需要进行预检请求：</p>
<blockquote>
<ol>
<li>请求方式为GET、POST、HEAD之外的请求Method类型</li>
<li>请求头中包含自定义头部字段</li>
<li>向服务器发送了application&#x2F;json 格式的数据</li>
</ol>
</blockquote>
<h5 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h5><p>简单请求的特点:客户端与服务器之间只会发生一次请求。<br>预检请求的特点:客户端与服务器之间会发生两次请求，OPTION预检请求成功之后，才会发起真正的请求。</p>
<h2 id="JSONP接口"><a href="#JSONP接口" class="headerlink" title="JSONP接口"></a>JSONP接口</h2><h3 id="1-回顾jsonp的概念与特点"><a href="#1-回顾jsonp的概念与特点" class="headerlink" title="1.回顾jsonp的概念与特点"></a>1.回顾jsonp的概念与特点</h3><p>概念:浏览器端通过<code>&lt;script&gt;</code>标签的src属性，请求服务器上的数据，同时，服务器返回一个函数的调用。这种请求数据的方式叫做JSONP.<br>特点:<br>①JSONP 不属于真正的Ajax请求，因为它没有使用XMLHttpRequest这个对象。<br>②JSONP 仅支持GET请求，不支持POST、PUT、 DELETE 等请求。</p>
<h3 id="2-jsonp接口的注意事项"><a href="#2-jsonp接口的注意事项" class="headerlink" title="2.jsonp接口的注意事项"></a>2.jsonp接口的注意事项</h3><p>如果项目中已经配置了CORS跨域资源共享，为了防止冲突，必须在配置CORS中间件之前声明JSONP的接口。否则JSONP接口会被处理成开启了CORS的接口。示例代码如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220706230435643.png" alt="image-20220706230435643"></p>
<h4 id="实现jsonp接口的步骤"><a href="#实现jsonp接口的步骤" class="headerlink" title="实现jsonp接口的步骤"></a>实现jsonp接口的步骤</h4><p>①获取客户端发送过来的回调函数的名字<br>②得到要通过JSONP形式发送给客户端的数据<br>③根据前两步得到的数据，拼接出一个函数调用的字符串<br>④把上一步拼接得到的字符串，响应给客户端的<code>&lt;script&gt;</code>标签进行解析执行</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220706231020034.png" alt="image-20220706231020034"></p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6新特性</title>
    <url>/found404.io/2022/06/30/ES6%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="ES6新特性🥳🥳"><a href="#ES6新特性🥳🥳" class="headerlink" title="ES6新特性🥳🥳"></a>ES6新特性🥳🥳</h1><h2 id="let，const新的声明方式🧐🧐"><a href="#let，const新的声明方式🧐🧐" class="headerlink" title="let，const新的声明方式🧐🧐"></a>let，const新的声明方式🧐🧐</h2><h3 id="Let"><a href="#Let" class="headerlink" title="Let"></a>Let</h3><blockquote>
<ol>
<li>变量不能重复声明</li>
<li>块级作用域</li>
<li>不存在变量提升</li>
<li>不影响作用域链</li>
<li>暂时性死区(只要块级作用域内存在let命令，这个区域就不再受外部影响)</li>
</ol>
</blockquote>
<span id="more"></span>

<p><strong>for中的var&#x2F;let</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;@&#x27;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>](); <span class="comment">//3</span></span><br><span class="line">arr[<span class="number">1</span>](); <span class="comment">//3</span></span><br><span class="line">arr[<span class="number">2</span>](); <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    arr[i]();</span><br><span class="line">&#125; <span class="comment">// 0,1,2</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    arr[i]();</span><br><span class="line">&#125; <span class="comment">// 3 3 3</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>第一个for循环中，向arr中添加三个函数，但是函数中的i是并不会赋值的，正常人的思维习惯会误以为，函数中的i也会被赋予值，但实际上并没有。</p>
</li>
<li><p>当在外部调用数组中三个函数的时候，每个函数创建不同的AO对象，但是其寻找的i值是全局下的i，就是GO中的i。此时GO中的i已经被上文中的for循环结束导致i赋值成为3，所以执行结果为3，3，3</p>
</li>
<li><p>第二个for循环中的var对i进行重新赋值导致i又变回0，当执行<code>arr[0]()</code>这个函数的时候，他会前往声明函数的所在域，此时函数寻找全局GO中的i，而i变成了0。依次执行下去。所以结果为0，1，2</p>
</li>
<li><p>第三个for循环用let声明，创建了一个一个的块，但是！常规思路会导致误认为调用函数的时候，里面的i也是块里面的i值，会认为i为0，1，2；而函数调用的时候会有一个特殊性，其在被调用的时候会返回函数声明的地方，它的i值查找的就不是for循环let创建的一个一个块里面的i，而是去查找声明函数所在域下的i值。上文中的函数声明是在全局下，它的i值被第二个函数定格在了3，所以函数输出为全3</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">99</span>;</span><br><span class="line">    <span class="title function_">fn</span>(); <span class="comment">//10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><blockquote>
<ol>
<li>一定要赋初始值</li>
<li>一般常量是用大写（潜规则）</li>
<li>常量的值不能修改</li>
<li>块级作用域</li>
<li>对于数组和对象的元素修改，不算是对常量的修改，不会报错</li>
</ol>
</blockquote>
<h2 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h2><blockquote>
<p>ES6 允许按照一定模式从数组和对象中提取值,对变量进行赋值这被称为<strong>结构赋值</strong></p>
</blockquote>
<p><strong>数组的结构：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.数组的结构</span></span><br><span class="line"><span class="keyword">const</span> f4 = [<span class="string">&#x27;小沈阳&#x27;</span>, <span class="string">&#x27;刘能&#x27;</span>, <span class="string">&#x27;赵四&#x27;</span>, <span class="string">&#x27;宋小宝&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [xiao, liu, zhao, song] = f4;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xiao);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(liu);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zhao);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(song);</span><br></pre></td></tr></table></figure>

<p><strong>对象的结构：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">     name,</span><br><span class="line">     age,</span><br><span class="line">     xiaopin</span><br><span class="line">&#125; = zhao;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(xiaopin);</span><br><span class="line">   <span class="title function_">xiaopin</span>();</span><br></pre></td></tr></table></figure>

<p>相当于 zhao.xiaopin(); 替换成了 xiaopin( );不用重复书写zhao.</p>
<h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>不同于es5中的字符串用+拼接，es6的模板字符串可以使用&#96;&#96;符号和${变量名}进行拼接</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;沈腾&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;玛丽&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;魏翔&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;/ul&gt;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.变量拼接</span></span><br><span class="line"><span class="keyword">let</span> lovest = <span class="string">&#x27;魏翔&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> out = <span class="string">`将<span class="subst">$&#123;lovest&#125;</span>替换成lovest`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(out);</span><br></pre></td></tr></table></figure>

<h2 id="对象的简化写法"><a href="#对象的简化写法" class="headerlink" title="对象的简化写法"></a>对象的简化写法</h2><blockquote>
<p>ES6 允许在大括号内直接写入变量和函数 作为对象的属性和方法，这样的书写更加简洁</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> change = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以改变你&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    name,</span><br><span class="line">    change,</span><br><span class="line">    <span class="comment">//旧的写法:</span></span><br><span class="line">    <span class="comment">// import: function() &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(&#x27;声明方法&#x27;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// es6写法:</span></span><br><span class="line">    <span class="keyword">import</span> () &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;声明方法&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(school);</span><br></pre></td></tr></table></figure>

<h2 id="箭头函数以及声明特点🏹🏹"><a href="#箭头函数以及声明特点🏹🏹" class="headerlink" title="箭头函数以及声明特点🏹🏹"></a>箭头函数以及声明特点🏹🏹</h2><blockquote>
<p>es6 允许使用[箭头] (&#x3D;&gt;) 定义函数.</p>
</blockquote>
<p><strong>声明一个函数：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line"><span class="keyword">let</span> reslut = <span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reslut); <span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<ol>
<li>this是静态的,this始终是指向函数声明时所在作用域下的this的值（其父级作用域的this）</li>
<li>不能做为构造实例化对象  就是无法构造函数</li>
<li>不能使用arguments变量</li>
</ol>
<h3 id="箭头函数的简写"><a href="#箭头函数的简写" class="headerlink" title="箭头函数的简写"></a>箭头函数的简写</h3><p><strong>(1)省略小括号,当形参有且只有一个时候</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">add</span> = n =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> n + n;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>)); <span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<p><strong>(2)省略花括号,当代码只有一条语句时候,此时return必须省略</strong></p>
<p>而且语句的执行结果就是函数的返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">pow</span> = n =&gt; n * n;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">pow</span>(<span class="number">9</span>)); <span class="comment">//81</span></span><br></pre></td></tr></table></figure>

<h3 id="箭头函数的this指向问题"><a href="#箭头函数的this指向问题" class="headerlink" title="箭头函数的this指向问题"></a>箭头函数的this指向问题</h3><p>this是静态的,this始终是指向函数声明时所在作用域下的this的值<strong>（其父级作用域的this）</strong></p>
<p>何为父级作用域的this，一个简单的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;id&#x27;</span>, <span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">    <span class="comment">// setTimeout(function() &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(&#x27;id&#x27;, this.id);</span></span><br><span class="line">    <span class="comment">// &#125;, 500)</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> id = <span class="number">10</span>;</span><br><span class="line">foo.<span class="title function_">call</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">50</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p><em>箭头函数</em>的结果是50</p>
</li>
<li><p><em>普通函数</em>的结果是10</p>
</li>
</ul>
<p><strong>foo.call(  )<strong>方法改变了foo函数的this指向，定时器中的函数this指向的是window，所以普通函数的</strong>this.id</strong>为window下的10。而箭头函数因为foo函数的this改变使得其this也改变成了对象**{id:50}**</p>
<h2 id="函数参数的默认值和rest参数"><a href="#函数参数的默认值和rest参数" class="headerlink" title="函数参数的默认值和rest参数"></a>函数参数的默认值和rest参数</h2><h3 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h3><blockquote>
<p>ES6 允许给函数参数赋值初始值</p>
</blockquote>
<ol>
<li>形参初始值  具有默认值的参数  一般位置要靠后(潜规则)</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c = <span class="number">2</span></span>) &#123; <span class="comment">//此处给形参设置默认值</span></span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">//当没有第三个实参传入时,可以在形参中设置默认值,否则就是NaN</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>与结构赋值结合</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">    host,</span></span><br><span class="line"><span class="params">    username,</span></span><br><span class="line"><span class="params">    password,</span></span><br><span class="line"><span class="params">    port</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(host);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(username);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(password);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(port);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">connect</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h3><p>es6 引入 <strong>rest</strong> 参数 用于获取函数的实参 用来替代<strong>arguments</strong></p>
<p>es5获取函数实参的方法是 <strong>arguments</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rest 参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">date</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args); <span class="comment">//filter some every map方法</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">date</span>(<span class="string">&#x27;黑&#x27;</span>, <span class="string">&#x27;白&#x27;</span>, <span class="string">&#x27;灰&#x27;</span>); <span class="comment">//数组</span></span><br></pre></td></tr></table></figure>

<p>rest参数 必须 放在<strong>参数末尾</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//rest参数 必须 放在参数最后</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b, ...args</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><p><strong>[…] <strong>扩展运算符能将[数组]转换为逗号分割的</strong>[参数序列]</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个数组 ... </span></span><br><span class="line"><span class="keyword">const</span> colors = [<span class="string">&#x27;黑&#x27;</span>, <span class="string">&#x27;白&#x27;</span>, <span class="string">&#x27;灰&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors); <span class="comment">// [&#x27;黑&#x27;, &#x27;白&#x27;, &#x27;灰&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...colors); <span class="comment">// 黑 白 灰</span></span><br></pre></td></tr></table></figure>

<h3 id="扩展运算符的运用"><a href="#扩展运算符的运用" class="headerlink" title="扩展运算符的运用"></a>扩展运算符的运用</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1. 数组的合并 黑 白 灰</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> anSe = [<span class="string">&#x27;黑&#x27;</span>, <span class="string">&#x27;白&#x27;</span>, <span class="string">&#x27;灰&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> liangSe = [<span class="string">&#x27;红&#x27;</span>, <span class="string">&#x27;黄&#x27;</span>, <span class="string">&#x27;绿&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//老方法 使用concat拼接数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const heBing = anSe.concat(liangSe);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> heBing = [...anSe, ...liangSe];</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(heBing);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2.数组的克隆</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> q1 = [<span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;M&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> q2 = [...q1];</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(q2);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//3.将伪数组转换为真正的数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(divs); <span class="comment">//此时还为伪数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> divArr = [...divs]; <span class="comment">//转换</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(divArr);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Symbol的介绍与创建"><a href="#Symbol的介绍与创建" class="headerlink" title="Symbol的介绍与创建"></a>Symbol的介绍与创建</h2><h3 id="创建Symbol"><a href="#创建Symbol" class="headerlink" title="创建Symbol"></a>创建Symbol</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Symbol</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s, <span class="keyword">typeof</span> s);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="title class_">Symbol</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2 === s3); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Symbol.for 创建  这个Symbol是一个函数对象</span></span><br><span class="line"><span class="keyword">let</span> s4 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s5 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s4 === s5); <span class="comment">//true</span></span><br><span class="line"><span class="comment">//不能与其他数据进行运算</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// srting symbol</span></span><br><span class="line"><span class="comment">// object</span></span><br><span class="line"><span class="comment">// null number</span></span><br><span class="line"><span class="comment">// boolean</span></span><br></pre></td></tr></table></figure>

<h3 id="Symbol创建对象属性"><a href="#Symbol创建对象属性" class="headerlink" title="Symbol创建对象属性"></a>Symbol创建对象属性</h3><p><strong>第一种：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向对象中添加方法 up down 属性name</span></span><br><span class="line"><span class="keyword">let</span> game = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> methods = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="title class_">Symbol</span>(<span class="string">&#x27;name&#x27;</span>),</span><br><span class="line">    <span class="attr">up</span>: <span class="title class_">Symbol</span>(<span class="string">&#x27;up&#x27;</span>),</span><br><span class="line">    <span class="attr">down</span>: <span class="title class_">Symbol</span>(<span class="string">&#x27;down&#x27;</span>),</span><br><span class="line">&#125;;</span><br><span class="line">game[methods.<span class="property">up</span>] = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以改变形状&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">game[methods.<span class="property">down</span>] = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以快速下降&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">game[methods.<span class="property">name</span>] = <span class="string">&#x27;A神&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(game[methods.<span class="property">name</span>]);</span><br><span class="line">game[methods.<span class="property">up</span>]();</span><br><span class="line">game[methods.<span class="property">down</span>]();</span><br></pre></td></tr></table></figure>

<p><strong>第二种：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> youxi = &#123;</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;name&#x27;</span>)]: <span class="string">&#x27;狼人杀&#x27;</span>,</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;say&#x27;</span>)]: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以发言&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;zibao&#x27;</span>)]: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以自爆&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(youxi[<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;name&#x27;</span>)]);</span><br><span class="line"><span class="comment">//Symbol.for(&#x27;say&#x27;)产生的标识是唯一的，所以可以调用定义在youxi里面的[Symbol.for(&#x27;say&#x27;)]方法</span></span><br><span class="line">youxi[<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;say&#x27;</span>)]();</span><br><span class="line">youxi[<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;zibao&#x27;</span>)]();</span><br></pre></td></tr></table></figure>

<h3 id="Symbol内置的一些属性"><a href="#Symbol内置的一些属性" class="headerlink" title="Symbol内置的一些属性"></a>Symbol内置的一些属性</h3><p><strong>Symbol.hasInstance方法</strong></p>
<blockquote>
<p>静态成员</p>
<ul>
<li>当此类被当作instanceof后值作为参数时触发</li>
<li>传递的<code>param</code>为被检测的对象</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">static</span>[<span class="title class_">Symbol</span>.<span class="property">hasInstance</span>](param) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(param);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我被用来检测类型了&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o <span class="keyword">instanceof</span> <span class="title class_">Person</span>);</span><br></pre></td></tr></table></figure>

<p>instanceof更详细的解释：</p>
<blockquote>
<p>用于检测构造函数的<code>prototype</code>属性是否出现在某个实例对象的原型链上</p>
<ul>
<li><code>instanceof</code>可以对不同的对象实例进行判断，判断方法是根据对象的原型链依次向下查询，如果obj2的原型属性存在obj1的原型链上，<code>obj1 instanceof obj2</code>值为true。</li>
<li>obj1是否是obj2的实例</li>
</ul>
</blockquote>
<p><strong>Symbol.isConcatSpreadable方法</strong></p>
<blockquote>
<ul>
<li>arr2[Symbol.isConcatSpreadable] &#x3D; false;</li>
<li>arr2[Symbol.isConcatSpreadable] &#x3D; true;</li>
<li>为false表示不展开合并</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">   <span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">   arr2[<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>] = <span class="literal">false</span>;</span><br><span class="line">   <span class="comment">// arr2[Symbol.isConcatSpreadable] = true;</span></span><br><span class="line">   <span class="comment">// 为false表示不展开合并</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">concat</span>(arr2)); <span class="comment">//[1, 2, 3, Array(3)]</span></span><br><span class="line"><span class="comment">//console.log(arr.concat(arr2)); //[1,2,3,4,5,6] 为true时</span></span><br></pre></td></tr></table></figure>

<h2 id="Set集合和Map对象"><a href="#Set集合和Map对象" class="headerlink" title="Set集合和Map对象"></a>Set集合和Map对象</h2><h3 id="set集合"><a href="#set集合" class="headerlink" title="set集合"></a>set集合</h3><blockquote>
<p>没有重复值的一堆数据</p>
<p>即便是传入的参数有重复值他也会自动将重复值削减为1个</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个set</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="comment">// 可以传入初始参数</span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;红&#x27;</span>, <span class="string">&#x27;黑&#x27;</span>, <span class="string">&#x27;白&#x27;</span>, <span class="string">&#x27;灰&#x27;</span>, <span class="string">&#x27;红&#x27;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2 <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2); <span class="comment">//Set(4) &#123;&#x27;红&#x27;, &#x27;黑&#x27;, &#x27;白&#x27;, &#x27;灰&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>内置的方法:</strong></p>
<ul>
<li><p>获取元素个数   <strong>.size</strong></p>
<ul>
<li><code>console.log(s2.size); // 4</code></li>
</ul>
</li>
<li><p>添加元素   <strong>.add</strong></p>
<ul>
<li><code>s2.add(&#39;蓝&#39;);</code></li>
<li><code>console.log(s2); //Set(5) &#123;&#39;红&#39;, &#39;黑&#39;, &#39;白&#39;, &#39;灰&#39;, &#39;蓝&#39;&#125;</code></li>
</ul>
</li>
<li><p>删除元素   <strong>.delete</strong></p>
<ul>
<li><code>s2.delete(&#39;黑&#39;);</code></li>
<li><code>console.log(s2); //Set(4) &#123;&#39;红&#39;, &#39;白&#39;, &#39;灰&#39;, &#39;蓝&#39;&#125;</code></li>
</ul>
</li>
<li><p>检测元素是否存在   <strong>.has</strong></p>
<ul>
<li><code>console.log(s2.has(&#39;橙&#39;)); //false</code></li>
</ul>
</li>
<li><p>清空集合   <strong>.clear</strong></p>
<ul>
<li><code>s2.clear();</code></li>
<li><code>console.log(s2); //Set(0) &#123;size: 0&#125;</code></li>
</ul>
</li>
</ul>
<p><strong>集合实践:</strong></p>
<p><code>let arr = [1, 2, 3, 4, 4, 5, 5, 6, 6, 9, 8, 7];</code></p>
<ol>
<li><p>数组去重</p>
<ul>
<li><pre><code class="js">        let result = [...new Set(arr)];
        console.log(result);
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. 交集 `let arr2 = [2, 4, 5, 9, 2, 8, 9];`</span><br><span class="line"></span><br><span class="line">   - ```js</span><br><span class="line">             let result = [...new Set(arr)].filter(item =&gt; &#123;</span><br><span class="line">                 let s2 = new Set(arr2);</span><br><span class="line">                 //将s2去重</span><br><span class="line">                 //利用has方法检测arr中的在s2中是否也存在</span><br><span class="line">                 if (s2.has(item)) &#123;</span><br><span class="line">                     return true;</span><br><span class="line">                 &#125; else &#123;</span><br><span class="line">                     return false;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;);</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><p>&#96;&#96;&#96;js<br>&#x2F;&#x2F; 简化写法：<br>    let result &#x3D; […new Set(arr)].filter(item &#x3D;&gt;<br>        new Set(arr2).has(item)<br>    );<br>    console.log(result);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. 并集</span><br><span class="line"></span><br><span class="line">   - ```js</span><br><span class="line">              let union = [...new Set([...arr, ...arr2])];</span><br><span class="line">              console.log(union);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>差集</p>
<ul>
<li>&#96;&#96;&#96;js<br>     let result &#x3D; […new Set(arr)].filter(item &#x3D;&gt;<br>         !(new Set(arr2).has(item))<br>     );<br>     console.log(result);<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### map对象</span><br><span class="line"></span><br><span class="line">map其实就是升级版对象，可以自定义key值和属性值</span><br><span class="line"></span><br><span class="line">- 声明map`let m = new Map();`</span><br><span class="line">- .set方法添加元素`(&quot;key值&quot;，“属性值”)`</span><br><span class="line">- .size获取长度`.size`</span><br><span class="line">- .delete删除对应属性`.delete(&#x27;属性&#x27;)`</span><br><span class="line">- .get获取方法`.get(&#x27;change&#x27;)`</span><br><span class="line">- .clear清空`.clear()`</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">        // 声明 Map</span><br><span class="line">        // 就是升级版对象 可以自定义key值和属性值</span><br><span class="line">        let m = new Map();</span><br><span class="line">        // .set方法添加元素 (&#x27;key值&#x27;,&#x27;属性值&#x27;)</span><br><span class="line">        m.set(&#x27;name&#x27;, &#x27;123&#x27;);</span><br><span class="line">        m.set(&#x27;change&#x27;, function() &#123;</span><br><span class="line">            console.log(&#x27;456&#x27;);</span><br><span class="line">        &#125;);</span><br><span class="line">        console.log(m);</span><br><span class="line"></span><br><span class="line">        var abc = &#123;</span><br><span class="line">            name: &#x27;789&#x27;</span><br><span class="line">        &#125;;</span><br><span class="line">        m.set(abc, [7, 8, 9]);</span><br><span class="line">        console.log(m);</span><br><span class="line"></span><br><span class="line">        // .size方法获取长度</span><br><span class="line">        console.log(m.size);</span><br><span class="line"></span><br><span class="line">        // 删除方法</span><br><span class="line">        m.delete(&#x27;name&#x27;);</span><br><span class="line">        console.log(m);</span><br><span class="line"></span><br><span class="line">        // 获取方法</span><br><span class="line">        console.log(m.get(&#x27;change&#x27;));</span><br><span class="line">        console.log(m.get(abc)); //[7,8,9]</span><br><span class="line"></span><br><span class="line">        // 清空</span><br><span class="line">        // m.clear();</span><br><span class="line">        // console.log(m);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="Generator-生成器函数"><a href="#Generator-生成器函数" class="headerlink" title="Generator 生成器函数"></a>Generator 生成器函数</h2><blockquote>
<p>Generator 函数有多种理解角度。语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。</p>
</blockquote>
<blockquote>
<p>生成器其实就是一个特殊的函数 必须要有 * 分割</p>
<ul>
<li><p>yield 相当于函数代码的分隔符</p>
</li>
<li><p>必须调用next方法才会执行</p>
</li>
<li><p>借助  iterator.next( )  才可以执行函数内代码</p>
</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello generator&#x27;</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;一直没有耳朵&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;一直没有尾巴&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;真奇怪&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">444</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">// hello generator</span></span><br><span class="line"><span class="comment">// &#123;value: &#x27;一直没有耳朵&#x27;, done: false&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">// hello generator</span></span><br><span class="line"><span class="comment">// &#123;value: &#x27;一直没有耳朵&#x27;, done: false&#125;</span></span><br><span class="line"><span class="comment">// 222</span></span><br><span class="line"><span class="comment">// &#123;value: &#x27;一直没有尾巴&#x27;, done: false&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">// hello generator</span></span><br><span class="line"><span class="comment">// &#123;value: &#x27;一直没有耳朵&#x27;, done: false&#125;</span></span><br><span class="line"><span class="comment">// 222</span></span><br><span class="line"><span class="comment">// &#123;value: &#x27;一直没有尾巴&#x27;, done: false&#125;</span></span><br><span class="line"><span class="comment">// 333</span></span><br><span class="line"><span class="comment">// &#123;value: &#x27;真奇怪&#x27;, done: false&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">// hello generator</span></span><br><span class="line"><span class="comment">// &#123;value: &#x27;一直没有耳朵&#x27;, done: false&#125;</span></span><br><span class="line"><span class="comment">// 222</span></span><br><span class="line"><span class="comment">// &#123;value: &#x27;一直没有尾巴&#x27;, done: false&#125;</span></span><br><span class="line"><span class="comment">// 333</span></span><br><span class="line"><span class="comment">// &#123;value: &#x27;真奇怪&#x27;, done: false&#125;</span></span><br><span class="line"><span class="comment">// 444</span></span><br><span class="line"><span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>

<p>可以看出<code>iterator.next()</code>的值是yield后面的值，并且是以对象形式返回。而没next()触发一次，都会执行一次yield和yield之间的代码块</p>
<p><strong>next()、throw()、return() 的共同点</strong></p>
<blockquote>
<p><code>next()</code>、<code>throw()</code>、<code>return()</code>这三个方法本质上是同一件事，可以放在一起理解。它们的作用都是让 Generator 函数恢复执行，并且使用不同的语句替换<code>yield</code>表达式。</p>
</blockquote>
<p><strong>next()函数参数：</strong></p>
<blockquote>
<p>next方法可以传入实参  相当于将BBB赋值给yield 111;</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span><br><span class="line">    <span class="keyword">let</span> one = <span class="keyword">yield</span> <span class="number">111</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(one);</span><br><span class="line">    <span class="keyword">let</span> two = <span class="keyword">yield</span> <span class="number">222</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(two);</span><br><span class="line">    <span class="keyword">let</span> three = <span class="keyword">yield</span> <span class="number">333</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(three);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行获取迭代器对象</span></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>(<span class="string">&#x27;AAA&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">// next方法可以传入实参  相当于将BBB赋值给yield 111;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&#x27;BBB&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&#x27;CCC&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&#x27;DDD&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p><strong>throw()将yield表达式替换成throw语句抛出错误</strong></p>
<blockquote>
<p><code>throw()</code>是将<code>yield</code>表达式替换成一个<code>throw</code>语句。</p>
</blockquote>
<p><strong>生成器函数解决回调地狱</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异步编程</span></span><br><span class="line"><span class="comment">// 1s后控制台输出111  2s后输出222   3s后输出333</span></span><br><span class="line"><span class="comment">// 回调地狱演示</span></span><br><span class="line"><span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(111);</span></span><br><span class="line"><span class="comment">//     setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//         console.log(222);</span></span><br><span class="line"><span class="comment">//         setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//             console.log(333);</span></span><br><span class="line"><span class="comment">//         &#125;, 3000);</span></span><br><span class="line"><span class="comment">//     &#125;, 2000);</span></span><br><span class="line"><span class="comment">// &#125;, 1000);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成器函数制作</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">one</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">        iterator.<span class="title function_">next</span>();</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">two</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">        iterator.<span class="title function_">next</span>();</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">three</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">        iterator.<span class="title function_">next</span>();</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">one</span>();</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">two</span>();</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">three</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//调用生成器函数</span></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>();</span><br></pre></td></tr></table></figure>









<h2 id="Promise对象"><a href="#Promise对象" class="headerlink" title="Promise对象"></a>Promise对象</h2><blockquote>
<ul>
<li>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。</li>
<li>Promise 是异步编程的一种解决方案，其实是一个构造函数，自己身上有all、reject、resolve这几个方法，原型上有then、catch等方法。</li>
<li>Promise的状态有 <strong>初始化(pending) 成功(fulfilled) 失败(rejected)</strong></li>
</ul>
</blockquote>
<p>单纯的new Promise或者有变量接收他，也会自执行。Promise中传入一个函数，函数的两个参数分别是成功执行形参和失败执行形参</p>
<ul>
<li><code>resolve(date);</code>成功执行函数</li>
<li><code>reject(err);</code>失败执行函数</li>
<li>另外：如果两个函数都存在则谁在上边就先执行谁，前提是调用过then方法并传参</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="comment">// 封装异步操作</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> date = <span class="string">&#x27;数据库中用户数数据&#x27;</span>;</span><br><span class="line">        <span class="title function_">resolve</span>(date);</span><br><span class="line">        <span class="comment">// let err = &#x27;数据调用失败&#x27;;</span></span><br><span class="line">        <span class="comment">// reject(err);</span></span><br><span class="line">    &#125;, <span class="number">1000</span>); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Promise内置的方法"><a href="#Promise内置的方法" class="headerlink" title="Promise内置的方法"></a>Promise内置的方法</h3><h4 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h4><p><code>Promise.all()</code>方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p>
<p>传入的p1,p2,p3都是Promise实例，只有三个状态都变成已成功，才会执行promiseAll的已成功</p>
<p>但是当有一个失败，就会触发catch错误执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promiseAll = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p3]);</span><br><span class="line">promiseAll.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;圆满结束&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;失败请求&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220728171606233.png" alt="image-20220728171606233"></p>
<h4 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h4><h3 id="原型上的方法"><a href="#原型上的方法" class="headerlink" title="原型上的方法"></a>原型上的方法</h3><p><strong>then方法</strong></p>
<p>承接上文中的<code>resolve(date)</code>和<code>reject(err)</code>,then中可以传入两个参数(函数)，第一个函数为成功执行所触发的函数<code>resolve(date)</code>，第二个函数为失败执行所触发的<code>reject(err)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="comment">//成功执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="comment">//失败执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>catch方法</strong></p>
<p>catch方法用于捕获失败的单独方法，then方法可以传入两个函数来捕获成功和失败，而catch是单独的一个专门捕获失败的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 设置p对象的状态为失败，并设置失败的值</span></span><br><span class="line">        <span class="comment">// reject(&quot;出错了!&quot;);</span></span><br><span class="line">        <span class="comment">// resolve(&quot;出错了!&quot;);</span></span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&quot;出错了!&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// catch方法用于捕获失败的单独方法</span></span><br><span class="line">p.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(reason);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>finally方法</strong></p>
<p><code>finally()</code>方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。</p>
<h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;children2&quot;</span>)</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;children3&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;children4&quot;</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;children5&quot;</span>)</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&quot;children6&quot;</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;children7&quot;</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// start</span></span><br><span class="line"><span class="comment">// children4</span></span><br><span class="line"><span class="comment">// children2</span></span><br><span class="line"><span class="comment">// children3</span></span><br><span class="line"><span class="comment">// children5</span></span><br><span class="line"><span class="comment">// children7</span></span><br><span class="line"><span class="comment">// children6</span></span><br></pre></td></tr></table></figure>

<ul>
<li>先将同步任务<code>start</code>执行</li>
<li>settimeout会被放到消息队列，也可以称它为宏任务</li>
<li>new Promise的机制是当new时就立即执行，所以输出<code>children4</code>,而后面的settimeout会再次放到消息队列进行排队</li>
<li>此时检查执行栈中有无同步任务，微任务队列有无任务，前往消息队列依次执行。</li>
<li>队列中第一个settimeout输出<code>children2</code>,而下面的Promise属于成功执行立即调用后面的.then，输出<code>children3</code></li>
<li>执行第二个settimeout中的<code>children5</code>,下面的resolve(“children6”)被调用，紧跟后面的.then中的任务被放到微任务队列，而此时消息队列已经为空。</li>
<li>执行微任务队列中的then，输出<code>children7</code>,settimeout被放到消息队列，此时微任务队列空。</li>
<li>最后微任务队列为空，执行消息队列中的console.log(res)输出<code>children6</code></li>
</ul>
<h2 id="Async-x2F-Await"><a href="#Async-x2F-Await" class="headerlink" title="Async&#x2F;Await"></a>Async&#x2F;Await</h2><h3 id="Async"><a href="#Async" class="headerlink" title="Async"></a>Async</h3><ul>
<li>async&#x2F;await是写异步代码的新方式，以前的方法有<strong>回调函数</strong>和<strong>Promise</strong>。</li>
<li>async&#x2F;await是基于Promise实现的，它不能用于普通的回调函数。</li>
<li>async&#x2F;await与Promise一样，是非阻塞的。</li>
<li><strong>async&#x2F;await使得异步代码看起来像同步代码，这正是它的魔力所在。</strong></li>
</ul>
<p><code>async/await</code>实际上是<code>Generator</code>的语法糖。顾名思义，<code>async</code>关键字代表后面的函数中有异步操作，<code>await</code>表示等待一个异步方法执行完成。声明异步函数只需在普通函数前面加一个关键字<code>async</code>即可，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">funcA</span>(<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><code>async</code> 函数返回一个Promise对象（如果指定的返回值不是Promise对象，也返回一个Promise，只不过立即 <code>resolve </code>，处理方式同 <code>then </code>方法），因此 <code>async </code>函数通过 <code>return </code>返回的值，会成为 <code>then </code>方法中回调函数的参数：</p>
<blockquote>
<p><code>async</code>返回的Promise函数实际上是Promise.resolve()成功回调</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">funcA</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;hello!&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">funcA</span>().<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// hello!</span></span><br></pre></td></tr></table></figure>

<h3 id="Await"><a href="#Await" class="headerlink" title="Await"></a>Await</h3><p>顾名思义， <code>await </code> 就是异步等待，它等待的是一个Promise，因此 <code>await </code>后面应该写一个Promise对象，如果不是Promise对象，那么会被转成一个立即 <code>resolve </code>的Promise。 <code>async </code>函数被调用后就立即执行，但是一旦遇到 <code>await </code>就会先返回，等到异步操作执行完成，再接着执行函数体内后面的语句。总结一下就是：<code>async</code>函数调用不会造成代码的阻塞，但是<code>await</code>会引起<code>async</code>函数内部代码的阻塞。看看下面这个例子：</p>
<ol>
<li>await 必须写在async函数中</li>
<li>await 右侧的表达式一般为promise对象</li>
<li>await 返回的是promise成功的值</li>
<li>await 的promise失败了,就会抛出异常，需要通过try…catch捕获处理</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="title function_">resolve</span>(<span class="string">&#x27;成功的值！&#x27;</span>);</span><br><span class="line">    <span class="comment">// reject(&#x27;失败了！&#x27;);</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="keyword">await</span> p;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="comment">// 捕获失败</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure>

<h3 id="例题：-1"><a href="#例题：-1" class="headerlink" title="例题："></a>例题：</h3><p>01：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 start&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">    <span class="comment">//await async2(), 这里的代码相当于new Promise(()=&gt;&#123;async2()&#125;)</span></span><br><span class="line">    <span class="comment">//而将 await 后面的全部代码放到.then()中去</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 end&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async2&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script start&quot;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout&quot;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>)</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise2&quot;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script end&quot;</span>);</span><br><span class="line"><span class="comment">// script start</span></span><br><span class="line"><span class="comment">// async1 start</span></span><br><span class="line"><span class="comment">// async2</span></span><br><span class="line"><span class="comment">// promise1</span></span><br><span class="line"><span class="comment">// script end</span></span><br><span class="line"><span class="comment">// async1 end</span></span><br><span class="line"><span class="comment">// promise2</span></span><br><span class="line"><span class="comment">// setTimeout</span></span><br></pre></td></tr></table></figure>

<ol>
<li>定时器的事件会被放置在消息队列</li>
<li>promise实例对象的then方法会被放置在微任务队列</li>
<li>等待调用栈为空时再执行微任务队列和消息队列</li>
<li>先执行微任务队列再执行消息队列</li>
</ol>
<p>02：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;children2&quot;</span>)</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;children3&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;children4&quot;</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;children5&quot;</span>)</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&quot;children6&quot;</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;children7&quot;</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// start</span></span><br><span class="line"><span class="comment">// children4</span></span><br><span class="line"><span class="comment">// children2</span></span><br><span class="line"><span class="comment">// children3</span></span><br><span class="line"><span class="comment">// children5</span></span><br><span class="line"><span class="comment">// children7</span></span><br><span class="line"><span class="comment">// children6</span></span><br></pre></td></tr></table></figure>

<p>03:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">5</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(resolve);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">func1</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;新的resolve&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    p.<span class="title function_">then</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span>);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun2</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 新的resolve</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>04:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    <span class="comment">// 会先执行async2函数， 然后跳出async1， 同时将返回的promise放入微队列</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testAwait&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise3&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise4&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>);</span><br></pre></td></tr></table></figure>









<h2 id="iterator迭代器-遍历器"><a href="#iterator迭代器-遍历器" class="headerlink" title="iterator迭代器(遍历器)"></a>iterator迭代器(遍历器)</h2><p><em>有iterator接口 即可实现迭代器</em></p>
<p><strong>工作原理</strong></p>
<ol>
<li>创建一个指针对象，指向当前数据结构的起始位置</li>
<li>第一次调用对象的next方法，指针自动指向数据结构的第一个成员</li>
<li>接下来不断调用next方法，指针一直往后移动，直到指向最后一个成员</li>
<li>每调用next方法返回一个包含value和done属性的对象</li>
</ol>
<blockquote>
<p>注：需要自定义遍历数据的时候，要想到迭代器</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//具有iterator接口 即可实现迭代器</span></span><br><span class="line"><span class="comment">// 声明一个数组</span></span><br><span class="line"><span class="keyword">const</span> xiyou = [<span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;孙悟空&#x27;</span>, <span class="string">&#x27;猪八戒&#x27;</span>, <span class="string">&#x27;沙僧&#x27;</span>];</span><br><span class="line"><span class="comment">//使用for of遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> xiyou) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = xiyou[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="comment">// 调用对象的next方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">//唐僧</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">//孙悟空</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">//猪八戒</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">//沙僧</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>









<h2 id="ES6-class类"><a href="#ES6-class类" class="headerlink" title="ES6-class类"></a>ES6-class类</h2><h3 id="es5的构造函数创建对象"><a href="#es5的构造函数创建对象" class="headerlink" title="es5的构造函数创建对象"></a>es5的构造函数创建对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// es5构造函数创建对象-------------------------</span></span><br><span class="line"><span class="comment">// // 利用构造函数创建对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Phone</span>(<span class="params">name, price</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 在原型上添加方法</span></span><br><span class="line"><span class="title class_">Phone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以打电话!&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">HuaWei</span> = <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&#x27;华为&#x27;</span>, <span class="number">1999</span>);</span><br><span class="line"><span class="title class_">HuaWei</span>.<span class="title function_">call</span>();</span><br></pre></td></tr></table></figure>

<h4 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//手机</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Phone</span>(<span class="params">brand, price</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在原型上添加call方法</span></span><br><span class="line"><span class="title class_">Phone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以打电话&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//智能手机</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SmartPhone</span>(<span class="params">brand, price, color, size</span>) &#123;</span><br><span class="line">    <span class="comment">//利用call方法改变this指向</span></span><br><span class="line">    <span class="title class_">Phone</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, brand, price);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置子级构造函数的原型</span></span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line"><span class="comment">// SmartPhone.prototype = Object.create(Phone.prototype);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 矫正</span></span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">SmartPhone</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明子类方法</span></span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">photo</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;拍照功能&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">playGame</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;玩游戏&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化一个对象</span></span><br><span class="line"><span class="keyword">const</span> chuizi = <span class="keyword">new</span> <span class="title class_">SmartPhone</span>(<span class="string">&#x27;锤子&#x27;</span>, <span class="number">1999</span>, <span class="string">&#x27;黑色&#x27;</span>, <span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(chuizi);</span><br><span class="line">chuizi.<span class="title function_">photo</span>();</span><br><span class="line">chuizi.<span class="title function_">call</span>();</span><br></pre></td></tr></table></figure>

<h3 id="es6使用class类创建对象"><a href="#es6使用class类创建对象" class="headerlink" title="es6使用class类创建对象"></a>es6使用class类创建对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone2</span> &#123;</span><br><span class="line">    <span class="comment">//构造方法 名字不能修改</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, price</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法必须使用该语法,不能使用ES5的对象完整形式</span></span><br><span class="line">    <span class="title function_">call</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以打电话!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> onePlus = <span class="keyword">new</span> <span class="title class_">Phone2</span>(<span class="string">&#x27;一加&#x27;</span>, <span class="number">1999</span>);</span><br><span class="line">onePlus.<span class="title function_">call</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(onePlus);</span><br></pre></td></tr></table></figure>

<h4 id="继承：-1"><a href="#继承：-1" class="headerlink" title="继承："></a>继承：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个Phone类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand, price</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//父类成员属性和方法</span></span><br><span class="line">    <span class="title function_">call</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打电话&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个子类继承Phone类</span></span><br><span class="line"><span class="comment">// extends 关键词</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPhone</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Phone</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand, price, color, size</span>) &#123;</span><br><span class="line">        <span class="comment">// super方法类似于Phone.call(this,brand,price)</span></span><br><span class="line">        <span class="variable language_">super</span>(brand, price);</span><br><span class="line">        <span class="comment">// super子类调用父类的构造方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">photo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;拍照&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">playGame</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;玩游戏&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">call</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">call</span>(); <span class="comment">//通过super方法可以调用被继承父级的call方法</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;视频通话&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> xiaomi = <span class="keyword">new</span> <span class="title class_">SmartPhone</span>(<span class="string">&#x27;小米&#x27;</span>, <span class="number">1999</span>, <span class="string">&#x27;黑色&#x27;</span>, <span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xiaomi);</span><br><span class="line"></span><br><span class="line">xiaomi.<span class="title function_">call</span>();</span><br></pre></td></tr></table></figure>

<h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><ul>
<li>静态成员不能被实例化的对象所调用，静态成员在谁身上，谁才可以调用</li>
</ul>
<p>什么是静态成员，静态成员就是你所创建的构造函数不在内部添加属性或者方法，而是在外部通过调用的方式添加的属性或者方法称为静态成员，例如：</p>
<blockquote>
<p>函数其实又叫函数对象，将属性或者方法打点调添加的属性或方法就叫静态成员</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Phone</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// ---------------------------------</span></span><br><span class="line"><span class="comment">// 此处添加的属性或方法是添加在了Phone(函数对象)上</span></span><br><span class="line"><span class="comment">// 其实例化对象不会存在这些属性或者方法</span></span><br><span class="line"><span class="title class_">Phone</span>.<span class="property">nam</span> = <span class="string">&#x27;手机&#x27;</span>;</span><br><span class="line"><span class="title class_">Phone</span>.<span class="property">call</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以改变世界&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 这样的属性称之为静态成员</span></span><br><span class="line"><span class="comment">// ---------------------------------</span></span><br><span class="line"><span class="keyword">let</span> pho = <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"><span class="comment">//console.log(pho.nam); //underfined</span></span><br><span class="line"><span class="comment">//pho.call(); //报错:call方法不是实例对象的方法,不是pho的方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pho); <span class="comment">//空</span></span><br><span class="line"><span class="comment">// 在Phone函数原型上添加方法</span></span><br><span class="line"><span class="title class_">Phone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">size</span> = <span class="string">&#x27;123cm&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pho.<span class="property">size</span>); <span class="comment">//123cm</span></span><br><span class="line"><span class="title class_">Phone</span>.<span class="title function_">call</span>(); <span class="comment">//我可以改变世界</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Phone</span>.<span class="property">nam</span>); <span class="comment">//手机</span></span><br></pre></td></tr></table></figure>

<h4 id="class中添静态成员的方法"><a href="#class中添静态成员的方法" class="headerlink" title="class中添静态成员的方法"></a>class中添静态成员的方法</h4><p>使用<code>static fun()&#123;&#125;</code>在这个类身上添加静态成员，<em>实例对象无法使用</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone2</span> &#123;</span><br><span class="line">    <span class="comment">// 静态属性static标注的属性或者方法是属于类的不会属于实例化对象pho2</span></span><br><span class="line">    <span class="keyword">static</span> nam = <span class="string">&#x27;手机&#x27;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">change</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以改变世界&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> pho2 = <span class="keyword">new</span> <span class="title class_">Phone2</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pho2.<span class="property">nam</span>); <span class="comment">//underfined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Phone2</span>.<span class="property">nam</span>); <span class="comment">//手机</span></span><br></pre></td></tr></table></figure>

<h2 id="Proxy代理器"><a href="#Proxy代理器" class="headerlink" title="Proxy代理器"></a>Proxy代理器</h2><h3 id="Proxy介绍"><a href="#Proxy介绍" class="headerlink" title="Proxy介绍"></a>Proxy介绍</h3><blockquote>
<p>Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。</p>
<p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。</p>
</blockquote>
<p>Proxy 是一个构造函数可以通过<code>var proxy = new Proxy(target, handler);</code>实例化对象</p>
<ul>
<li><code>target</code>参数表示所要拦截的目标对象</li>
<li><code>handler</code>参数也是一个对象，用来定制拦截行为。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">target, propKey</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">35</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.<span class="property">time</span> <span class="comment">// 35</span></span><br><span class="line">proxy.<span class="property">name</span> <span class="comment">// 35</span></span><br><span class="line">proxy.<span class="property">title</span> <span class="comment">// 35</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以看到当外界想要获取target对象中的属性时，就会触发get拦截</p>
</blockquote>
<h3 id="class类中的getter和setter"><a href="#class类中的getter和setter" class="headerlink" title="class类中的getter和setter"></a>class类中的getter和setter</h3><p>与 ES5 一样， 在 Class 内部可以使用get和set关键字， 对某个属性设置存值函数和取值函数， 拦截该属性的存取行为</p>
<ul>
<li><p>get：当外界读取触发</p>
<ul>
<li><code>get</code>方法用于拦截某个属性的读取操作，可以接受三个参数，依次为目标对象、属性名和 proxy 实例本身（严格地说，是操作行为所针对的对象），其中最后一个参数可选。</li>
</ul>
</li>
<li><p>set：当外界修改时触发</p>
<ul>
<li><code>set</code>方法用来拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和 Proxy 实例本身，其中最后一个参数可选。</li>
</ul>
</li>
</ul>
<blockquote>
<p>被检测的属性不必要再放入到constructor再重新改变指向，其属性值是get 后面函数return的值</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//get和set</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;名字被读取&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;A神&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">price</span>() &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;价格属性被读取&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">        <span class="comment">//return 返回值给了s.price</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">price</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;价格属性被修改成&#x27;</span> + newVal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&#x27;18&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">price</span>); <span class="comment">//价格属性被读取</span></span><br><span class="line"><span class="comment">//                      123</span></span><br><span class="line">s.<span class="property">price</span> = <span class="string">&#x27;abc&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h2><h3 id="Reflect介绍"><a href="#Reflect介绍" class="headerlink" title="Reflect介绍"></a>Reflect介绍</h3><blockquote>
<p>Reflect反射</p>
<p><code>Reflect</code>对象与<code>Proxy</code>对象一样，也是 ES6 为了操作对象而提供的新 API。<code>Reflect</code>对象的设计目的有这样几个。</p>
</blockquote>
<h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p><code>Reflect</code>对象一共有 13 个静态方法。</p>
<p><strong>Reflect.get(target,name,receiver)</strong></p>
<blockquote>
<p><code>Reflect.get</code>方法查找并返回<code>target</code>对象的<code>name</code>属性，如果没有该属性，则返回<code>undefined</code>。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**Reflect.set(target,name,value,receiver)**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt; `</span><span class="title class_">Reflect</span>.<span class="property">set</span><span class="string">`方法设置`</span>target<span class="string">`对象的`</span>name<span class="string">`属性等于`</span>value<span class="string">`。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br></pre></td></tr></table></figure>

<p><strong>Reflect.deleteProperty(obj,name)</strong></p>
<p><code>Reflect.deleteProperty</code>方法等同于<code>delete obj[name]</code>，用于删除对象的属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myObj = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旧写法</span></span><br><span class="line"><span class="keyword">delete</span> myObj.<span class="property">foo</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新写法</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(myObj, <span class="string">&#x27;foo&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>Reflect.defineProperty(target, propertyKey, attributes)</strong></p>
<blockquote>
<p><code>Reflect.defineProperty</code>方法基本等同于<code>Object.defineProperty</code>，用来为对象定义属性。未来，后者会被逐渐废除，请从现在开始就使用<code>Reflect.defineProperty</code>代替它。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyDate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">/*…*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旧写法</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">MyDate</span>, <span class="string">&#x27;now&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="function">() =&gt;</span> <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新写法</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">defineProperty</span>(<span class="title class_">MyDate</span>, <span class="string">&#x27;now&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="function">() =&gt;</span> <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果<code>Reflect.defineProperty</code>的第一个参数不是对象，就会抛出错误，比如<code>Reflect.defineProperty(1, &#39;foo&#39;)</code>。</p>
</blockquote>
<h2 id="Object对象方法扩展"><a href="#Object对象方法扩展" class="headerlink" title="Object对象方法扩展"></a>Object对象方法扩展</h2><h3 id="1-Object-is-判断两个值是否完全相等"><a href="#1-Object-is-判断两个值是否完全相等" class="headerlink" title="1.Object.is 判断两个值是否完全相等"></a>1.Object.is 判断两个值是否完全相等</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">120</span>, <span class="number">120</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">120</span>, <span class="string">&#x27;120&#x27;</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h3 id="2-Object-assign对象的替换-x2F-合并"><a href="#2-Object-assign对象的替换-x2F-合并" class="headerlink" title="2.Object.assign对象的替换&#x2F;合并"></a>2.Object.assign对象的替换&#x2F;合并</h3><blockquote>
<p><code>Object.assign()</code> 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</p>
</blockquote>
<ul>
<li><p><strong>Object.assign(‘被替换对象’,’替换对象’)</strong> 对象的合并</p>
<ul>
<li><p>Object.assign(target,…sources)</p>
</li>
<li><p>target：新对象，用来接受的对象</p>
<p>sources：源对象(可多个)</p>
</li>
</ul>
</li>
<li><p>如果第一个对象有第二个没有的属性,替换之后也同样保留没有的属性</p>
</li>
<li><p>将多个源对象的可枚举属性复制到自己的目标对象中，只会复制一层</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config1 = &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;abcdefg&#x27;</span>,</span><br><span class="line">    <span class="attr">prot</span>: <span class="number">3306</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">pass</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">test</span>: <span class="string">&#x27;text&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> config2 = &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;http://&#x27;</span>,</span><br><span class="line">    <span class="attr">prot</span>: <span class="number">33006</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;xxx.com&#x27;</span>,</span><br><span class="line">    <span class="attr">pass</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">    <span class="attr">test2</span>: <span class="string">&#x27;text&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(config1, config2));</span><br></pre></td></tr></table></figure>

<h3 id="3-设置获取原型对象"><a href="#3-设置获取原型对象" class="headerlink" title="3.设置获取原型对象"></a>3.设置获取原型对象</h3><blockquote>
<ul>
<li>Object.setPrototypeOf 设置原型对象<ul>
<li><code>Object.setPrototypeOf(obj, prototype)</code></li>
</ul>
</li>
<li>Object.getPrototypeOf 获取原型对象</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> cities = &#123;</span><br><span class="line">    <span class="attr">shuzu</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(school, cities)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(school); <span class="comment">//&#123;name: &#x27;abc&#x27;&#125; 此时他的原型对象已经指向了cities</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(school));</span><br></pre></td></tr></table></figure>


<h3 id="4-Object-keys"><a href="#4-Object-keys" class="headerlink" title="4.Object.keys()"></a>4.Object.keys()</h3><blockquote>
<p>ES5 引入了<code>Object.keys</code>方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br><span class="line"><span class="comment">// [&quot;foo&quot;, &quot;baz&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="5-Object-defineProperty方法"><a href="#5-Object-defineProperty方法" class="headerlink" title="5.Object.defineProperty方法"></a>5.Object.defineProperty方法</h3><p><em>参数</em></p>
<ol>
<li>属性所在的对象</li>
<li>属性的名字（被监听的属性）</li>
<li>一个描述符对象</li>
</ol>
<blockquote>
<p>属性描述符：</p>
<ul>
<li>configurable：是否可配置，取值为true时，该属性能够从对象删除，可以修改该属性的描述符</li>
<li>enumerable：是否可枚举，取值为true可枚举，可以通过for-in遍历</li>
<li>value：值，数据描述符有value，存取描述符没有value</li>
<li>witable：是否可修改，取值true，该属性取值可以修改</li>
</ul>
<p>存取描述符：</p>
<ul>
<li>get()：在读取属性时调用的函数，默认值是undefined</li>
<li>set()：在写入属性的时候调用的函数，默认值是undefined</li>
</ul>
</blockquote>
<p><strong>模拟Vue中v-module数据双向绑定原理</strong></p>
<blockquote>
<p>通过对数据的监听，当数据改变进行拦截，触发set() 函数</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#myInput</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#contain</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid salmon;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;myInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;contain&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> text;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">data</span> = &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> oIn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myInput&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;contain&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      oIn.<span class="title function_">addEventListener</span>(<span class="string">&quot;input&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        text = e.<span class="property">target</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(text);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">data</span>.<span class="property">value</span> = text;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">window</span>.<span class="property">data</span>, <span class="string">&quot;value&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">set</span>(<span class="params">v</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          oDiv.<span class="property">innerHTML</span> = v;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="数值的扩展"><a href="#数值的扩展" class="headerlink" title="数值的扩展"></a>数值的扩展</h2><h3 id="1-Number-EPSILON"><a href="#1-Number-EPSILON" class="headerlink" title="1.Number.EPSILON"></a>1.Number.EPSILON</h3><blockquote>
<ul>
<li>EPSILON属性的值接近于2.2204460492503130808472633361816E-16</li>
</ul>
<p><em>Number.EPSILON</em>是JavaScript 表示的最小精度</p>
<p>由于js的计算机制，0.1+0.2&#x3D;0.30000000000000004</p>
</blockquote>
<p>封装一个判断结果的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">equal</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="comment">// Math.abs(x) 函数返回指定数字 “x“ 的绝对值</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(a - b) &lt; <span class="title class_">Number</span>.<span class="property">EPSILON</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">equal</span>(<span class="number">0.1</span> + <span class="number">0.2</span>, <span class="number">0.3</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="2-Number-isFinite"><a href="#2-Number-isFinite" class="headerlink" title="2.Number.isFinite"></a>2.Number.isFinite</h3><blockquote>
<p>Number.isFinite 检测一个数值 是否为有限数</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">100</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">100</span> / <span class="number">0</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="title class_">Infinity</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h3 id="3-Number-isNaN"><a href="#3-Number-isNaN" class="headerlink" title="3.Number.isNaN"></a>3.Number.isNaN</h3><blockquote>
<p>Number.isNaN 检测一个数值是否为NaN</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="number">123</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h3 id="4-Number-parseInt-x2F-Number-parseFloat"><a href="#4-Number-parseInt-x2F-Number-parseFloat" class="headerlink" title="4.Number.parseInt()&#x2F;Number.parseFloat()"></a>4.Number.parseInt()&#x2F;Number.parseFloat()</h3><blockquote>
<p>Number.parseInt() Number.parseFloat()字符串转整数</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">parseInt</span>(<span class="string">&#x27;521.145abx&#x27;</span>)); <span class="comment">//521</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">parseFloat</span>(<span class="string">&#x27;521.145abx&#x27;</span>)); <span class="comment">//521.145</span></span><br></pre></td></tr></table></figure>

<h3 id="5-Number-isInteger"><a href="#5-Number-isInteger" class="headerlink" title="5.Number.isInteger()"></a>5.Number.isInteger()</h3><blockquote>
<p>Number.isInteger()判断一个属是否为整数</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">5</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">2.5</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h3 id="6-Math-trunc"><a href="#6-Math-trunc" class="headerlink" title="6.Math.trunc()"></a>6.Math.trunc()</h3><blockquote>
<p>Math.trunc()将数字的小数部分抹掉</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">trunc</span>(<span class="number">2.5</span>)); <span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<h3 id="7-Math-sign"><a href="#7-Math-sign" class="headerlink" title="7.Math.sign()"></a>7.Math.sign()</h3><blockquote>
<p>Math.sign() 判断一个数到底为正数 负数 零</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(<span class="number">100</span>)); <span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(-<span class="number">100</span>)); <span class="comment">//-1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(<span class="number">0</span>)); <span class="comment">//0</span></span><br></pre></td></tr></table></figure>

<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><h3 id="暴露数据"><a href="#暴露数据" class="headerlink" title="暴露数据"></a>暴露数据</h3><h4 id="1-分别暴露"><a href="#1-分别暴露" class="headerlink" title="1.分别暴露"></a>1.分别暴露</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用export命令暴露数据</span></span><br><span class="line"><span class="comment">// 分别暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> school = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">call</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;123456789&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-统一暴露"><a href="#2-统一暴露" class="headerlink" title="2.统一暴露"></a>2.统一暴露</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统一暴露</span></span><br><span class="line"><span class="keyword">let</span> school = <span class="string">&#x27;def&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">call</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;987654321&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; school, call &#125;;</span><br></pre></td></tr></table></figure>

<h4 id="3-默认暴露"><a href="#3-默认暴露" class="headerlink" title="3.默认暴露"></a>3.默认暴露</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">school</span>: <span class="string">&#x27;默认暴露&#x27;</span>,</span><br><span class="line">    <span class="title function_">change</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;默认暴露&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时如果要调用需要加.default见下文默认暴露的接收</span></span><br></pre></td></tr></table></figure>

<h3 id="引入数据"><a href="#引入数据" class="headerlink" title="引入数据"></a>引入数据</h3><h4 id="1-通用的引入方式"><a href="#1-通用的引入方式" class="headerlink" title="1.通用的引入方式"></a>1.通用的引入方式</h4><blockquote>
<p>通用引入是对导入的文件进行赋值，当你需要调用的时候直接通过<code>js1.</code>调用你想要的属性或者方法</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- // 1.通用的引入方法--------------------------------- --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> * <span class="keyword">as</span> js1 <span class="keyword">from</span> <span class="string">&quot;./36-js模块.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(js1.<span class="property">school</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(js1); </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> * <span class="keyword">as</span> js2 <span class="keyword">from</span> <span class="string">&quot;./36-js模块2.js&quot;</span>; </span></span><br><span class="line"><span class="language-javascript">    js2.<span class="title function_">call</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(js2);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-解构赋值形式导入或重命名"><a href="#2-解构赋值形式导入或重命名" class="headerlink" title="2.解构赋值形式导入或重命名"></a>2.解构赋值形式导入或重命名</h4><blockquote>
<p>对接收的数据进行重命名，这时候你只需要使用你as后的名字即可使用导入的变量或方法</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">import</span> &#123;school,call&#125; <span class="keyword">from</span> <span class="string">&quot;./36-js模块.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">import</span> &#123;school <span class="keyword">as</span> school2,call <span class="keyword">as</span> call2&#125; <span class="keyword">from</span> <span class="string">&quot;./36-js模块2.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//利用as为重复的数据重命名</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(school);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(school2);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(call);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(call2);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-默认暴露的接收"><a href="#3-默认暴露的接收" class="headerlink" title="3.默认暴露的接收"></a>3.默认暴露的接收</h4><blockquote>
<p>也可以不用对其重命名，那这样的话就相当于是第四个方法接收</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 为默认暴露，所以调用需要在进入default层级 </span></span><br><span class="line">    <span class="comment">// js2.default.change(); </span></span><br><span class="line">    <span class="comment">// 默认暴露解构赋值条件 </span></span><br><span class="line">    <span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> def&#125; <span class="keyword">from</span> <span class="string">&quot;./36-js模块3.js&quot;</span>; </span><br><span class="line">    <span class="comment">// 如果是默认暴露，则需要对default进行as别命名 </span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(def.<span class="property">school</span>); </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(def.<span class="property">change</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="4-简便形式接收"><a href="#4-简便形式接收" class="headerlink" title="4.简便形式接收"></a>4.简便形式接收</h4><blockquote>
<p>简便形式 只针对默认暴露</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> m3 <span class="keyword">from</span> <span class="string">&quot;./36-js模块3.js&quot;</span>; </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(m3); </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>es6</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Web开发</title>
    <url>/found404.io/2022/07/14/Web%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="Web开发模式"><a href="#Web开发模式" class="headerlink" title="Web开发模式"></a>Web开发模式</h1><blockquote>
<p>目前主流的Web开发模式有两种，分别是：</p>
<ol>
<li>基于服务端渲染的传统web开发模式 😶</li>
<li>基于前后端分离的新型web开发模式 😮</li>
</ol>
</blockquote>
<span id="more"></span>

<h2 id="1-服务端渲染的web开发模式"><a href="#1-服务端渲染的web开发模式" class="headerlink" title="1.服务端渲染的web开发模式"></a>1.服务端渲染的web开发模式</h2><p>服务端渲染的概念:服务器发送给客户端的HTML页面，是在服务器通过字符串的拼接，动态生成的。因此，客户端不需要使用Ajax这样的技术额外请求页面的数据。代码示例如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220713230024974.png" alt="image-20220713230024974"></p>
<h3 id="服务端渲染的优缺点"><a href="#服务端渲染的优缺点" class="headerlink" title="服务端渲染的优缺点"></a>服务端渲染的优缺点</h3><p><strong>优点:</strong></p>
<ol>
<li>前端耗时少。 因为服务器端负责动态生成HTML内容,浏览器只需要直接渲染页面即可。尤其是移动端，更省电。</li>
<li>有利于SEO. 因为服务器端响应的是完整的HTML页面内容,所以爬虫更容易爬取获得信息，更有利于SEO</li>
</ol>
<p><strong>缺点:</strong></p>
<ol>
<li>占用服务器端资源。 即服务器端完成HTML页面内容的拼接，如果请求较多,会对服务器造成一定的访问压力。</li>
<li>不利于前后端分离, 开发效率低。使用服务器端渲染，则无法进行分工合作,尤其对于前端复杂度高的项目,不利于项目高效开发。</li>
</ol>
<h2 id="2-前后端分离的优缺点"><a href="#2-前后端分离的优缺点" class="headerlink" title="2.前后端分离的优缺点"></a>2.前后端分离的优缺点</h2><h3 id="服务端渲染的优缺点-1"><a href="#服务端渲染的优缺点-1" class="headerlink" title="服务端渲染的优缺点"></a>服务端渲染的优缺点</h3><p><strong>优点:</strong></p>
<ol>
<li>开发体验好。 前端专注于UI页面的开发,后端专注于api的开发,且前端有更多的选择性。</li>
<li>用户体验好。 Ajax 技术的广泛应用,极大的提高了用户的体验，可以轻松实现页面的局部刷新</li>
<li>减轻了服务器端的渲染压力。因为页面最终是在每个用户的浏览器中生成的。</li>
</ol>
<p><strong>缺点:</strong></p>
<ol>
<li>不利于SEO(爬虫).因为完整的HTML页面需要在客户端动态拼接完成，所以爬虫对无法爬取页面的有效信息。(解决方案:利用Vue. React 等前端框架的SSR (server side render)技术能够很好的解决SEO问题! )</li>
</ol>
<h2 id="如何选择Web开发模式"><a href="#如何选择Web开发模式" class="headerlink" title="如何选择Web开发模式"></a>如何选择Web开发模式</h2><p>不谈业务场景而盲目选择使用何种开发模式都是耍流氓。</p>
<blockquote>
<ol>
<li>比如企业级网站,主要功能是展示而没有复杂的交互,并且需要良好的SEO,则这时我们就需要使用服务器端渲染;</li>
<li>而类似后台管理项目，交互性比较强，不需要考虑SEO,那么就可以使用前后端分离的开发模式。</li>
</ol>
</blockquote>
<p>另外，具体使用何种开发模式并不是绝对的，为为同时兼顾了首页的渲染速度和前后端分离的开发效率，一些网站采用了首屏服务器端渲染+其他页面前后端分离的开发模式。</p>
<h1 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h1><h2 id="什么是身份认证"><a href="#什么是身份认证" class="headerlink" title="什么是身份认证"></a>什么是身份认证</h2><p>身份认证(Authentication) 又称”身份验证”、”鉴权” ，是指通过-定的手段，完成对用户身份的确认。</p>
<ul>
<li>日常生活中的身份认证随处可见，例如:高铁的验票乘车，手机的密码或指纹解锁，支付宝或微信的支付密码等。</li>
<li>在Web开发中，也涉及到用户身份的认证，例如:各大网站的手机验证码登录、邮箱密码登录、二维码登录等。</li>
</ul>
<h2 id="不同开发模式下的身份认证"><a href="#不同开发模式下的身份认证" class="headerlink" title="不同开发模式下的身份认证"></a>不同开发模式下的身份认证</h2><p>对于服务端渲染和前后端分离这两种开发模式来说，分别有着不同的身份认证方案:</p>
<ol>
<li>服各端渲染推荐使用<strong>Session</strong>认证机制</li>
<li>前后端分离推荐使用<strong>JWT</strong>认证机制</li>
</ol>
<h2 id="Session认证机制"><a href="#Session认证机制" class="headerlink" title="Session认证机制"></a>Session认证机制</h2><h3 id="HTTP协议的无状态性"><a href="#HTTP协议的无状态性" class="headerlink" title="HTTP协议的无状态性"></a>HTTP协议的无状态性</h3><p>了解HTTP协议的无状态性是进一步学习Session认证机制的必要前提。<br>HTTP协议的无状态性,指的是客户端的每次HTTP请求都是独立的，连续多个请求之间没有直接的关系，服务器不会主动保留每次HTTP请求的状态。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714192603710.png" alt="image-20220714192603710"></p>
<h3 id="如何突破HTTP无状态的限制"><a href="#如何突破HTTP无状态的限制" class="headerlink" title="如何突破HTTP无状态的限制"></a>如何突破HTTP无状态的限制</h3><p>对于超市来说，为了方便收银员在进行结算时给VIP用户打折,超市可以为每个VIP用户发放会员卡。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714192702651.png" alt="image-20220714192702651"></p>
<blockquote>
<p>注意:现实生活中的会员卡身份认证方式，在Web开发中的专业术语叫做<strong>Cookie</strong>。</p>
</blockquote>
<h3 id="什么是Cookie"><a href="#什么是Cookie" class="headerlink" title="什么是Cookie"></a>什么是Cookie</h3><blockquote>
<p>Cookie是存储在用户浏览器中的一段不超过4 KB的字符串。它由一一个名称(Name)、-个值(Value) 和其它几个用于控制Cookie有效期、安全性、使用范围的可选属性组成。</p>
</blockquote>
<p>不同域名下的Cookie各自独立，每当客户端发起请求时，会自动把当前域名下所有未过期的Cookie一同发送到服务器。</p>
<p>Cookie的几大特性:</p>
<ol>
<li>自动发送</li>
<li>域名独立</li>
<li>过期时限</li>
<li>4KB 限制</li>
</ol>
<h4 id="Cookie在身份认证中的作用"><a href="#Cookie在身份认证中的作用" class="headerlink" title="Cookie在身份认证中的作用"></a>Cookie在身份认证中的作用</h4><ul>
<li>客户端第一-次请求服务器的时候，服务器通过响应头的形式，向客户端发送一个身份认证的Cookie,客户端会自动将Cookie保存在浏览器中。</li>
<li>随后，当客户端浏览器每次请求服务器的时候，浏览器会自动将身份认证相关的Cookie,通过请求头的形式发送给服务器，服务器即可验明客户端的身份。</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714193346444.png" alt="image-20220714193346444"></p>
<h4 id="Cookie不具有安全性"><a href="#Cookie不具有安全性" class="headerlink" title="Cookie不具有安全性"></a>Cookie不具有安全性</h4><p>由于Cookie是存储在浏览器中的，而且浏览器也提供了读写Cookie的API，因此Cookie很容易被伪造，不具有安全性。因此不建议服务器将重要的隐私数据，通过Cookie的形式发送给浏览器。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714193659593.png" alt="image-20220714193659593"></p>
<blockquote>
<p>注意：千万不要使用Cookie存储用户的信息</p>
</blockquote>
<h4 id="提高身份认证的安全性"><a href="#提高身份认证的安全性" class="headerlink" title="提高身份认证的安全性"></a>提高身份认证的安全性</h4><p>为了防止客户伪造会员卡,收银员在拿到客户出示的会员卡之后，可以在收银机上进行刷卡认证。只有收银机确认存在的会员卡，才能被正常使用。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714193843904.png" alt="image-20220714193843904"></p>
<blockquote>
<p>这种”会员卡+刷卡认证”的设计理念,就是Session认证机制的精髓。</p>
</blockquote>
<h2 id="Session的工作原理"><a href="#Session的工作原理" class="headerlink" title="Session的工作原理"></a>Session的工作原理</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714194043942.png" alt="image-20220714194043942"></p>
<h3 id="在Express-session中间件"><a href="#在Express-session中间件" class="headerlink" title="在Express-session中间件"></a>在Express-session中间件</h3><h4 id="1-安装express-session中间件"><a href="#1-安装express-session中间件" class="headerlink" title="1.安装express-session中间件"></a>1.安装express-session中间件</h4><p>在Express项目中，只需要安装express-session中间件，即可在项目中使用Session认证：</p>
<p><code>npm install express-session</code></p>
<h4 id="2-配置sxpress-session中间件"><a href="#2-配置sxpress-session中间件" class="headerlink" title="2.配置sxpress-session中间件"></a>2.配置sxpress-session中间件</h4><p>express-session中间件安装成功后，需要通过app.use(来注册session中间件，示例代码如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714195052990.png" alt="image-20220714195052990"></p>
<h4 id="3-向session中存数据"><a href="#3-向session中存数据" class="headerlink" title="3.向session中存数据"></a>3.向session中存数据</h4><p>当express- session中间件配置成功后，即可通过req.session来访问和使用session对象，从而存储用户的关键信息:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714202516094.png" alt="image-20220714202516094"></p>
<h4 id="4-从session中取数据"><a href="#4-从session中取数据" class="headerlink" title="4.从session中取数据"></a>4.从session中取数据</h4><p>可以直接从req.session对象上获取之前存储的数据。实例：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714203759869.png" alt="image-20220714203759869"></p>
<h4 id="5-清空session"><a href="#5-清空session" class="headerlink" title="5.清空session"></a>5.清空session</h4><p>调用req.session.destroy()函数，即可清空服务器保存的session信息。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714204107954.png" alt="image-20220714204107954"></p>
<blockquote>
<p>调用<em>req</em>.session.destroy();只会清空当前用户的数据</p>
</blockquote>
<h2 id="JWT认证机制"><a href="#JWT认证机制" class="headerlink" title="JWT认证机制"></a>JWT认证机制</h2><h3 id="Session认证局限性"><a href="#Session认证局限性" class="headerlink" title="Session认证局限性"></a>Session认证局限性</h3><p>Session认证机制需要配合Cookie才能实现。由于Cookie默认不支持跨域访问，所以，当涉及到前端跨域请求后端接口的时候，需要做很多额外的配置，才能实现跨域Session认证。</p>
<p>注意:</p>
<ul>
<li><p>当前端请求后端接口不存在跨域问题的时候，推荐使用Session身份认证机制。</p>
</li>
<li><p>当前端需要跨域请求后端接口的时候，不推荐使用Session身份认证机制，推荐使用JWT认证机制。</p>
</li>
</ul>
<h3 id="什么是JWT"><a href="#什么是JWT" class="headerlink" title="什么是JWT"></a>什么是JWT</h3><p>JWT (英文全称: JSON Web Token)是目前最流行的跨域认证解决方案。</p>
<h4 id="JWT工作原理"><a href="#JWT工作原理" class="headerlink" title="JWT工作原理"></a>JWT工作原理</h4><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714205132872.png" alt="image-20220714205132872"></p>
<blockquote>
<p>总结:用户的信息通过Token字符串的形式，保存在客户端浏览器中。服务器通过还原Token字符串的形式来认证用户的身份.</p>
</blockquote>
<h4 id="JWT组成部分"><a href="#JWT组成部分" class="headerlink" title="JWT组成部分"></a>JWT组成部分</h4><p>JWT通常由三部分组成，分别是Header (头部)、Payload (有效荷载)、Signature (签名) .<br>三者之间使用英文的”.” 分隔，格式如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714205348970.png" alt="image-20220714205348970"></p>
<p>下面是JWT字符串的实例：</p>
<img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714205437367.png" alt="image-20220714205437367">

<h4 id="JWT的三个部分各自代表的含义"><a href="#JWT的三个部分各自代表的含义" class="headerlink" title="JWT的三个部分各自代表的含义"></a>JWT的三个部分各自代表的含义</h4><p>JWT的三个组成部分，从前到后分别是Header、Payload、 Signature.<br>其中:</p>
<ul>
<li>Payload 部分才是真正的用户信息，它是用户信息经过加密之后生成的字符串。</li>
<li>Header 和Signature是安全性相关的部分,只是为了保证Token的安全性。</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714205702810.png" alt="image-20220714205702810"></p>
<h3 id="JWT的使用方式"><a href="#JWT的使用方式" class="headerlink" title="JWT的使用方式"></a>JWT的使用方式</h3><p>客户端收到服务器返回的JWT之后,通常会将它储存在<strong>localStorage</strong>或<strong>sessionStorage</strong>中。<br>此后，客户端每次与服务器通信，都要带上这个JWT的字符串,从而进行身份认证。推荐的做法是把JWT放在HTTP请求头的<code>Authorization</code>字段中，格式如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714205908830.png" alt="image-20220714205908830"></p>
<h1 id="在Express中使用JWT"><a href="#在Express中使用JWT" class="headerlink" title="在Express中使用JWT"></a>在Express中使用JWT</h1><h2 id="安装相应的包"><a href="#安装相应的包" class="headerlink" title="安装相应的包"></a>安装相应的包</h2><p>执行以下命令，安装两个JWT相关的包：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714205957242.png" alt="image-20220714205957242"></p>
<p>其中:</p>
<ul>
<li><strong>jsonwebtoken</strong>用于生成JWT字符串</li>
<li><strong>express-jwt</strong> 用于将JWT字符串解析还原成JSON对象</li>
</ul>
<h2 id="导入JWT相关的包"><a href="#导入JWT相关的包" class="headerlink" title="导入JWT相关的包"></a>导入JWT相关的包</h2><p>使用require()函数，分别导入JWT相关的两个包：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714210155726.png" alt="image-20220714210155726"></p>
<p>注意：</p>
<p>新版express-jwt导入方式被切换为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TODO_01：安装并导入 JWT 相关的两个包，分别是 jsonwebtoken 和 express-jwt</span></span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旧的：const expressJWT = require(&#x27;express-jwt&#x27;);</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">expressjwt</span>: expressJWT &#125; = <span class="built_in">require</span>(<span class="string">&#x27;express-jwt&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714205348970.png" alt="image-20220714214407342"></p>
<h2 id="定义secret密钥"><a href="#定义secret密钥" class="headerlink" title="定义secret密钥"></a>定义secret密钥</h2><p>为了<strong>保证JWT字符串的安全性</strong>,防止JWT字符串在网络传输过程中被别人破解,我们需要专门定义一个用于加密和解密的secret密钥:</p>
<ol>
<li>当生成JWT字符串的时候，需要使用secret密钥对用户的信息<strong>进行加密</strong>，最终得到加密好的JWT字符串</li>
<li>当把JWT字符串解析还原成JSON对象的时候,需要使用secret密钥<strong>进行解密</strong></li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220715094107721.png" alt="image-20220715094107721"></p>
<h2 id="在登录成功后生成JWT字符串"><a href="#在登录成功后生成JWT字符串" class="headerlink" title="在登录成功后生成JWT字符串"></a>在登录成功后生成JWT字符串</h2><p>调用<strong>jsonwebtoken</strong>包提供的**sign()**方法,将用户的信息加密成JWT字符串，响应给客户端:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220715093609109.png" alt="image-20220715093609109"></p>
<ul>
<li>参数1：用户的信息对象</li>
<li>参数2：加密的密钥</li>
<li>参数2：配置对象，可以配置当前token的有效期</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tokenStr = jwt.<span class="title function_">sign</span>(&#123; <span class="attr">username</span>: userinfo.<span class="property">username</span> &#125;, secretKey, &#123; <span class="attr">expiresIn</span>: <span class="string">&#x27;30s&#x27;</span> &#125;)</span><br><span class="line">res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    	<span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">    	<span class="attr">message</span>: <span class="string">&#x27;登录成功！&#x27;</span>,</span><br><span class="line">    	<span class="attr">token</span>: tokenStr   <span class="comment">// 要发送给客户端的 token 字符串</span></span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="将JWT字符串还原为JSON对象"><a href="#将JWT字符串还原为JSON对象" class="headerlink" title="将JWT字符串还原为JSON对象"></a>将JWT字符串还原为JSON对象</h2><p>客户端每次在访问那些有权限接口的时候，都需要主动通过请求头中的Authorization字段，将Token字符串发送到服务器进行身份认证。<br>此时，服务器可以通过express-jwt这个中间件,自动将客户端发送过来的Token解析还原成JSON对象:</p>
<p><code>app.use(expressJWT(&#123; secret: secretKey &#125;).unless(&#123; path: [/^\/api\//] &#125;));</code></p>
<p>新版写法被改为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="title function_">expressJWT</span>(&#123;<span class="attr">secret</span>: secretKey, <span class="attr">algorithms</span>: [<span class="string">&#x27;HS256&#x27;</span>] &#125;).<span class="title function_">unless</span>(&#123;<span class="attr">path</span>:[<span class="regexp">/^\/api\//</span>] &#125;));</span><br></pre></td></tr></table></figure>

<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220715093507238.png" alt="image-20220715093507238"></p>
<h3 id="jwt内置的jwt-verify的方法"><a href="#jwt内置的jwt-verify的方法" class="headerlink" title="jwt内置的jwt.verify的方法"></a>jwt内置的jwt.verify的方法</h3><h2 id="使用req-auth获取用户信息"><a href="#使用req-auth获取用户信息" class="headerlink" title="使用req.auth获取用户信息"></a>使用req.auth获取用户信息</h2><p>当express-jwt这个中间件配置成功之后，即可在那些有权限的接口中，使用req.auth对象,来访问从JWT字符串中解析出来的用户信息了，示例代码如下:</p>
<blockquote>
<p>新版本必须使用<strong>req.auth</strong>接收数据</p>
</blockquote>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220715093752664.png" alt="image-20220715093752664"></p>
<h3 id="postman请求示例："><a href="#postman请求示例：" class="headerlink" title="postman请求示例："></a>postman请求示例：</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714220045105.png" alt="image-20220714220045105"></p>
<blockquote>
<p>返还回来的数据是一个只能存在30s的令牌(自定义)</p>
</blockquote>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714220145337.png" alt="image-20220714220145337"></p>
<blockquote>
<p>发起get请求获取参数时候必须携带<strong>Authorization</strong>，value的值是post返还的加密字符串，前面必须空格加上<strong>Bearer</strong></p>
<p>示例：</p>
<p>Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNjU3ODA3MDU4LCJleHAiOjE2NTc4MDcxMDh9.yelhnZthBSHXRH2P9Ch7gEp7LwfK7P1JlL76HdUATJ0</p>
</blockquote>
<h2 id="捕获解析JWT失败后产生的错误"><a href="#捕获解析JWT失败后产生的错误" class="headerlink" title="捕获解析JWT失败后产生的错误"></a>捕获解析JWT失败后产生的错误</h2><p>当使用express-jwt解析Token字符串时,如果客户端发送过来的Token字符串过期或不合法，会产生-个解析失败的错误，影响项目的正常运行。我们可以通过Express的错误中间件,捕获这个错误并进行相关的处理,示例代码如下:</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220714220815116.png" alt="image-20220714220815116"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TODO_06：使用全局错误处理中间件，捕获解析 JWT 失败后产生的错误</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err.<span class="property">name</span> === <span class="string">&#x27;UnauthorizedError&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="number">401</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;无效的token&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">500</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;未知错误&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>前后端合作开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3</title>
    <url>/found404.io/2022/08/24/Vue3/</url>
    <content><![CDATA[<h1 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h1><p><a href="https://github.com/Panyue-genkiyo/vue3-learning">github笔记</a></p>
<h2 id="1-Vue3简介"><a href="#1-Vue3简介" class="headerlink" title="1.Vue3简介"></a>1.Vue3简介</h2><ul>
<li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li>
<li>耗时2年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">30+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors">99位贡献者</a></li>
<li>github上的tags地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li>
</ul>
<span id="more"></span>

<h2 id="2-Vue3带来了什么"><a href="#2-Vue3带来了什么" class="headerlink" title="2.Vue3带来了什么"></a>2.Vue3带来了什么</h2><h3 id="1-性能的提升"><a href="#1-性能的提升" class="headerlink" title="1.性能的提升"></a>1.性能的提升</h3><ul>
<li><p>打包大小减少41%</p>
</li>
<li><p>初次渲染快55%, 更新渲染快133%</p>
</li>
<li><p>内存减少54%</p>
<p>……</p>
</li>
</ul>
<h3 id="2-源码的升级"><a href="#2-源码的升级" class="headerlink" title="2.源码的升级"></a>2.源码的升级</h3><ul>
<li><p>使用Proxy代替defineProperty实现响应式</p>
</li>
<li><p>重写虚拟DOM的实现和Tree-Shaking</p>
<p>……</p>
</li>
</ul>
<h3 id="3-拥抱TypeScript"><a href="#3-拥抱TypeScript" class="headerlink" title="3.拥抱TypeScript"></a>3.拥抱TypeScript</h3><ul>
<li>Vue3可以更好的支持TypeScript</li>
</ul>
<h3 id="4-新的特性"><a href="#4-新的特性" class="headerlink" title="4.新的特性"></a>4.新的特性</h3><ol>
<li>Composition API（组合API）<ul>
<li>setup配置</li>
<li>ref与reactive</li>
<li>watch与watchEffect</li>
<li>provide与inject</li>
<li>……</li>
</ul>
</li>
<li>新的内置组件<ul>
<li>Fragment</li>
<li>Teleport</li>
<li>Suspense</li>
</ul>
</li>
<li>其他改变<ul>
<li>新的生命周期钩子</li>
<li>data 选项应始终被声明为一个函数</li>
<li>移除keyCode支持作为 v-on 的修饰符</li>
<li>……</li>
</ul>
</li>
</ol>
<h1 id="一-创建Vue3-0工程"><a href="#一-创建Vue3-0工程" class="headerlink" title="一.创建Vue3.0工程"></a>一.创建Vue3.0工程</h1><h2 id="1-使用-vue-cli-创建"><a href="#1-使用-vue-cli-创建" class="headerlink" title="1.使用 vue-cli 创建"></a>1.使用 vue-cli 创建</h2><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span><br><span class="line">vue --version</span><br><span class="line">## 安装或者升级你的@vue/cli</span><br><span class="line">npm install -g @vue/cli</span><br><span class="line">## 创建</span><br><span class="line">vue create vue_test</span><br><span class="line">## 启动</span><br><span class="line">cd vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<h2 id="2-使用-vite-创建"><a href="#2-使用-vite-创建" class="headerlink" title="2.使用 vite 创建"></a>2.使用 vite 创建</h2><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p>
<p>vite官网：<a href="https://vitejs.cn/">https://vitejs.cn</a></p>
<ul>
<li>什么是vite？—— 新一代前端构建工具。</li>
<li>优势如下：<ul>
<li>开发环境中，无需打包操作，可快速的冷启动。</li>
<li>轻量快速的热重载（HMR）。</li>
<li>真正的按需编译，不再等待整个应用编译完成。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">## 创建工程</span><br><span class="line">npm init vite@latest /  yarn create vite</span><br><span class="line"></span><br><span class="line">## 进入工程目录</span><br><span class="line">cd &lt;project-name&gt;</span><br><span class="line">    </span><br><span class="line">## 安装依赖</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">## 运行</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h1 id="二-常用Composition-API"><a href="#二-常用Composition-API" class="headerlink" title="二.常用Composition API"></a>二.常用Composition API</h1><p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p>
<h2 id="1-拉开序幕的setup"><a href="#1-拉开序幕的setup" class="headerlink" title="1.拉开序幕的setup"></a>1.拉开序幕的setup</h2><ol>
<li>理解：Vue3.0中一个新的配置项，值为一个函数。</li>
<li>setup是所有<strong>Composition API（组合API）</strong><em>“ 表演的舞台 ”</em>。</li>
<li>组件中所用到的：数据、方法等等，均要配置在setup中。</li>
<li>setup函数的两种返回值：<ol>
<li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li>
<li>若返回一个渲染函数：则可以自定义渲染内容。（了解）</li>
</ol>
</li>
<li>注意点：<ol>
<li>尽量不要与Vue2.x配置混用<ul>
<li>Vue2.x配置（data、methos、computed…）中<strong>可以访问到</strong>setup中的属性、方法。</li>
<li>但在setup中<strong>不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li>
<li>如果有重名, setup优先。</li>
</ul>
</li>
<li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li>
</ol>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="comment">// 此处只是测试setup 暂时不考虑响应式</span></span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">`我叫<span class="subst">$&#123;name&#125;</span>,我<span class="subst">$&#123;age&#125;</span>岁了,你好啊！`</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个对象(常用)</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name,</span><br><span class="line">      age,</span><br><span class="line">      sayHello</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个函数，我们称之为(渲染函数)</span></span><br><span class="line">    <span class="comment">// return ()=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//   return h(&#x27;h1&#x27;,&#x27;尚硅谷&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">sayWelcome</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;Hello Vue3&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-ref函数"><a href="#2-ref函数" class="headerlink" title="2.ref函数"></a>2.ref函数</h2><ul>
<li><p>作用: 定义一个响应式的数据</p>
</li>
<li><p>语法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const xxx = ref(initValue)</span><br></pre></td></tr></table></figure>

<ul>
<li>创建一个包含响应式数据的<strong>引用对象（reference对象，简称ref对象）</strong>。</li>
<li>JS中操作数据： <code>xxx.value</code></li>
<li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li>
<li>类似于vue2中的_data，这里只不过将get和set放在了原型对象上</li>
</ul>
</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220821155036539.png" alt="image-20220821155036539"></p>
<ul>
<li>备注：<ul>
<li>接收的数据可以是：基本类型、也可以是对象类型。</li>
<li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li>
<li>对象类型的数据：内部 <em>“ 求助 ”</em> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。<ul>
<li>这是 <code>reactive</code>函数其实是es6中Proxy的封装</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="comment">// 使用ref将数据包装</span></span><br><span class="line">    <span class="keyword">let</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> age = <span class="title function_">ref</span>(<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">let</span> job = <span class="title function_">ref</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>:<span class="string">&#x27;前端工程师&#x27;</span>,</span><br><span class="line">      <span class="attr">salary</span>:<span class="string">&#x27;30k&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="comment">// 改变数据</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">changeInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line">      name.<span class="property">value</span> = <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line">      age.<span class="property">value</span> = <span class="number">30</span>;</span><br><span class="line">      job.<span class="property">value</span>.<span class="property">type</span> = <span class="string">&#x27;工地搬砖&#x27;</span>;</span><br><span class="line">      job.<span class="property">value</span>.<span class="property">salary</span> = <span class="string">&#x27;50k&#x27;</span>;</span><br><span class="line">      <span class="comment">// console.log(job);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个对象(常用)</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name,</span><br><span class="line">      age,</span><br><span class="line">      job,</span><br><span class="line">      changeInfo</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-reactive函数"><a href="#3-reactive函数" class="headerlink" title="3.reactive函数"></a>3.reactive函数</h2><ul>
<li>作用: 定义一个<strong>对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li>
<li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong>代理对象（Proxy的实例对象，简称proxy对象）</strong></li>
<li>reactive定义的响应式数据是“深层次的”。</li>
<li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">      <span class="attr">job</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&#x27;前端工程师&#x27;</span>,</span><br><span class="line">        <span class="attr">salary</span>:<span class="string">&#x27;30k&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">hobby</span>:[<span class="string">&#x27;抽烟&#x27;</span>,<span class="string">&#x27;喝酒&#x27;</span>,<span class="string">&#x27;烫头&#x27;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法---下方有简化写法</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">changeInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line">      person.<span class="property">name</span>=<span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line">      person.<span class="property">age</span>=<span class="number">30</span>;</span><br><span class="line">      person.<span class="property">job</span>.<span class="property">type</span>=<span class="string">&#x27;工地搬砖&#x27;</span>;</span><br><span class="line">      person.<span class="property">job</span>.<span class="property">salary</span>=<span class="string">&#x27;60k&#x27;</span>;</span><br><span class="line">      person.<span class="property">hobby</span>[<span class="number">0</span>]=<span class="string">&#x27;学习&#x27;</span></span><br><span class="line">      <span class="comment">// console.log(job);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个对象(常用)</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      person,</span><br><span class="line">      changeInfo</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-Vue3-0中的响应式原理"><a href="#4-Vue3-0中的响应式原理" class="headerlink" title="4.Vue3.0中的响应式原理"></a>4.Vue3.0中的响应式原理</h2><h3 id="vue2-x的响应式"><a href="#vue2-x的响应式" class="headerlink" title="vue2.x的响应式"></a>vue2.x的响应式</h3><ul>
<li><p>实现原理：</p>
<ul>
<li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p>
</li>
<li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Object.defineProperty(data, &#x27;count&#x27;, &#123;</span><br><span class="line">    get () &#123;&#125;, </span><br><span class="line">    set () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>存在问题：</p>
<ul>
<li>新增属性、删除属性, 界面不会更新。</li>
<li>直接通过下标修改数组, 界面不会自动更新。</li>
</ul>
</li>
</ul>
<h3 id="Vue3-0的响应式"><a href="#Vue3-0的响应式" class="headerlink" title="Vue3.0的响应式"></a>Vue3.0的响应式</h3><ul>
<li><p>实现原理:</p>
<ul>
<li><p>通过Proxy（代理）: 拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</p>
</li>
<li><p>通过Reflect（反射）: 对源对象的属性进行操作。</p>
</li>
<li><p>MDN文档中描述的Proxy与Reflect：</p>
<ul>
<li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">地址</a></p>
</li>
<li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">地址</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Proxy(data, &#123;</span><br><span class="line">    // 拦截读取属性值</span><br><span class="line">    get (target, prop) &#123;</span><br><span class="line">        return Reflect.get(target, prop)</span><br><span class="line">    &#125;,</span><br><span class="line">    // 拦截设置属性值或添加新属性</span><br><span class="line">    set (target, prop, value) &#123; </span><br><span class="line">        return Reflect.set(target, prop, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    // 拦截删除属性</span><br><span class="line">    deleteProperty (target, prop) &#123;</span><br><span class="line">        return Reflect.deleteProperty(target, prop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.name = &#x27;tom&#x27;   </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>Vue3中的修改删除方法</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deletename</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">delete</span> person.<span class="property">name</span> <span class="comment">// 删除name属性</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回一个对象(常用)</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  person,</span><br><span class="line">  changeInfo,</span><br><span class="line">  deletename</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="5-reactive对比ref"><a href="#5-reactive对比ref" class="headerlink" title="5.reactive对比ref"></a>5.reactive对比ref</h2><ul>
<li>从定义数据角度对比：<ul>
<li>ref用来定义：<strong>基本类型数据</strong>。</li>
<li>reactive用来定义：<strong>对象（或数组）类型数据</strong>。</li>
<li>备注：ref也可以用来定义<strong>对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong>代理对象</strong>。</li>
</ul>
</li>
<li>从原理角度对比：<ul>
<li>ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li>
<li>reactive通过使用<strong>Proxy</strong>来实现响应式（数据劫持）, 并通过<strong>Reflect</strong>操作<strong>源对象</strong>内部的数据。</li>
</ul>
</li>
<li>从使用角度对比：<ul>
<li>ref定义的数据：操作数据<strong>需要</strong><code>.value</code>，读取数据时模板中直接读取<strong>不需要</strong><code>.value</code>。</li>
<li>reactive定义的数据：操作数据与读取数据：<strong>均不需要</strong><code>.value</code>。</li>
</ul>
</li>
</ul>
<h2 id="6-setup的两个注意点"><a href="#6-setup的两个注意点" class="headerlink" title="6.setup的两个注意点"></a>6.setup的两个注意点</h2><ul>
<li>setup执行的时机<ul>
<li>在beforeCreate之前执行一次，this是undefined。</li>
</ul>
</li>
<li>setup的参数<ul>
<li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li>
<li>context：上下文对象<ul>
<li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li>
<li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li>
<li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="7-计算属性与监视"><a href="#7-计算属性与监视" class="headerlink" title="7.计算属性与监视"></a>7.计算属性与监视</h2><h3 id="1-computed函数"><a href="#1-computed函数" class="headerlink" title="1.computed函数"></a>1.computed函数</h3><ul>
<li>与Vue2.x中computed配置功能一致</li>
<li>写法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive,computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="comment">// 此处只是测试setup 暂时不考虑响应式</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Vue2计算属性</span></span><br><span class="line">  <span class="comment">// computed:&#123;</span></span><br><span class="line">  <span class="comment">//   fullname()&#123;</span></span><br><span class="line">  <span class="comment">//     return this.person.firstName+this.person.name</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;三&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算属性-简写形式(没有考虑计算属性被修改的情况)</span></span><br><span class="line">    <span class="comment">// person.fullName = computed(()=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//   return person.firstName + person.name</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算属性-完整写法(考虑计算属性被修改的情况)</span></span><br><span class="line">    person.<span class="property">fullName</span> = <span class="title function_">computed</span>(&#123;</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> person.<span class="property">firstName</span> +<span class="string">&#x27;-&#x27;</span>+ person.<span class="property">name</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> nameArr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        person.<span class="property">firstName</span>= nameArr[<span class="number">0</span>]</span><br><span class="line">        person.<span class="property">name</span> = nameArr[<span class="number">1</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个对象(常用)</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      person,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-watch函数"><a href="#2-watch函数" class="headerlink" title="2.watch函数"></a>2.watch函数</h3><ul>
<li>与Vue2.x中watch配置功能一致</li>
<li>两个小“坑”：<ul>
<li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li>
<li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;当前求和:&#123;&#123;sum&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;sum++&quot;&gt;点我+1&lt;/button&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;h2&gt;当前信息为:&#123;&#123;msg&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;msg+=&#x27;!&#x27;&quot;&gt;修改信息&lt;/button&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;h2&gt;姓名:&#123;&#123;person.name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;年龄:&#123;&#123;person.age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;person.name+=&#x27;~&#x27;&quot;&gt;修改姓名&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;person.age++&quot;&gt;增长年龄&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref,watch,reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  watch:&#123;</span><br><span class="line">    // 简写：</span><br><span class="line">    // sum(newValue,oldValue)&#123;</span><br><span class="line">    //   console.log(&#x27;sum值变化&#x27;,newValue,oldValue);</span><br><span class="line">    // &#125;</span><br><span class="line">    // 完整写法:</span><br><span class="line">    // sum:&#123;</span><br><span class="line">    //   immediate:true, //默认执行一次</span><br><span class="line">    //   deep:true, //深度监视</span><br><span class="line">    //   handler(newValue,oldValue)&#123;</span><br><span class="line">    //     console.log(&#x27;sum值变化&#x27;,newValue,oldValue);</span><br><span class="line">    //   &#125;</span><br><span class="line">    // &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  setup()&#123;</span><br><span class="line">    // 数据</span><br><span class="line">    let sum = ref(0)</span><br><span class="line">    let msg = ref(&#x27;你好啊&#x27;)</span><br><span class="line">    let person = reactive(&#123;</span><br><span class="line">      name:&#x27;张三&#x27;,</span><br><span class="line">      age:10</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 监视 </span><br><span class="line">    // 情况一：监视ref所定义的一个响应式数据</span><br><span class="line">    // watch(sum,(newvalue,oldvalue)=&gt;&#123;</span><br><span class="line">    //   console.log(&#x27;sum值变化&#x27;,newvalue,oldvalue);</span><br><span class="line">    // &#125;,&#123;immediate:true,deep:true&#125;)</span><br><span class="line"></span><br><span class="line">    // 情况二：监视ref所定义的多个响应式数据</span><br><span class="line">    // watch([sum,msg],(newvalue,oldvalue)=&gt;&#123;</span><br><span class="line">    //   console.log(&#x27;多个值变化&#x27;,newvalue,oldvalue);</span><br><span class="line">    // &#125;)</span><br><span class="line"></span><br><span class="line">    // 情况三：监视复杂数据类型</span><br><span class="line">    //   注意：此处无法正确的获取oldValue</span><br><span class="line">    //   注意：强制开启了深度监视(deep配置无效)</span><br><span class="line">    // watch(person,(newvalue,oldvalue)=&gt;&#123;</span><br><span class="line">    //   console.log(&#x27;多个值变化&#x27;,newvalue,oldvalue);</span><br><span class="line">    // &#125;,&#123;deep:false&#125;) //deep配置无效</span><br><span class="line"></span><br><span class="line">    // 情况四：监视reactive所定义的一个响应式数据中的某个属性</span><br><span class="line">    // watch(()=&gt;person.age,(newvalue,oldvalue)=&gt;&#123;</span><br><span class="line">    //   console.log(&#x27;age值变化&#x27;,newvalue,oldvalue);</span><br><span class="line">    // &#125;)</span><br><span class="line"></span><br><span class="line">    // 情况五：监视reactive所定义的一个响应式数据中的某些属性</span><br><span class="line">    // watch([()=&gt;person.name,()=&gt;person.age],(newvalue,oldvalue)=&gt;&#123;</span><br><span class="line">    //   console.log(&#x27;age值变化&#x27;,newvalue,oldvalue);</span><br><span class="line">    // &#125;)</span><br><span class="line"></span><br><span class="line">    // 返回一个对象(常用)</span><br><span class="line">    return &#123;</span><br><span class="line">      msg,</span><br><span class="line">      sum,</span><br><span class="line">      person</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-watchEffect函数"><a href="#3-watchEffect函数" class="headerlink" title="3.watchEffect函数"></a>3.watchEffect函数</h3><ul>
<li>watch的套路是：既要指明监视的属性，也要指明监视的回调。</li>
<li>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</li>
<li>watchEffect有点像computed：<ul>
<li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li>
<li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 回调中使用了哪个属性，这个属性就会被监视，默认先执行一次</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> x1 = sum.<span class="property">value</span></span><br><span class="line">  <span class="keyword">const</span> x2 = person.<span class="property">name</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watch所指定的回调执行了&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="8-生命周期"><a href="#8-生命周期" class="headerlink" title="8.生命周期"></a>8.生命周期</h2><p><a href="https://www.yuque.com/fund404/found404/znb4rl">图解</a></p>
<ul>
<li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul>
<li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li>
<li><code>destroyed</code>改名为 <code>unmounted</code></li>
</ul>
</li>
<li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul>
<li><code>beforeCreate</code>&#x3D;&#x3D;&#x3D;&gt;<code>setup()</code></li>
<li><code>created</code>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>setup()</code></li>
<li><code>beforeMount</code> &#x3D;&#x3D;&#x3D;&gt;<code>onBeforeMount</code></li>
<li><code>mounted</code>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onMounted</code></li>
<li><code>beforeUpdate</code>&#x3D;&#x3D;&#x3D;&gt;<code>onBeforeUpdate</code></li>
<li><code>updated</code> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onUpdated</code></li>
<li><code>beforeUnmount</code> &#x3D;&#x3D;&gt;<code>onBeforeUnmount</code></li>
<li><code>unmounted</code> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onUnmounted</code></li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h2&gt;当前求和:&#123;&#123;sum&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;sum++&quot;&gt;点我+1&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref,</span><br><span class="line">onBeforeMount,</span><br><span class="line">onMounted,</span><br><span class="line">onBeforeUpdate,</span><br><span class="line">onUpdated,</span><br><span class="line">onBeforeUnmount,</span><br><span class="line">onUnmounted &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Demo&#x27;,</span><br><span class="line">  setup()&#123;</span><br><span class="line">    let sum = ref(0)</span><br><span class="line">    // ---通过组合式API的形式使用生周期勾子---</span><br><span class="line">    onBeforeMount(()=&gt;&#123;</span><br><span class="line">        console.log(&#x27;---onBeforeMount---&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    onMounted(()=&gt;&#123;</span><br><span class="line">        console.log(&#x27;---onMounted---&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    onBeforeUpdate(()=&gt;&#123;</span><br><span class="line">        console.log(&#x27;---onBeforeUpdate---&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    onUpdated(()=&gt;&#123;</span><br><span class="line">        console.log(&#x27;---onUpdated---&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    onBeforeUnmount(()=&gt;&#123;</span><br><span class="line">        console.log(&#x27;---onBeforeUnmount---&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    onUnmounted(()=&gt;&#123;</span><br><span class="line">        console.log(&#x27;---onUnmounted---&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return &#123;sum&#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">    //#region </span><br><span class="line">    // // ---通过配置项的形式使用生命周期函数---</span><br><span class="line">    // beforeCreate()&#123;</span><br><span class="line">    //     console.log(&#x27;---beforeCreate---&#x27;);</span><br><span class="line">    // &#125;,</span><br><span class="line">    // created()&#123;</span><br><span class="line">    //     console.log(&#x27;---created---&#x27;);</span><br><span class="line">    // &#125;,</span><br><span class="line">    // beforeMount() &#123;</span><br><span class="line">    //     console.log(&#x27;---beforeMount---&#x27;);</span><br><span class="line">    // &#125;,</span><br><span class="line">    // mounted()&#123;</span><br><span class="line">    //     console.log(&#x27;---mounted---&#x27;);</span><br><span class="line">    // &#125;,</span><br><span class="line">    // beforeUpdate()&#123;</span><br><span class="line">    //     console.log(&#x27;---beforeUpdate---&#x27;);</span><br><span class="line">    // &#125;,</span><br><span class="line">    // updated()&#123;</span><br><span class="line">    //     console.log(&#x27;---updated---&#x27;);</span><br><span class="line">    // &#125;,</span><br><span class="line">    // beforeUnmount() &#123;</span><br><span class="line">    //     console.log(&#x27;---beforeUnmount---&#x27;);</span><br><span class="line">    // &#125;,</span><br><span class="line">    // unmounted() &#123;</span><br><span class="line">    //     console.log(&#x27;---unmounted---&#x27;);</span><br><span class="line">    // &#125;,</span><br><span class="line">    //#endregion</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="9-自定义hook函数"><a href="#9-自定义hook函数" class="headerlink" title="9.自定义hook函数"></a>9.自定义hook函数</h2><ul>
<li>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</li>
<li>类似于vue2.x中的mixin。</li>
<li>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220824201020085.png" alt="image-20220824201020085"></p>
<p><strong>将功能代码抽离到hooks文件中的usexxjs中</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reactive,onMounted,onBeforeUnmount&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 实现鼠标打点的数据</span></span><br><span class="line">    <span class="keyword">let</span> point = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">        <span class="attr">x</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">y</span>:<span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 实现鼠标打点的方法</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">clicks</span>(<span class="params">ev</span>)&#123;</span><br><span class="line">        point.<span class="property">x</span> = ev.<span class="property">pageX</span>;</span><br><span class="line">        point.<span class="property">y</span> = ev.<span class="property">pageY</span>;</span><br><span class="line">        <span class="comment">// console.log(ev.pageX);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实现鼠标打点相关的周期勾子</span></span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,clicks)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title function_">onBeforeUnmount</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>,clicks)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> point <span class="comment">//注意返回数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>在要使用这个功能的组件中引入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h2&gt;当前求和:&#123;&#123;sum&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;sum++&quot;&gt;点我+1&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h2&gt;当前点击时鼠标的坐标为: x:&#123;&#123;point.x&#125;&#125;y:&#123;&#123;point.y&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">import usePoint from &#x27;../hooks/usePoint&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Demo&#x27;,</span><br><span class="line">  setup()&#123;</span><br><span class="line">    let sum = ref(0);</span><br><span class="line">    let point = usePoint();</span><br><span class="line"></span><br><span class="line">    return &#123;sum,point&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="10-toRef"><a href="#10-toRef" class="headerlink" title="10.toRef"></a>10.toRef</h2><ul>
<li>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</li>
<li>语法：<code>const name = toRef(person,&#39;name&#39;)</code></li>
<li>应用: 要将响应式对象中的某个属性单独提供给外部使用时。</li>
<li>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;姓名:&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;年龄:&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;薪资:&#123;&#123;obj.a&#125;&#125;k&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;name+=&#x27;~&#x27;&quot;&gt;修改姓名&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;age++&quot;&gt;增长年龄&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;obj.a++&quot;&gt;涨薪&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;reactive, toRef ,toRefs&#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Demo&#x27;,</span><br><span class="line">  setup()&#123;</span><br><span class="line">    let person = reactive(&#123;</span><br><span class="line">      name:&#x27;张三&#x27;,</span><br><span class="line">      age:10,</span><br><span class="line">      obj:&#123;</span><br><span class="line">        a:20</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    // ---toRef写法---</span><br><span class="line">    // 模板中直接使用</span><br><span class="line">    // return &#123;</span><br><span class="line">    //   name:toRef(person,&#x27;name&#x27;),</span><br><span class="line">    //   age:toRef(person,&#x27;age&#x27;),</span><br><span class="line">    //   a:toRef(person.obj,&#x27;a&#x27;),</span><br><span class="line">    // &#125;</span><br><span class="line">    // ---toRefs写法---</span><br><span class="line">    // 虽然只会展开一层，但是也省去很多重复</span><br><span class="line">    return &#123;</span><br><span class="line">      ...toRefs(person)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="三、其它-Composition-API"><a href="#三、其它-Composition-API" class="headerlink" title="三、其它 Composition API"></a>三、其它 Composition API</h1><h2 id="1-shallowReactive-与-shallowRef"><a href="#1-shallowReactive-与-shallowRef" class="headerlink" title="1.shallowReactive 与 shallowRef"></a>1.shallowReactive 与 shallowRef</h2><ul>
<li>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</li>
<li>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</li>
<li>什么时候使用?<ul>
<li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 &#x3D;&#x3D;&#x3D;&gt; shallowReactive。</li>
<li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 &#x3D;&#x3D;&#x3D;&gt; shallowRef。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reactive,ref, toRef ,toRefs,shallowReactive,shallowRef&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// let person = shallowReactive(&#123;&#125;) 仅仅考虑对象类型第一层</span></span><br><span class="line">    <span class="comment">// let x = shallowRef(0)  仅限传入的值为对象以外的数据类型(基本数据类型)</span></span><br><span class="line">    <span class="keyword">let</span> person = <span class="title function_">shallowReactive</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>:<span class="number">10</span>,</span><br><span class="line">      <span class="attr">obj</span>:&#123;</span><br><span class="line">        <span class="attr">a</span>:<span class="number">20</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> x = <span class="title function_">shallowRef</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      x,</span><br><span class="line">      ...<span class="title function_">toRefs</span>(person)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-readonly-与-shallowReadonly"><a href="#2-readonly-与-shallowReadonly" class="headerlink" title="2.readonly 与 shallowReadonly"></a>2.readonly 与 shallowReadonly</h2><ul>
<li>readonly: 让一个响应式数据变为只读的（深只读）。</li>
<li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li>
<li>应用场景: 不希望数据(尤其是这个数据是来自与其他组件时)被修改时。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reactive,toRefs,shallowRef,readonly,shallowReadonly&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="keyword">let</span> x = <span class="title function_">shallowRef</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">10</span>,</span><br><span class="line">        <span class="attr">obj</span>:&#123;</span><br><span class="line">          <span class="attr">a</span>:<span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改person使其不能被修改仅仅只读</span></span><br><span class="line">    <span class="comment">// person = readonly(person)</span></span><br><span class="line">    <span class="comment">// 修改person使其不能被修改仅仅只读第一层,但是obj下面的a是可以修改的</span></span><br><span class="line">    person = <span class="title function_">shallowReadonly</span>(person)</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      x,</span><br><span class="line">      ...<span class="title function_">toRefs</span>(person)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-toRaw与markRaw"><a href="#3-toRaw与markRaw" class="headerlink" title="3.toRaw与markRaw"></a>3.toRaw与markRaw</h2><ul>
<li>toRaw：<ul>
<li>作用：将一个由<code>reactive</code>生成的<strong>响应式对象</strong>转为<strong>普通对象</strong>。</li>
<li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li>
</ul>
</li>
<li>markRaw：<ul>
<li>作用：标记一个对象，使其永远不会再成为响应式对象。</li>
<li>应用场景:<ol>
<li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li>
<li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li>
</ol>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reactive,toRefs,ref,toRaw,markRaw&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="keyword">let</span> x = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">10</span>,</span><br><span class="line">        <span class="attr">obj</span>:&#123;</span><br><span class="line">          <span class="attr">a</span>:<span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">showRawPerson</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 将被代理处理过的数据还原成原始的数据</span></span><br><span class="line">      <span class="comment">// 仅仅处理reactive生成的</span></span><br><span class="line">      <span class="keyword">const</span> p = <span class="title function_">toRaw</span>(person)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">addCar</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> car = &#123;<span class="attr">name</span>:<span class="string">&quot;奔驰&quot;</span>,<span class="attr">price</span>:<span class="string">&quot;40w&quot;</span>&#125;</span><br><span class="line">        <span class="comment">// markRaw标记car永远不会成为响应式对象</span></span><br><span class="line">        person.<span class="property">car</span> = <span class="title function_">markRaw</span>(car)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      x,</span><br><span class="line">      person,</span><br><span class="line">      ...<span class="title function_">toRefs</span>(person),</span><br><span class="line">      showRawPerson,</span><br><span class="line">      addCar</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-customRef-自定义ref"><a href="#4-customRef-自定义ref" class="headerlink" title="4.customRef(自定义ref)"></a>4.customRef(自定义ref)</h2><ul>
<li>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</li>
<li>实现防抖效果：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;keyWord&quot;/&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;keyWord&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref,customRef &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;App&quot;,</span><br><span class="line">    setup() &#123;</span><br><span class="line">        // 自定义一个ref</span><br><span class="line">        function myRef(value) &#123;</span><br><span class="line">            let timer;</span><br><span class="line">            return customRef((track,trigger)=&gt;&#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    get()&#123;</span><br><span class="line">                        // 有人读取这个value</span><br><span class="line">                        track();// 通知Vue追踪数据的变化(提前和get商量，让其认为value是有用)</span><br><span class="line">                        return value</span><br><span class="line">                    &#125;,  </span><br><span class="line">                    set(newValue)&#123;</span><br><span class="line">                        // 有人要修改这个value</span><br><span class="line">                        clearTimeout(timer);</span><br><span class="line">                       timer = setTimeout(()=&gt;&#123;</span><br><span class="line">                            value = newValue</span><br><span class="line">                            trigger()//通知vue重新解析模板</span><br><span class="line">                       &#125;,500)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // let keyWord = ref(&#x27;Hello&#x27;); //使用Vue提供的ref</span><br><span class="line">        let keyWord = myRef(&#x27;Hello&#x27;); //使用程序员自定义的ref</span><br><span class="line">        return &#123;</span><br><span class="line">            keyWord,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5-provide-与-inject"><a href="#5-provide-与-inject" class="headerlink" title="5.provide 与 inject"></a>5.provide 与 inject</h2><ul>
<li><p>作用：实现<strong>祖与后代组件间</strong>通信</p>
</li>
<li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p>
</li>
<li><p>具体写法：</p>
<ol>
<li><p>祖组件中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setup()&#123;</span><br><span class="line">    ......</span><br><span class="line">    let car = reactive(&#123;name:&#x27;奔驰&#x27;,price:&#x27;40万&#x27;&#125;)</span><br><span class="line">    provide(&#x27;car&#x27;,car)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>后代组件中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setup(props,context)&#123;</span><br><span class="line">    ......</span><br><span class="line">    const car = inject(&#x27;car&#x27;)</span><br><span class="line">    return &#123;car&#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="6-响应式数据的判断"><a href="#6-响应式数据的判断" class="headerlink" title="6.响应式数据的判断"></a>6.响应式数据的判断</h2><ul>
<li>isRef: 检查一个值是否为一个 ref 对象</li>
<li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li>
<li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li>
<li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li>
</ul>
<h1 id="四、Composition-API-的优势"><a href="#四、Composition-API-的优势" class="headerlink" title="四、Composition API 的优势"></a>四、Composition API 的优势</h1><h2 id="1-Options-API-存在的问题"><a href="#1-Options-API-存在的问题" class="headerlink" title="1.Options API 存在的问题"></a>1.Options API 存在的问题</h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p>
<h2 id="2-Composition-API-的优势"><a href="#2-Composition-API-的优势" class="headerlink" title="2.Composition API 的优势"></a>2.Composition API 的优势</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p>
<h1 id="五、新的组件"><a href="#五、新的组件" class="headerlink" title="五、新的组件"></a>五、新的组件</h1><h2 id="1-Fragment"><a href="#1-Fragment" class="headerlink" title="1.Fragment"></a>1.Fragment</h2><ul>
<li>在Vue2中: 组件必须有一个根标签</li>
<li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li>
<li>好处: 减少标签层级, 减小内存占用</li>
</ul>
<h2 id="2-Teleport"><a href="#2-Teleport" class="headerlink" title="2.Teleport"></a>2.Teleport</h2><ul>
<li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong>组件html结构</strong>移动到指定位置的技术。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;button @click=&quot;isShow=true&quot;&gt;点我弹窗&lt;/button&gt;</span><br><span class="line">        &lt;teleport to=&quot;body&quot;&gt; // --------这里-------</span><br><span class="line">            &lt;div class=&quot;mask&quot; v-if=&quot;isShow&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;dialog&quot; &gt;</span><br><span class="line">                  &lt;h3&gt;我是一个弹窗&lt;/h3&gt;</span><br><span class="line">                  &lt;h4&gt;一些内容&lt;/h4&gt;</span><br><span class="line">                  &lt;h4&gt;一些内容&lt;/h4&gt;</span><br><span class="line">                  &lt;h4&gt;一些内容&lt;/h4&gt;</span><br><span class="line">                &lt;button @click=&quot;isShow=false&quot;&gt;关闭弹窗&lt;/button&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/teleport&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;Dialog&#x27;,</span><br><span class="line">    setup() &#123;</span><br><span class="line">        let isShow = ref(false);</span><br><span class="line">        return &#123;isShow&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .mask&#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: 0px;</span><br><span class="line">        bottom: 0px;</span><br><span class="line">        left:0px;</span><br><span class="line">        right: 0px;</span><br><span class="line">        background-color: #afafafd7;</span><br><span class="line">    &#125;</span><br><span class="line">    .dialog&#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: calc(50% - 150px);</span><br><span class="line">        left: calc(50% - 150px);</span><br><span class="line">        width: 300px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        background: skyblue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-Suspense"><a href="#3-Suspense" class="headerlink" title="3.Suspense"></a>3.Suspense</h2><ul>
<li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p>
</li>
<li><p>使用步骤：</p>
<ul>
<li><p>异步引入组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;./components/Child.vue&#x27;</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">        &lt;h3&gt;我是App组件&lt;/h3&gt;</span><br><span class="line">        &lt;Suspense&gt;</span><br><span class="line">            &lt;template v-slot:default&gt;</span><br><span class="line">                &lt;Child/&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">            &lt;template v-slot:fallback&gt;</span><br><span class="line">                &lt;h3&gt;加载中.....&lt;/h3&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Suspense&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">      &lt;h3&gt;我是App&lt;/h3&gt;</span><br><span class="line">      &lt;Suspense&gt;</span><br><span class="line">          &lt;template v-slot:default&gt;</span><br><span class="line">              &lt;Child/&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;template v-slot:fallback&gt;</span><br><span class="line">              &lt;h3&gt;lodaing....&lt;/h3&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">      &lt;/Suspense&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; defineAsyncComponent &#125; from &#x27;vue&#x27;;</span><br><span class="line">//静态引入</span><br><span class="line">// import Child from &#x27;./components/Child.vue&#x27; </span><br><span class="line"></span><br><span class="line">//异步引入</span><br><span class="line">const Child = defineAsyncComponent(()=&gt;import(&#x27;./components/Child.vue&#x27;))</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123; Child, Child &#125;,</span><br><span class="line">    setup() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .app&#123;</span><br><span class="line">        background: gray;</span><br><span class="line">        padding: 10px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h1><h2 id="1-全局API的转移"><a href="#1-全局API的转移" class="headerlink" title="1.全局API的转移"></a>1.全局API的转移</h2><ul>
<li><p>Vue 2.x 有许多全局 API 和配置。</p>
<ul>
<li><p>例如：注册全局组件、注册全局指令等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册全局组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;MyButton&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册全局指令</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">inserted</span>: <span class="function"><span class="params">el</span> =&gt;</span> el.<span class="title function_">focus</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>2.x 全局API(<code>Vue</code>)</th>
<th>3.x 实例API(<code>app</code>)</th>
</tr>
</thead>
<tbody><tr>
<td>Vue.config.xxxx</td>
<td>app.config.xxx</td>
</tr>
<tr>
<td>Vue.config.productionTip</td>
<td>移除</td>
</tr>
<tr>
<td>Vue.component</td>
<td>app.component</td>
</tr>
<tr>
<td>Vue.directive</td>
<td>app.directive</td>
</tr>
<tr>
<td>Vue.mixin</td>
<td>app.mixin</td>
</tr>
<tr>
<td>Vue.use</td>
<td>app.use</td>
</tr>
<tr>
<td>Vue.prototype</td>
<td>app.config.globalProperties</td>
</tr>
</tbody></table>
<h2 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h2><ul>
<li><p>data选项应始终被声明为一个函数。</p>
</li>
<li><p>过度类名的更改：</p>
<ul>
<li><p>Vue2.x写法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Vue3.x写法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-from</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.v-leave-from</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p>
</li>
<li><p><strong>移除</strong><code>v-on.native</code>修饰符</p>
<ul>
<li><p>父组件中绑定事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;my-component</span><br><span class="line">  v-on:close=&quot;handleComponentEvent&quot;</span><br><span class="line">  v-on:click=&quot;handleNativeClickEvent&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子组件中声明自定义事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    emits: [&#x27;close&#x27;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>移除</strong>过滤器（filter）</p>
<blockquote>
<p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p>
</blockquote>
</li>
<li><p>……</p>
</li>
</ul>
]]></content>
      <categories>
        <category>框架</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>fetch/async/await</title>
    <url>/found404.io/2022/08/11/fetch-async-await/</url>
    <content><![CDATA[<h2 id="fetch和await的结合"><a href="#fetch和await的结合" class="headerlink" title="fetch和await的结合"></a>fetch和await的结合</h2><p>起因是在写一个React发送ajax请求的案例中，遇到了一个关于fetch发送请求的问题，直接上代码:</p>
<blockquote>
<p>使用fetch发送请求后在第一个.then之前的<code>fetch(https:xxxx//$&#123;value&#125;)</code>返回的是一个promise实例对象，所以它的后面可以跟.then，但是这个.then中触发的成功回调或者失败回调仅仅是判断这个请求是否连接到服务器，并不会返回服务器发送回来的数据。</p>
<p>要想得到数据就需要调用res原型上的方法<code>res.json()</code>得到一个新的promise，并且return出去，紧跟后面的.then就可以采用链式.then的方法再次获得成功的回调(服务器返回的数据在里面)。</p>
</blockquote>
<span id="more"></span>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  search = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 使用fetch发送网络请求(未优化版本)</span></span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">`https://api.github.com/search/users?q=<span class="subst">$&#123;value&#125;</span>`</span>).<span class="title function_">then</span>(</span><br><span class="line">      <span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;联系服务器成功&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">json</span>();</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// error=&gt;&#123;</span></span><br><span class="line">      <span class="comment">//   console.log(&#x27;联系服务器失败&#x27;);</span></span><br><span class="line">      <span class="comment">//   // 如果第一个then没有返回值，那么它会返回一个undefined，</span></span><br><span class="line">      <span class="comment">//   // 而undefined所在的.then返回的promise则是一个成功状态的promise</span></span><br><span class="line">      <span class="comment">//   // 使用return new Promise();返回一个初始状态的Promise实例，则下面的then则不会走了</span></span><br><span class="line">      <span class="comment">//   return new Promise();</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    ).<span class="title function_">then</span>(</span><br><span class="line">      <span class="function"><span class="params">ress</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// console.log(ress.items);</span></span><br><span class="line">        <span class="title class_">PubSub</span>.<span class="title function_">publish</span>(<span class="string">&#x27;change&#x27;</span>,&#123;<span class="attr">isFirst</span>:<span class="literal">false</span>,<span class="attr">users</span>:ress.<span class="property">items</span>,<span class="attr">isLoading</span>:<span class="literal">false</span>&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// error=&gt;&#123;</span></span><br><span class="line">      <span class="comment">//   console.log(&#x27;获取数据失败&#x27;);</span></span><br><span class="line">      <span class="comment">//   PubSub.publish(&#x27;change&#x27;,&#123;isFirst:false,err:error.message&#125;)</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    ).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当然可以不用每个.then都捕获错误回调，可以在结尾统一拦截错误使用<code>.catch()</code></p>
</blockquote>
<p>还有一个小bug就是，如果在第一个.then中的错误回调没有返回一个promise或者其他什么的，他会默认返回undefined，而这个undefined则代表其所在.then返回的是一个成功状态的promise，这就导致后面的.then执行的是成功回调。</p>
<hr>
<p><strong>然后再说说async和await优化版本：</strong></p>
<blockquote>
<p>使用async和await可以更大限度优化代码，</p>
<p>等待<code>fetch(https://api.github.com/search/users?q=$&#123;value&#125;)</code>返回一个成功态promise给response，response接收到后调用它原型上的方法<code>response.json()</code>当然也要等待它返回一个成功态promise，并将其赋值给data，此时的data就是<strong>服务器返回的真正数据</strong></p>
<p>另外，捕获错误可以使用try-catch捕获错误</p>
<p>这种写法可以使用同步执行的思考来看待这个请求，对于promise的理解更深一步加强</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">search = <span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">    <span class="comment">// 解构赋值的连续写法</span></span><br><span class="line">    <span class="comment">// keyWordElement是未被定义的</span></span><br><span class="line">    <span class="keyword">const</span> &#123;<span class="attr">keyWordElement</span>:&#123;value&#125;&#125;=<span class="variable language_">this</span></span><br><span class="line">    <span class="comment">// 发送请求前通知List更新状态</span></span><br><span class="line">    <span class="title class_">PubSub</span>.<span class="title function_">publish</span>(<span class="string">&#x27;change&#x27;</span>,&#123;<span class="attr">isFirst</span>:<span class="literal">false</span>,<span class="attr">isLoading</span>:<span class="literal">true</span>&#125;)<span class="comment">//不用关注</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`https://api.github.com/search/users?q=<span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">      <span class="comment">// console.log(data);//服务器返回的真正数据</span></span><br><span class="line">      <span class="title class_">PubSub</span>.<span class="title function_">publish</span>(<span class="string">&#x27;change&#x27;</span>,&#123;<span class="attr">isFirst</span>:<span class="literal">false</span>,<span class="attr">users</span>:data.<span class="property">items</span>,<span class="attr">isLoading</span>:<span class="literal">false</span>&#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求出错&#x27;</span>,error);</span><br><span class="line">      <span class="title class_">PubSub</span>.<span class="title function_">publish</span>(<span class="string">&#x27;change&#x27;</span>,&#123;<span class="attr">isFirst</span>:<span class="literal">false</span>,<span class="attr">err</span>:error.<span class="property">message</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>es6</tag>
        <tag>fetch</tag>
        <tag>async/await</tag>
      </tags>
  </entry>
  <entry>
    <title>my_firstBlog</title>
    <url>/found404.io/2022/06/25/my-firstBlog/</url>
    <content><![CDATA[<h1 id="Hello-hexo"><a href="#Hello-hexo" class="headerlink" title="Hello hexo!"></a>Hello hexo!</h1><blockquote>
<p>第一篇blog</p>
<img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/01.png" style="zoom: 33%;">
</blockquote>
]]></content>
      <tags>
        <tag>Hello hexo!</tag>
      </tags>
  </entry>
  <entry>
    <title>React</title>
    <url>/found404.io/2022/08/08/React/</url>
    <content><![CDATA[<h1 id="React入门"><a href="#React入门" class="headerlink" title="React入门"></a>React入门</h1><h2 id="什么是React"><a href="#什么是React" class="headerlink" title="什么是React"></a>什么是React</h2><p><a href="https://react.docschina.org/">React中文文档</a></p>
<p>React是一个用于构建 用户界面的JavaScript库.<br>用户界面: HTML页面(前端)<br>React主要用来写HTML页面,或构建Web应用<br>如果从MVC的角度来看, React仅仅是视图层(V) , 也就是只负责视图的渲染.而并非提供了完整的M和C的功能。<br>React起源于Facebook的内部项目,做用来架设Instagram的网站.并于2013年5月开源</p>
<span id="more"></span>

<h2 id="React特点"><a href="#React特点" class="headerlink" title="React特点"></a>React特点</h2><h3 id="1-声明式"><a href="#1-声明式" class="headerlink" title="1.声明式"></a>1.声明式</h3><p>你只需要描述UI ( HTML )看起来是什么样,就跟写HTML一样<br>React负责渲染UI ,并在数据变化时更新UI</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jsx = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React! 动态变化数据：&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="2-基于组件"><a href="#2-基于组件" class="headerlink" title="2.基于组件"></a>2.基于组件</h3><ul>
<li>组件是React最重要的内容</li>
<li>组件表示页面中部分内容</li>
<li>组合复用这些组件</li>
</ul>
<h3 id="3-学习一次-随处使用"><a href="#3-学习一次-随处使用" class="headerlink" title="3.学习一次,随处使用"></a>3.学习一次,随处使用</h3><ul>
<li>使用React可以开发Web应用</li>
<li>使用React可以开发移动端原生应用( react-native )</li>
<li>使用React可以开发VR(虚拟现实)应用(react360)</li>
</ul>
<h2 id="React基本使用"><a href="#React基本使用" class="headerlink" title="React基本使用"></a>React基本使用</h2><h3 id="React的安装"><a href="#React的安装" class="headerlink" title="React的安装"></a>React的安装</h3><p>安装命令: <code>npm i react react-dom</code></p>
<ul>
<li>react 包是核心,提供创建元素、组件等功能</li>
<li>react-dom 包提供DOM相关功能等</li>
</ul>
<h3 id="React的使用"><a href="#React的使用" class="headerlink" title="React的使用"></a>React的使用</h3><ol>
<li>引入react和react-dom两个js文件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.引入reactjs文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/react/umd/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/react-dom/umd/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建React元素 <code>React.createElement()</code><ul>
<li>参数1：元素名称(标签名)</li>
<li>参数2：元素属性</li>
<li>参数3：元素的子节点</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.创建react元素</span></span><br><span class="line"><span class="comment">// 参数1：元素名称(标签名)</span></span><br><span class="line"><span class="comment">// 参数2：元素属性</span></span><br><span class="line"><span class="comment">// 参数3：元素的子节点</span></span><br><span class="line"><span class="keyword">const</span> title = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;Hello React&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>渲染React元素到页面中 <code>ReactDOM.render()</code></p>
<blockquote>
<p>负责将创建好的元素渲染进页面</p>
</blockquote>
<ul>
<li>参数1：要渲染的React元素</li>
<li>参数2：挂载点相当于vue中的容器</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.渲染React元素</span></span><br><span class="line"><span class="comment">// 参数1：要渲染的React元素</span></span><br><span class="line"><span class="comment">// 参数2：挂载点相当于vue中的容器</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(title, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="React脚手架"><a href="#React脚手架" class="headerlink" title="React脚手架"></a>React脚手架</h3><blockquote>
<ol>
<li>脚手架是开发现代web应用的必备</li>
<li>充分利用Webpack，Babel，ESLint等工具辅助项目开发</li>
<li>零配置，无需手动配置繁琐的工具即可使用</li>
<li>关注业务，而不是工具配置</li>
</ol>
</blockquote>
<h4 id="使用脚手架"><a href="#使用脚手架" class="headerlink" title="使用脚手架"></a>使用脚手架</h4><ol>
<li>初始化项目，命令<code>npx create-react-app my-app</code></li>
<li>启动项目，在项目根目录执行命令<code>npm run start</code></li>
</ol>
<h3 id="在脚手架中使用React"><a href="#在脚手架中使用React" class="headerlink" title="在脚手架中使用React"></a>在脚手架中使用React</h3><p>1.导入react和react-dom两个包。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span><span class="string">&#x27; react ，</span></span><br><span class="line"><span class="string">import ReactDOM from &#x27;</span>react-dom<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>

<p>2.调用<code>React.createElement()</code>方法创建react元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> title = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;Hello React!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>3.调用<code>ReactDOM.render()</code>方法渲染react元素到页面中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(title, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><h3 id="JSX的基本使用"><a href="#JSX的基本使用" class="headerlink" title="JSX的基本使用"></a>JSX的基本使用</h3><h4 id="jsx简介"><a href="#jsx简介" class="headerlink" title="jsx简介"></a>jsx简介</h4><p><strong>createElement()</strong></p>
<blockquote>
<pre><code>1. 繁琐不简洁
1. 不直观
1. 不优雅
</code></pre>
</blockquote>
<p><strong>jsx</strong></p>
<blockquote>
<ol>
<li>跟html写法一样</li>
<li>简单</li>
<li>识别度高</li>
</ol>
</blockquote>
<p><strong>JSX</strong>是<strong>JavaScript XML</strong>的简写,表示在JavaScript代码中写XML ( HTML )格式的代码。</p>
<ul>
<li>优势:声明式语法更加直观、与HTML结构相同,降低了学习成本、提升开发效率</li>
</ul>
<h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ol>
<li>使用jsx语法创建react元素</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> title = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello JSX </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用<code>ReactDOM.render()</code>方法渲染react元素到页面</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 渲染react元素</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(title,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p>为什么脚手架中可以使用JSX语法?</p>
<ol>
<li>JSX 不是标准的ECMAScript语法,它是ECMAScript的语法扩展。</li>
<li>需要使用babel编译处理后,才能在浏览器环境中使用。</li>
<li>create-react- app脚手架中已经默认有该配置,无需手动配置。</li>
<li>编译JSX语法的包为: <u>@babel&#x2F;preset-react</u>.</li>
</ol>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol>
<li>React元素的属性名使用驼峰命名法</li>
<li>特殊属性名:</li>
</ol>
<ul>
<li>class   —&gt;   className</li>
<li>for   —&gt;   htmlFor</li>
<li>tabindex   —&gt;   tabIndex</li>
</ul>
<ol start="3">
<li>没有子节点的React元素可以用 &#x2F;&gt; 结束。</li>
<li>推荐:使用小括号包裹JSX , 从而避免JS中的自动插入分号陷阱。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span>Hello JSX </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="jsx中使用js表达式"><a href="#jsx中使用js表达式" class="headerlink" title="jsx中使用js表达式"></a>jsx中使用js表达式</h3><blockquote>
<p>这点和vue有点不同使用的是单括号</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name=<span class="string">&#x27;Jack&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span>Hello &#123;name&#125; </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>表达式其实就是可以用变量接收并且可以log出来的</p>
<ul>
<li>在这里，ul中的li被自动循环遍历，而vue中要使用 v-for</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">		<span class="keyword">const</span> data = [<span class="string">&#x27;01&#x27;</span>,<span class="string">&#x27;02&#x27;</span>,<span class="string">&#x27;03&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CDOM</span>=(</span><br><span class="line">          <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端js框架列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                 &#123;</span></span><br><span class="line"><span class="language-xml">                  data.map((item,index)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                      return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#x27;index&#x27;</span>&gt;</span>item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  &#125;)</span></span><br><span class="line"><span class="language-xml">                 &#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      )</span><br></pre></td></tr></table></figure>

<h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><p>理解: 用来实现局部功能效果的代码和资源的集合htm&#x2F;css&#x2F;js&#x2F;image等等)<br>作用: 复用编码,简化项目编码,提高运行效率</p>
<blockquote>
<p>当应用是以多组件的方式实现,这个应用就是一个组件化的应用</p>
<p>这点就不详细写了，在vue中已经了解过了</p>
</blockquote>
<h1 id="React面向组件编程"><a href="#React面向组件编程" class="headerlink" title="React面向组件编程"></a>React面向组件编程</h1><blockquote>
<p>安装React开发者工具  谷歌应用商店搜索即可</p>
</blockquote>
<h2 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h2><blockquote>
<p>组件名首字母大写</p>
<ul>
<li>Demo()中的this指向undefined</li>
<li>因为babel编译后开了严格模式</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是函数定义的组件(适用于简单组件的定义)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 渲染React元素</span></span><br><span class="line"> <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>执行了ReactDOM.render( &lt;MyComponent&#x2F;…….之后，发生了什么?</p>
<ol>
<li>React解析组件标签。找到了Demo组件。</li>
<li>发现组件是使用函数定义的。随后调用该函数。将返回的虚拟DOM转为真实DOM，随后呈现在页面中。</li>
</ol>
<h2 id="类式组件"><a href="#类式组件" class="headerlink" title="类式组件"></a>类式组件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建类式组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="comment">//render是放在哪里的? -MyComponent的原型对象上。供实例使用。</span></span><br><span class="line">    <span class="comment">//render中的this是谁? -MyComponent的实例对象 &lt;=&gt; MyComponent组件实例对象</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是类定义的组件(适用于复杂组件的定义)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 渲染React元素</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>执行了ReactDOM.render( &lt;MyComponent&#x2F;…….之后，发生了什么?</p>
<ol>
<li>React解析组件标签，找到了MyComponent组件。</li>
<li>发现组件是使用类定义的。随后new出来该类的实例，并通过该实例调用到原型上的render方法。</li>
<li>将render返回的虚拟DOM转为真实DOM，随后呈现在页面中</li>
</ol>
<h2 id="简单-x2F-复杂组件"><a href="#简单-x2F-复杂组件" class="headerlink" title="简单&#x2F;复杂组件"></a>简单&#x2F;复杂组件</h2><ol>
<li>简单组件无<strong>状态(state)</strong></li>
<li>复杂组件有<strong>状态(state)</strong></li>
</ol>
<p>组件的状态中存放着数据，数据的改变驱动着页面的改变</p>
<blockquote>
<p>跟vue的data存放数据有点相像</p>
</blockquote>
<h2 id="组件实例的三大核心属性"><a href="#组件实例的三大核心属性" class="headerlink" title="组件实例的三大核心属性"></a>组件实例的三大核心属性</h2><blockquote>
<p>新版react的hooks也可以使用这三大属性</p>
</blockquote>
<h3 id="1-state"><a href="#1-state" class="headerlink" title="1.state"></a>1.state</h3><blockquote>
<p>state中存放着数据，官方要求写成对象形式</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建类式组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(props)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">isHot</span>:<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;isHot&#125; = <span class="variable language_">this</span>.<span class="property">state</span> <span class="comment">//解构赋值将isHot取出</span></span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>今天天气很&#123;isHot ?&quot;炎热&quot;:&quot;凉爽&quot;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 渲染React元素</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p><strong>事件绑定</strong></p>
<ul>
<li>这点和Vue有点区别，react将所有原生的<code>onclick</code>变成了<code>onClick</code></li>
<li>等号右边不用”“改用{}</li>
<li><code>onClick=&#123;change&#125;</code>这是一个赋值语句，如果加了()则变成了执行之后在返回给onClick，但是却是undefined</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">      <span class="comment">// 创建类式组件</span></span><br><span class="line">      <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">          <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">              <span class="variable language_">super</span>(props)</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">                  <span class="attr">isHot</span>:<span class="literal">true</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">              <span class="keyword">const</span> &#123;isHot&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">              <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;change&#125;</span>&gt;</span>今天天气很&#123;isHot ?&quot;炎热&quot;:&quot;凉爽&quot;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">// 渲染React元素</span></span><br><span class="line"><span class="comment">// 注意：此处react自动帮我们new了组件实例对象Demo</span></span><br><span class="line">      <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">change</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码并不完善</p>
<ul>
<li>首先，change()中的this为undefined，因为Babel开启了严格模式的原因</li>
<li>解决：<ul>
<li>让change可以读取到state</li>
<li>改变state中的值</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="comment">// 构造器执行一次，渲染react的时候.render自动帮我们new了Demo</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(props)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">isHot</span>:<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">change</span>=<span class="variable language_">this</span>.<span class="property">change</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">        <span class="comment">// 解决change中的this指向问题</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// render调用几次？——1+n次，1是初始化执行的一次，n是你每次调用执行的次数</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;isHot&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.change&#125;</span>&gt;</span>今天天气很&#123;isHot ?&quot;炎热&quot;:&quot;凉爽&quot;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// change() 点几次调用几次</span></span><br><span class="line">    <span class="title function_">change</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// change.放在哪里? - Demo的原型对象上，供实例使用</span></span><br><span class="line">        <span class="comment">// 由于change是作为onClick的回调，所以不是通过实例调用的，是直接调用</span></span><br><span class="line">        <span class="comment">// 类中的方法默认开启了局部的严格模式，所以change中的this为undefined</span></span><br><span class="line">        <span class="comment">// this.state.isHot = !this.state.isHot;//错误写法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 严重注意：state要借助React.Component原型上的setStateAPI进行更新</span></span><br><span class="line">        <span class="comment">// 且更新是一种合并，不是替换</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;修改天气&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>将change()放在了Demo里面，这就使得组件实例对象上也有了change这个方法</li>
<li>通过在构造器中<code>this.change=this.change.bind(this);</code>改变其this指向</li>
<li>这时候的change()就可以读取到state并改变它的值<ul>
<li>注意：<ul>
<li>state的值无法通过&#x3D;的形式进行改变</li>
<li>调用<code>React.Component</code>原型上的<code>setState</code>API进行更新状态(数据)</li>
<li><code>this.setState(&#123;isHot:!isHot&#125;)</code>另外数据是合并而不是替换</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>精简版：</strong></p>
<blockquote>
<p>扩充一个概念，当你在class中写入<code>a=0</code>的时候，这个类的实例化对象上就多了一个a属性，值为0</p>
</blockquote>
<p>根据这个扩充就可以对上文代码进行简化，state就可以直接以赋值的写法写入，而change则通过赋值语句的写法＋箭头函数来定义</p>
<blockquote>
<p>之所以使用箭头函数，是因为箭头函数中的this是寻找它父级的this，也就是Demo实例对象</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="comment">// 初始化状态</span></span><br><span class="line">    state = &#123;<span class="attr">isHot</span>:<span class="literal">true</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;isHot&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.change&#125;</span>&gt;</span>今天天气很&#123;isHot ?&quot;炎热&quot;:&quot;凉爽&quot;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义方法---要用赋值语句＋箭头函数</span></span><br><span class="line">    <span class="comment">// vue是把方法都放在了methods中</span></span><br><span class="line">    change =<span class="function">()=&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(this);</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">isHot</span>:!<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHot</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>setState中传入对象</p>
</blockquote>
<h3 id="2-props"><a href="#2-props" class="headerlink" title="2.props"></a>2.props</h3><blockquote>
<p>用于接收组件标签传递的参数</p>
<p>当数据不存在state中，而是通过<code>&lt;Demo name=&quot;jerry&quot; age=&quot;19&quot; sex=&quot;男&quot;/&gt;</code>传递的参数，就可以使用props进行接收</p>
<p><em>在vue中props用于父组件向子组件传递数据</em></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>);</span><br><span class="line">        <span class="keyword">const</span> &#123;name,age,sex&#125;=<span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 渲染组件到页面</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">name</span>=<span class="string">&quot;jerry&quot;</span><span class="attr">age</span>=<span class="string">&quot;19&quot;</span><span class="attr">sex</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root1&#x27;</span>));</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">name</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">sex</span>=<span class="string">&quot;女&quot;</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root2&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> p=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;老刘&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> &#123;<span class="attr">...p</span>&#125;/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root3&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p><strong>对传递的数据进行限制：</strong></p>
<p>为Demo组件实例添加静态属性</p>
<ul>
<li>propTypes      对标签属性进行类型，必要性的限制<ul>
<li><code>name: PropTypes.string.isRequired</code><ul>
<li><code>isRequired</code>限制name为必传且为字符串</li>
</ul>
</li>
</ul>
</li>
<li>defaultProps    指定的默认的标签属性值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(props);</span><br><span class="line">        <span class="variable language_">super</span>(props)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; name, age, sex &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age + 1&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态属性static标注的属性或者方法是属于类的不会属于实例化对象</span></span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>,<span class="comment">//isRequired限制name为必传且为字符串</span></span><br><span class="line">        <span class="attr">sex</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,<span class="comment">//限制sex成string类型</span></span><br><span class="line">        <span class="attr">age</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>,<span class="comment">//限制age成number类型</span></span><br><span class="line">        <span class="attr">spack</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span><span class="comment">//限制spack成function类型</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">        <span class="attr">sex</span>: <span class="string">&#x27;不男不女&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>函数式组件使用props</strong></p>
<blockquote>
<p>因为函数式组件是可以传递参数的所以可以使用props，正好迎合了它的作用</p>
<p>但是<code>propTypes</code>和<code>defaultProps</code>就要写到外面进行调用了</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;name,age,sex&#125; = props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数式组件也可以对传递的数据进行规定和限制</span></span><br><span class="line"><span class="title class_">Demo</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>,<span class="comment">//isRequired限制name为必传且为字符串</span></span><br><span class="line">    <span class="attr">sex</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,<span class="comment">//限制sex成string类型</span></span><br><span class="line">    <span class="attr">age</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>,<span class="comment">//限制age成number类型</span></span><br><span class="line">    <span class="attr">spack</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span><span class="comment">//限制spack成function类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Demo</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">   <span class="attr">sex</span>: <span class="string">&#x27;不男不女&#x27;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 渲染组件到页面</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">name</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">age</span>=<span class="string">&#123;18&#125;</span> <span class="attr">sex</span>=<span class="string">&quot;女&quot;</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root2&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="3-ref"><a href="#3-ref" class="headerlink" title="3.ref"></a>3.ref</h3><p><strong>字符串型的ref</strong>(不推荐)</p>
<blockquote>
<p>这个ref和vue中的ref一样，也是获取元素</p>
<ul>
<li>ref标识命名的DOM元素会被放到实例对象的refs中</li>
<li>通过<code>this.refs</code>就可以得到这些DOM元素</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="comment">//展示左侧输入框数据</span></span><br><span class="line">    showData=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;input1&#125; = <span class="variable language_">this</span>.<span class="property">refs</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(input1.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 展示右侧输入框数据</span></span><br><span class="line">    showData2=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;input2&#125; = <span class="variable language_">this</span>.<span class="property">refs</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(input2.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示数据&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData2&#125;</span> <span class="attr">ref</span>=<span class="string">&quot;input2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;失去焦点提示数据&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p><strong>回调函数的ref</strong></p>
<blockquote>
<p>ref中是一个回调函数 <code>surrentNode=&gt;this.input1 = surrentNode</code> 简写形式</p>
<p>传递的参数surrentNode代表这个节点本身</p>
<p>以下是内敛函数的写法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="comment">//展示左侧输入框数据</span></span><br><span class="line">    showData=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;input1&#125; = <span class="variable language_">this</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(input1.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;surrentNode</span>=&gt;</span>this.input1 = surrentNode&#125; type=&quot;text&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span>                  </span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>回调函数的写法：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="comment">//展示左侧输入框数据</span></span><br><span class="line">    showData=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;input1&#125; = <span class="variable language_">this</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(input1.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    saveInput=<span class="function">(<span class="params">c</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">input1</span> = c;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;@&#x27;</span>,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.saveInput&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示数据&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/*<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;surrentNode</span>=&gt;</span>this.input1 = surrentNode&#125; type=&quot;text&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt;*/&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>createRef(官方最推荐)</strong></p>
<blockquote>
<p><code>myRef=React.createRef()</code>属于专人专用，只可存放一个节点</p>
<p>有几个要使用的DOM就声明几个<code>myRef=React.createRef()</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="comment">// React.createRef调用后可以返回-个容器，该容器可以存储被ref所标识的节点（专人专用）</span></span><br><span class="line">    myRef=<span class="title class_">React</span>.<span class="title function_">createRef</span>()</span><br><span class="line">    myRef2=<span class="title class_">React</span>.<span class="title function_">createRef</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//展示左侧输入框数据</span></span><br><span class="line">    showData=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">myRef</span>.<span class="property">current</span>.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    showData2=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">myRef2</span>.<span class="property">current</span>.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示数据&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef2&#125;</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData2&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;失去焦点提示数据&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="React中事件处理"><a href="#React中事件处理" class="headerlink" title="React中事件处理"></a>React中事件处理</h2><h3 id="1-通过onXxx属性"><a href="#1-通过onXxx属性" class="headerlink" title="(1)通过onXxx属性"></a>(1)通过onXxx属性</h3><p>通过onXxx属性指定事件处理函数(注意大小写)</p>
<ol>
<li>React使用的是自定义(合成)事件,而不是使用的原生DOM事件一为了更好的兼容性</li>
<li>React中的事件是通过事件委托方式处理的(委托给组件最外层的元素)一为了的高效</li>
</ol>
<h3 id="2-event-target"><a href="#2-event-target" class="headerlink" title="(2)event.target"></a>(2)event.target</h3><p>得到发生事件的DOM元素对象———————不要过度使用ref</p>
<blockquote>
<p>应用于如果你想获取的元素就是你绑定事件的元素，那么就可以使用<strong>event.target</strong></p>
</blockquote>
<h2 id="收集表单数据库"><a href="#收集表单数据库" class="headerlink" title="收集表单数据库"></a>收集表单数据库</h2><p>包含表单的组件分类</p>
<ol>
<li>受控组件</li>
<li>非受控组件</li>
</ol>
<h3 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    handleSubmit=<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">        event.<span class="title function_">preventDefault</span>();<span class="comment">//阻止默认行为不让页面跳转</span></span><br><span class="line">        <span class="keyword">const</span> &#123;username,password&#125;=<span class="variable language_">this</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(username.<span class="property">value</span>,password.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span>=&gt;</span>this.username=c&#125; type=&quot;text&quot; name=&quot;username&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">                密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span>=&gt;</span>this.password=c&#125; type=&quot;password&quot; name=&quot;password&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span>                     </span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="comment">// 初始化状态</span></span><br><span class="line">    <span class="keyword">static</span>=&#123;</span><br><span class="line">        <span class="attr">username</span>:<span class="string">&quot;&quot;</span>,<span class="comment">//用户名</span></span><br><span class="line">        <span class="attr">password</span>:<span class="string">&quot;&quot;</span><span class="comment">//密码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存用户名到状态中</span></span><br><span class="line">    userName=<span class="function">(<span class="params">ev</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">username</span>:ev.<span class="property">target</span>.<span class="property">value</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保存密码到状态中</span></span><br><span class="line">    passWorl=<span class="function">(<span class="params">ev</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">password</span>:ev.<span class="property">target</span>.<span class="property">value</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleSubmit=<span class="function">(<span class="params">ev</span>)=&gt;</span>&#123;</span><br><span class="line">        ev.<span class="title function_">preventDefault</span>();</span><br><span class="line">        <span class="keyword">const</span> &#123;username,password&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(username,password);    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.userName&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                密码：<span class="tag">&lt;<span class="name">input</span>  <span class="attr">onChange</span>=<span class="string">&#123;this.passWorl&#125;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span>                     </span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="高阶函数和函数柯里化"><a href="#高阶函数和函数柯里化" class="headerlink" title="高阶函数和函数柯里化"></a>高阶函数和函数柯里化</h2><p><strong>高阶函数</strong>:如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。</p>
<blockquote>
<ol>
<li><p>若A函数，接收的参数是一一个函数，那么A就可以称之为高阶函数。</p>
</li>
<li><p>若A函数，调用的返回值依然是一“个函数，那么A就可以称之为高阶函数。</p>
<ul>
<li>常见的高阶函数有: Promise，setTimeout.，arr. map()等等</li>
</ul>
</li>
</ol>
</blockquote>
<p><strong>函数的柯里化</strong>:通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。</p>
<hr>
<p><strong>对于以上受控组件函数柯里化写法：</strong></p>
<blockquote>
<p>不再用<code>this.userName</code>或者<code>this.passWorl</code>这种分开写法，而是同意获取数据</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="comment">// 初始化状态</span></span><br><span class="line">    state=&#123;</span><br><span class="line">        <span class="attr">username</span>:<span class="string">&quot;&quot;</span>,<span class="comment">//用户名</span></span><br><span class="line">        <span class="attr">password</span>:<span class="string">&quot;&quot;</span><span class="comment">//密码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保存表单数据到状态中</span></span><br><span class="line">    saveFromData=<span class="function">(<span class="params">dataType</span>)=&gt;</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="function">(<span class="params">ev</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// console.log(dataType,ev.target.value);</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;[dataType]:ev.<span class="property">target</span>.<span class="property">value</span>&#125;)</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    handleSubmit=<span class="function">(<span class="params">ev</span>)=&gt;</span>&#123;</span><br><span class="line">        ev.<span class="title function_">preventDefault</span>();</span><br><span class="line">        <span class="keyword">const</span> &#123;username,password&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(username,password);    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFromData(</span>&#x27;<span class="attr">username</span>&#x27;)&#125; <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                密码：<span class="tag">&lt;<span class="name">input</span>  <span class="attr">onChange</span>=<span class="string">&#123;this.saveFromData(</span>&#x27;<span class="attr">password</span>&#x27;)&#125; <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span>                     </span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p><strong>对于以上受控组件不适用函数柯里化写法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化状态</span></span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&quot;&quot;</span>,<span class="comment">//用户名</span></span><br><span class="line">        <span class="attr">password</span>: <span class="string">&quot;&quot;</span><span class="comment">//密码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保存表单数据到状态中</span></span><br><span class="line">    saveFromData = <span class="function">(<span class="params">dataType, ev</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; [dataType]: ev.<span class="property">target</span>.<span class="property">value</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleSubmit = <span class="function">(<span class="params">ev</span>) =&gt;</span> &#123;</span><br><span class="line">        ev.<span class="title function_">preventDefault</span>();</span><br><span class="line">        <span class="keyword">const</span> &#123; username, password &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(username, password);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;ev</span>=&gt;</span>this.saveFromData(&#x27;username&#x27;,ev)&#125; type=&quot;text&quot; name=&quot;username&quot; /&gt;</span></span><br><span class="line"><span class="language-xml">                密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;ev</span>=&gt;</span>this.saveFromData(&#x27;password&#x27;,ev)&#125; type=&quot;password&quot; name=&quot;password&quot; /&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其实就是将onchange本身变成一个函数，函数内则是调用<code>.saveFromData(&#39;username&#39;,ev)</code>的方法</p>
</blockquote>
<h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><h3 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h3><ol>
<li>组件对象从创建到死亡它会经历特定阶段</li>
<li>React 组件对象包含一系列勾子函数(生命周期回调函数),在特定的时刻调用</li>
<li>我们在定义组件时, 在特定的生命周期回调函数,中做特定的工作</li>
</ol>
<blockquote>
<p>其实和vue中的生命周期大致一样的思路</p>
</blockquote>
<h3 id="生命周期流程图-旧"><a href="#生命周期流程图-旧" class="headerlink" title="生命周期流程图(旧)"></a>生命周期流程图(旧)</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220807173632231.png" alt="image-20220807173632231"></p>
<h4 id="1-初始化状态"><a href="#1-初始化状态" class="headerlink" title="1.初始化状态"></a>1.初始化状态</h4><blockquote>
<p>由ReactDOM.render()触发——初次渲染</p>
</blockquote>
<ol>
<li>constructor( )                                      构造器</li>
<li>componentWillMount ( )                   组件将要挂载的钩子</li>
<li>render( )                                               初始化渲染 状态更新后被调用</li>
<li>componentDidMount( )                     组件挂载完毕的钩子<ul>
<li>一般在这个钩子中做一些初始化的事，例如，开启定时器，发网络请求，订阅消息</li>
</ul>
</li>
</ol>
<h4 id="2-更新阶段"><a href="#2-更新阶段" class="headerlink" title="2.更新阶段"></a>2.更新阶段</h4><blockquote>
<p>由组件内部this . setSate()或父组件重新render触发</p>
</blockquote>
<ol>
<li>shouldComponentUpdate()             控制组件更新的“阀门” return true开启阀门</li>
<li>componentWillUpdate()                   组件将要更新的钩子</li>
<li>render()                                               初始化渲染 状态更新后被调用</li>
<li>componentDidUpdate( )                  组件更新完毕钩子<ul>
<li>可以传递参数<ul>
<li>1.组件身上传递的props</li>
<li>2.组件更新之前state数据</li>
<li>3.在新的生命周期中接收<code>getSnapshotBeforeUpdate</code>的返回值</li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="3-卸载组件"><a href="#3-卸载组件" class="headerlink" title="3.卸载组件"></a>3.卸载组件</h4><blockquote>
<p>由ReactDOM. unmountComponentAtNode( )触发</p>
</blockquote>
<ol>
<li>componentWillUnmount( )              组件将要销毁的钩子<ul>
<li>一般在这个钩子中做一些收尾的事，例如，关闭定时器，取消订阅消息</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count-constructor&#x27;</span>);</span><br><span class="line">        <span class="variable language_">super</span>(props)</span><br><span class="line">        <span class="comment">// 初始化状态</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加一</span></span><br><span class="line">    add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 获取原状态</span></span><br><span class="line">        <span class="keyword">const</span> &#123; count &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="comment">// 更新数据</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: count + <span class="number">1</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 强制更新按钮</span></span><br><span class="line">    force = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//不受阀门限制</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">forceUpdate</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 卸载组件</span></span><br><span class="line">    remove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title class_">ReactDOM</span>.<span class="title function_">unmountComponentAtNode</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 组件将要挂载的钩子</span></span><br><span class="line">    <span class="title function_">componentWillMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count-componentWillMount将要挂载&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 组件挂载完毕的钩子</span></span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count-componentDidMount挂载完毕&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 组件将要销毁的钩子</span></span><br><span class="line">    <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count-componentWillUnmount将要销毁&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 控制组件更新的“阀门” return true开启阀门</span></span><br><span class="line">    <span class="title function_">shouldComponentUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count-shouldComponentUpdate组件更新阀门&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 组件将要更新的钩子</span></span><br><span class="line">    <span class="title function_">componentWillUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count-componentWillUpdate将要更新&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 组件更新完毕钩子</span></span><br><span class="line">    <span class="title function_">componentDidUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count-componentDidUpdate更新完毕&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化渲染 状态更新后被调用</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count-Render更新中&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> &#123; count &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前求和&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>点我+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.remove&#125;</span>&gt;</span>点我卸载组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.force&#125;</span>&gt;</span>不更改任何状态中的数据，强制更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 父组件A子组件B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    state = &#123; <span class="attr">carName</span>: <span class="string">&#x27;奔驰&#x27;</span> &#125;</span><br><span class="line">    changeCar = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">carName</span>: <span class="string">&#x27;奥托&#x27;</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeCar&#125;</span>&gt;</span>换车<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">B</span> <span class="attr">carName</span>=<span class="string">&#123;this.state.carName&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="comment">// 组件将要接收新的props的钩子</span></span><br><span class="line">    <span class="title function_">componentWillReceiveProps</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B-componentWillReceiveProps&#x27;</span>, props);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>B,接收到的车是&#123;this.props.carName&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">A</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="生命周期流程图-新"><a href="#生命周期流程图-新" class="headerlink" title="生命周期流程图(新)"></a>生命周期流程图(新)</h3><blockquote>
<p>新的生命周期中对旧版的三个Will钩子进行了删除，添加了新的钩子</p>
<p>下文加粗</p>
</blockquote>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220807193938400.png" alt="image-20220807193938400"></p>
<h4 id="1-初始化阶段"><a href="#1-初始化阶段" class="headerlink" title="1.初始化阶段:"></a>1.初始化阶段:</h4><blockquote>
<p>由ReactDOM. render()触发—初次渲染</p>
</blockquote>
<ol>
<li><p>constructor( )</p>
</li>
<li><p><strong>getDerivedStateFromProps</strong></p>
<ul>
<li>此钩子不常用，其可以接收props和state，return的值可以是props或者自定义值</li>
</ul>
</li>
<li><p>render()</p>
</li>
<li><p>componentDidMount()           &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;    常用</p>
</li>
</ol>
<blockquote>
<p>一般在这个钩子中做一些初始化的事，例如:开启定时器、发送网络请求、订阅消息</p>
</blockquote>
<h4 id="2-更新阶段-1"><a href="#2-更新阶段-1" class="headerlink" title="2.更新阶段:"></a>2.更新阶段:</h4><blockquote>
<p>由组件内部this . setSate( )或父组件重新render触发</p>
</blockquote>
<ol>
<li><strong>getDerivedStateFromProps</strong></li>
<li>shouldComponentUpdate()</li>
<li>render()</li>
<li><strong>getSnapshotBeforeUpdate()</strong><ul>
<li>此钩子是组件即将更新完毕触发的，它可以获取到组件的旧状态，并将状态return出去由<code>componentDidUpdate</code>接收(第三个参数)</li>
</ul>
</li>
<li>componentDidUpdate()<ul>
<li>有三个参数<ul>
<li>1.组件身上传递的props</li>
<li>2.组件更新之前state数据</li>
<li>3.在新的生命周期中接收<code>getSnapshotBeforeUpdate</code>的返回值</li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="3-卸载组件-1"><a href="#3-卸载组件-1" class="headerlink" title="3.卸载组件:"></a>3.卸载组件:</h4><blockquote>
<p>由ReactDOM. unmountComponentAtNode( )触发</p>
</blockquote>
<ol>
<li>componentWillUnmount( )       &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;常用<blockquote>
<p>一般在这个钩子中做一些收尾的事，例如:关闭定时器、取消订阅消息</p>
</blockquote>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><h4 id="重要的勾子"><a href="#重要的勾子" class="headerlink" title="重要的勾子"></a>重要的勾子</h4><ol>
<li>render:      初始化渲染或更新渲染调用</li>
<li>componentDidMount:      开启监听,发送ajax请求</li>
<li>componentWillUnmount:       做一些收尾工作, 如:清理定时器</li>
</ol>
<h4 id="即将废弃的勾子"><a href="#即将废弃的勾子" class="headerlink" title="即将废弃的勾子"></a>即将废弃的勾子</h4><ol>
<li>componentWillMount</li>
<li>componentWilReceivePropse</li>
<li>componentWillUpdatee</li>
</ol>
<p>现在使用会出现警告，下一个大版本需要机上<code>UNSAFE_</code>前缀才能使用，以后可能会被彻底<br>废弃,不建议使用。</p>
<h2 id="diffing算法和key的作用"><a href="#diffing算法和key的作用" class="headerlink" title="diffing算法和key的作用"></a>diffing算法和key的作用</h2><blockquote>
<p>这个diffing算法和vue中的新旧虚拟dom对比是一样的</p>
</blockquote>
<h3 id="1-虚拟DOM中key的作用"><a href="#1-虚拟DOM中key的作用" class="headerlink" title="1.虚拟DOM中key的作用"></a>1.虚拟DOM中key的作用</h3><p>key是虚拟DOM对象的标识，当中的数据发生改变时，Vue会根据【新数据】生成【新的虚拟DOM】，随后Vue进行【虚拟DOM】与【旧虚拟DOM】的差异进行比较。</p>
<h3 id="2-比较规则"><a href="#2-比较规则" class="headerlink" title="2.比较规则"></a>2.比较规则</h3><h4 id="a"><a href="#a" class="headerlink" title="a."></a>a.</h4><p>旧DMO中找到了与新虚拟DOM相同的key：</p>
<ol>
<li>若虚拟DOM中内容没有改变，直接使用之前的真实DOM!</li>
<li>若虚拟DOM中内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM</li>
</ol>
<h4 id="b"><a href="#b" class="headerlink" title="b."></a>b.</h4><p>旧虚拟DOM中未找到与新虚拟DOM相同的key</p>
<ol>
<li>创建新的真实DOM，随后渲染到页面中</li>
</ol>
<h3 id="3-用index作为key可能会引发的问题"><a href="#3-用index作为key可能会引发的问题" class="headerlink" title="3.用index作为key可能会引发的问题"></a>3.用index作为key可能会引发的问题</h3><ol>
<li><p>若对数据进行：逆序添加，逆序删除等破坏顺序操作：</p>
<blockquote>
<p>会产生没有必要的真实DOM更新&#x3D;&#x3D;&#x3D;&gt;界面效果没问题，但是效率低</p>
</blockquote>
</li>
<li><p>如果结构中还包含输入类的DOM：</p>
<blockquote>
<p>会产生错误的DOM更新&#x3D;&#x3D;&#x3D;&gt;界面有问题</p>
</blockquote>
</li>
</ol>
<h3 id="4-开发中如何选择key"><a href="#4-开发中如何选择key" class="headerlink" title="4.开发中如何选择key"></a>4.开发中如何选择key</h3><ol>
<li>最好使用每条数据的唯一标识作为key，比如id，手机号，身份证号，学号等唯一值。</li>
<li>如果不存在对数据的逆序添加，逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。</li>
</ol>
<h1 id="React脚手架-1"><a href="#React脚手架-1" class="headerlink" title="React脚手架"></a>React脚手架</h1><h2 id="使用create-react-app创建react应用"><a href="#使用create-react-app创建react应用" class="headerlink" title="使用create-react-app创建react应用"></a>使用create-react-app创建react应用</h2><h3 id="react脚手架"><a href="#react脚手架" class="headerlink" title="react脚手架"></a>react脚手架</h3><ol>
<li>xxx 脚手架:用来帮助程序员快速创建一个基于xxx库的模板项目<ol>
<li>包含了所有需要的配置   （语法检查、jsx编译、devServer..）</li>
<li>下载好了所有相关的依赖</li>
</ol>
</li>
<li>可以直接运行一个简单效果</li>
<li>react 提供了一个用于创建 react项目的脚手架库: create-react-app</li>
<li>项目的整体技术架构为: react + webpack + es6 + eslinte</li>
<li>使用脚手架开发的项目的特点: 模块化,组件化,工程化</li>
</ol>
<h3 id="创建项目并启动"><a href="#创建项目并启动" class="headerlink" title="创建项目并启动"></a>创建项目并启动</h3><p>第一步，全局安装: <code>npm install -g create-react-app</code><br>第二步，切换到想创项目的目录,使用命令:<code> create-react-app hello-react</code><br>第三步，进入项目文件夹: <code>cd hello-react</code><br>第四步，启动项目: <code>npm start</code></p>
<blockquote>
<p>查看脚手架版本<code>create-react-app --version</code></p>
</blockquote>
<p><strong>react中的组件文件后缀可以改为<code>jsx</code></strong></p>
<h3 id="css模块化"><a href="#css模块化" class="headerlink" title="css模块化"></a>css模块化</h3><p>当两个组件中有重名类名的话，可以通过为css文件命名<code>index.module.css</code>并且引入方式变为</p>
<p><code>import hello from &#39;./index.module.css&#39;</code>就可以使该css仅在当前组件适用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hello <span class="keyword">from</span> <span class="string">&#x27;./index.module.css&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&#123;hello.title&#125;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220808231600874.png" alt="image-20220808231600874"></p>
<h2 id="TodoList项目"><a href="#TodoList项目" class="headerlink" title="TodoList项目"></a>TodoList项目</h2><ol>
<li><p>拆分组件、实现静态组件，注意: <code>className、 style=&#123;&#123;&#125;&#125;</code>的写法</p>
</li>
<li><p>动态初始化列表，如何确定将数据放在哪个组件的state中?</p>
<ul>
<li><p>某个组件使用:放在自身的state中</p>
</li>
<li><p>某些组件使用:放在他们共同的父组件state中(官方称此操作为:状态提升)</p>
</li>
</ul>
</li>
<li><p>关于父子之问通信:</p>
</li>
<li><p>[父组件] 给 [子组件]传递数据:通过props传递</p>
</li>
<li><p>[子组件] 给 [父组件]传递数据:通过props传递，要求父提前给子传递一个函数</p>
</li>
<li><p>注意defaultChecked和checked的区别，类似的还有: defaultValue 和value</p>
</li>
<li><p>状态在哪里，操作状态的方法就在哪里</p>
</li>
</ol>
<h1 id="React-ajax"><a href="#React-ajax" class="headerlink" title="React_ajax"></a>React_ajax</h1><blockquote>
<p>使用axios发送ajax请求</p>
<p>安装 <code>yarn add axios</code></p>
<p>请求的url地址的端口为你代理服务器的端口，而且加上api来区分适用于下文第二种方法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getStudents=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/api1/students&#x27;</span>).<span class="title function_">then</span>(</span><br><span class="line">        <span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功&#x27;</span>,response.<span class="property">data</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败&#x27;</span>,error);</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">getCars=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/api2/cars&#x27;</span>).<span class="title function_">then</span>(</span><br><span class="line">        <span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功&#x27;</span>,response.<span class="property">data</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败&#x27;</span>,error);</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="React代理服务器"><a href="#React代理服务器" class="headerlink" title="React代理服务器"></a>React代理服务器</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><blockquote>
<p>在package.json中追加如下配置</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;proxy&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://localhost:5000&quot;</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ol>
<li>优点:配置简单,前端请求资源时可以不加任何前缀。</li>
<li>缺点:不能配置多个代理。</li>
<li>工作方式:上述方式配置代理，当请求了300不存在的资源时，那么该请求会转发给5000 (优先匹配前端资源)</li>
</ol>
<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><ol>
<li>第一步：创建代理配置文件</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">在src文件夹创建配置文件：src/setupProxy.<span class="property">js</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写<code>setupProxy.js</code>配置具体代理规则：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新版写法</span></span><br><span class="line"><span class="keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">&quot;http-proxy-middleware&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">app</span>)&#123;</span><br><span class="line">    app.<span class="title function_">use</span>(</span><br><span class="line">        <span class="title function_">createProxyMiddleware</span>(<span class="string">&#x27;/api1&#x27;</span>,&#123; <span class="comment">//遇见/api1前缀的请求，就会触发该代理配置</span></span><br><span class="line">            <span class="attr">target</span>:<span class="string">&#x27;http://localhost:5000&#x27;</span>,</span><br><span class="line">            <span class="comment">// 请求转发给谁</span></span><br><span class="line">            <span class="attr">changeOrigin</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 控制服务器收到的请求头中Host字段的值</span></span><br><span class="line">            <span class="attr">pathRewrite</span>:&#123;<span class="string">&#x27;^/api1&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">            <span class="comment">// 重写请求路径，将/api1去除</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="title function_">createProxyMiddleware</span>(<span class="string">&#x27;/api2&#x27;</span>,&#123;</span><br><span class="line">            <span class="attr">target</span>:<span class="string">&#x27;http://localhost:5001&#x27;</span>,</span><br><span class="line">            <span class="attr">changeOrigin</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="attr">pathRewrite</span>:&#123;<span class="string">&#x27;^/api2&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">        &#125;),</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="消息订阅与发布机制"><a href="#消息订阅与发布机制" class="headerlink" title="消息订阅与发布机制"></a>消息订阅与发布机制</h2><blockquote>
<ol>
<li>工具库: <code>PubSubJS</code></li>
<li>下载: <code>npm install pubsub-js --save</code></li>
<li>使用:<ol>
<li><code>import PubSub from &#39;pubsub-js&#39;</code>   <em>引入</em></li>
<li><code>PubSub.subscribe(&#39;delete&#39;,function(data)&#123;&#125;);</code>    <em>收数据的组件订阅消息</em></li>
<li><code>PubSub.publish(&#39;delete&#39;, data)</code>      <em>发数据的组件发布消息</em><ul>
<li><strong>data</strong>可以是对象</li>
</ul>
</li>
</ol>
</li>
</ol>
</blockquote>
<p><strong>收数据的组件</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// github用户搜索案例： </span></span><br><span class="line"><span class="comment">// 组件挂载完毕钩子</span></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">token</span> = <span class="title class_">PubSub</span>.<span class="title function_">subscribe</span>(<span class="string">&#x27;change&#x27;</span>,<span class="function">(<span class="params">msg,data</span>)=&gt;</span>&#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="title function_">setState</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 组件将要销毁钩子</span></span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">PubSub</span>.<span class="title function_">unsubscribe</span>(<span class="variable language_">this</span>.<span class="property">token</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><strong>发送数据的组件</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// github用户搜索案例： </span></span><br><span class="line">search=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 解构赋值的连续写法</span></span><br><span class="line">    <span class="comment">// keyWordElement是未被定义的</span></span><br><span class="line">    <span class="keyword">const</span> &#123;<span class="attr">keyWordElement</span>:&#123;value&#125;&#125;=<span class="variable language_">this</span></span><br><span class="line">    <span class="comment">// 发送请求前通知List更新状态</span></span><br><span class="line">    <span class="title class_">PubSub</span>.<span class="title function_">publish</span>(<span class="string">&#x27;change&#x27;</span>,&#123;<span class="attr">isFirst</span>:<span class="literal">false</span>,<span class="attr">isLoading</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">    <span class="comment">// 发送网络请求</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">`https://api.github.com/search/users?q=<span class="subst">$&#123;value&#125;</span>`</span>).<span class="title function_">then</span>(</span><br><span class="line">      <span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="title class_">PubSub</span>.<span class="title function_">publish</span>(<span class="string">&#x27;change&#x27;</span>,&#123;<span class="attr">isFirst</span>:<span class="literal">false</span>,<span class="attr">users</span>:res.<span class="property">data</span>.<span class="property">items</span>,<span class="attr">isLoading</span>:<span class="literal">false</span>&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败了&#x27;</span>);</span><br><span class="line">        <span class="title class_">PubSub</span>.<span class="title function_">publish</span>(<span class="string">&#x27;change&#x27;</span>,&#123;<span class="attr">isFirst</span>:<span class="literal">false</span>,<span class="attr">err</span>:error.<span class="property">message</span>&#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="Reack路由"><a href="#Reack路由" class="headerlink" title="Reack路由"></a>Reack路由</h1><h2 id="对SPA应用的理解"><a href="#对SPA应用的理解" class="headerlink" title="对SPA应用的理解"></a>对SPA应用的理解</h2><ol>
<li>单页 Web应用(single page web application, <strong>SPA</strong>) </li>
<li>整个应用只有一 个完整的页面。</li>
<li>点击页面中的导航链接不会刷新页面，只会做页面的局部更新。</li>
<li>数据需要通过 ajax请求获取</li>
</ol>
<h2 id="路由的理解"><a href="#路由的理解" class="headerlink" title="路由的理解"></a>路由的理解</h2><h3 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由?"></a>什么是路由?</h3><ol>
<li>一个路由就是一组映射关系(key - value) </li>
<li>key 为路径value可能是function或component</li>
</ol>
<h3 id="路由分类"><a href="#路由分类" class="headerlink" title="路由分类"></a>路由分类</h3><ol>
<li><p>后端路由:</p>
<ol>
<li>理解: value是function,用于处理客户端提交的请求</li>
<li>工作过程: 服务器接收到一个请求时,根据请求路径找到匹配的函数来处理请求返回响应数据。</li>
</ol>
</li>
<li><p>前端路由: </p>
<ol>
<li>理解: value是component,用于展示页面内容。</li>
<li>工作过程: 当浏览器的路径改变时,对应的组件就会显示。</li>
</ol>
</li>
</ol>
<h3 id="react-router-dom的理解。"><a href="#react-router-dom的理解。" class="headerlink" title="react-router-dom的理解。"></a>react-router-dom的理解。</h3><ol>
<li>react的一个插件库。</li>
<li>专门用来实现一个SPA应用。</li>
<li>基于react的项目基本都会用到此库。</li>
</ol>
<blockquote>
<p>原名应该是react-router，这里的dom是专门给web工作人员使用的</p>
</blockquote>
<p><a href="https://react-router.docschina.org/">中文文档</a></p>
<h2 id="路由基本使用"><a href="#路由基本使用" class="headerlink" title="路由基本使用"></a>路由基本使用</h2><h3 id="路由组件和一般组件"><a href="#路由组件和一般组件" class="headerlink" title="路由组件和一般组件"></a>路由组件和一般组件</h3><ol>
<li>写法不同：<ul>
<li>一般组件：<code>&lt;Demo&gt;</code></li>
<li>路由组件：<code>&lt;Router path=&quot;/demo&quot; component=&#123;Dome&#125;/&gt;</code></li>
</ul>
</li>
<li>存放位置不同：<ul>
<li>一般组件：<code>components</code></li>
<li>路由组件：<code>pages</code></li>
</ul>
</li>
<li>接收到的props不同<ul>
<li>一般组件：写组件标签时传递了什么，就能收到什么</li>
<li>路由组件：接收到三个固定属性</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">history</span>:</span><br><span class="line">	<span class="attr">go</span>:f <span class="title function_">go</span>(n)	</span><br><span class="line">	<span class="attr">goBack</span>:f <span class="title function_">goBack</span>()</span><br><span class="line">	<span class="attr">goForward</span>:f <span class="title function_">goForward</span>()</span><br><span class="line">	<span class="attr">push</span>:f <span class="title function_">pus</span>(path,state)</span><br><span class="line">	<span class="attr">replace</span>:f <span class="title function_">replace</span>(path,state)</span><br><span class="line"><span class="attr">location</span>:</span><br><span class="line">	<span class="attr">pathname</span>:<span class="string">&quot;/about&quot;</span></span><br><span class="line">	<span class="attr">serach</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="attr">state</span>:<span class="literal">undefined</span></span><br><span class="line"><span class="attr">match</span>:</span><br><span class="line">	<span class="attr">params</span>:&#123;&#125;</span><br><span class="line">	<span class="attr">path</span>:<span class="string">&quot;/about&quot;</span></span><br><span class="line">	<span class="attr">url</span>:<span class="string">&quot;/about&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Link-x2F-Route-x2F-BrowserRouter"><a href="#Link-x2F-Route-x2F-BrowserRouter" class="headerlink" title="Link&#x2F;Route&#x2F;BrowserRouter"></a>Link&#x2F;Route&#x2F;BrowserRouter</h3><ol>
<li>明确好界面中的导航区、展示区</li>
<li>导航区的a标签改为Link标签<ul>
<li><code>&lt;Link to=&quot;/xxx&quot; &gt;Demo&lt;/Link&gt;</code></li>
</ul>
</li>
<li>展示区写Route标签进行路径的匹配<ul>
<li><code>&lt;Route path=&#39;/xxx’component=&#123;Demo&#125;/&gt;</code></li>
</ul>
</li>
<li><code>&lt;App/&gt;</code>的最外侧包裹了一个<ul>
<li><code>&lt;BrowserRouter&gt;</code>或<code>&lt;/HashRouter&gt;</code></li>
</ul>
</li>
<li>路由组件放置在pages文件</li>
</ol>
<blockquote>
<p>这里的<code>BrowserRouter</code>是最常用的一种连接跳转，还有一种叫HashRouter</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">  &lt;div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-offset-2 col-xs-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>React Router Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;/* 原生heml中靠a跳转不同页面 */&#125;</span></span><br><span class="line"><span class="language-xml">              &#123;/* <span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item active&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./about.html&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./home.html&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">              &#123;/* 在react中靠路由链接实现切换组件-编写路由链接 */&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Link</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Link</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/* 注册路由 */&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p><strong>入口文件：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="NavLink"><a href="#NavLink" class="headerlink" title="NavLink"></a>NavLink</h3><p>要想实现点击某个tab，可以实现添加样式的效果，需要使用到<code>NavLink</code>这个标签替换<code>link</code>标签，并且使用<code>activeClassName=&#39;&#39;</code>指定添加的类名</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NavLink</span>,<span class="title class_">Route</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line">......</span><br><span class="line">&lt;div className=<span class="string">&quot;list-group&quot;</span>&gt;</span><br><span class="line">    &#123;<span class="comment">/* 原生heml中靠a跳转不同页面 */</span>&#125;</span><br><span class="line">    &#123;<span class="comment">/* &lt;a className=&quot;list-group-item active&quot; href=&quot;./about.html&quot;&gt;About&lt;/a&gt;</span></span><br><span class="line"><span class="comment">    &lt;a className=&quot;list-group-item&quot; href=&quot;./home.html&quot;&gt;Home&lt;/a&gt; */</span>&#125;</span><br><span class="line">    </span><br><span class="line">    &#123;<span class="comment">/* 在react中靠路由链接实现切换组件-编写路由链接 */</span>&#125;</span><br><span class="line">    </span><br><span class="line">    &lt;<span class="title class_">NavLink</span> activeClassName=<span class="string">&#x27;found&#x27;</span> className=<span class="string">&quot;list-group-item&quot;</span> to=<span class="string">&quot;/about&quot;</span>&gt;<span class="title class_">About</span>&lt;/<span class="title class_">NavLink</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">activeClassName</span>=<span class="string">&#x27;found&#x27;</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<h3 id="关于对NavLink的封装"><a href="#关于对NavLink的封装" class="headerlink" title="关于对NavLink的封装"></a>关于对<strong>NavLink</strong>的封装</h3><blockquote>
<p>上述代码中的NavLink的重复性过高，可以对其进行封装</p>
<p>将变化的属性通过props传递，这里有个扩展内容，标签体中的内容也可以通过props传递，它会自动将内容放到children这个属性中，通过<strong>this.props.children</strong>可以获取到标签体内容</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;<span class="title class_">MyNavLink</span> to=<span class="string">&#x27;/about&#x27;</span>&gt;<span class="title class_">About</span>&lt;/<span class="title class_">MyNavLink</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/home&#x27;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">... </span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">activeClassName</span>=<span class="string">&#x27;found&#x27;</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> &#123;<span class="attr">...this.props</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&#123;<span class="comment">/* 注册路由 */</span>&#125;</span><br><span class="line">      &lt;<span class="title class_">Route</span> path=<span class="string">&quot;/about&quot;</span> component=&#123;<span class="title class_">About</span>&#125;/&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Test&#125;/</span>&gt;</span></span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果Route中的path有重复的路径，他会匹配所有的匹配路径，从上往下依次寻找匹配的路径</p>
<p>如果想达到一对一的关系就可以使用Switch标签包裹,这时候就只会匹配最上面匹配的组件</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&#123;<span class="comment">/* 注册路由 */</span>&#125;</span><br><span class="line">&lt;<span class="title class_">Switch</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Test&#125;/</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Switch</span>&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="解决样式丢失"><a href="#解决样式丢失" class="headerlink" title="解决样式丢失"></a>解决样式丢失</h3><p><strong>1.路径引入</strong></p>
<p>在引入css样式的路径上不使用<code>.</code>而是使用<code>%PUBLIC_URL%</code>或者省略<code>.</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/css/bootstrap.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/css/bootstrap.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2.HashRouter标签</strong></p>
<p>使用<code>&lt;HashRouter&gt;&lt;/HashRouter&gt;</code>包裹就可以避免路径的改变造成样式丢失。但是会在url中加上一个#号，#后面的被称为hash(哈希)值，其不会被发送给服务器</p>
<h3 id="模糊匹配与精准匹配"><a href="#模糊匹配与精准匹配" class="headerlink" title="模糊匹配与精准匹配"></a>模糊匹配与精准匹配</h3><ol>
<li>默认使用的是模糊匹配(简单记:**[输入的路径]<strong>必须包含要</strong>[匹配的路径]**，且顺序要一致</li>
<li>开启严格匹配: <code>&lt;Route exact=&#123;true&#125; path=&quot;/about&quot; component=&#123;About&#125;/&gt;</code></li>
<li>严格匹配不要随便开启，需要再开，有些时候开启会导致无法继续匹配二级路由</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">...   </span><br><span class="line">	&lt;<span class="title class_">MyNavLink</span> to=<span class="string">&#x27;/about&#x27;</span>&gt;<span class="title class_">About</span>&lt;/<span class="title class_">MyNavLink</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/home&#x27;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line">...</span><br><span class="line">   &lt;<span class="title class_">Switch</span>&gt;</span><br><span class="line">	  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line">   &lt;/<span class="title class_">Switch</span>&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="Redirect的使用"><a href="#Redirect的使用" class="headerlink" title="Redirect的使用"></a>Redirect的使用</h3><ol>
<li>一般写在所有路由注册的最下方，当所有路由都无法匹配时，跳转到Redirect指定的路由</li>
<li>具休编码:</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;<span class="title class_">Switch</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>/&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Switch</span>&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>默认情况下，你的url地址端口号后面虽然什么也没跟，其实他是有一个隐藏的<code>/</code>这个<code>/</code>就会和<code>Route</code>中的路径进行匹配比较，但是呢又找不到所以会显示空。</p>
<p>有了<code>Redirect</code>这个内置标签，就可以让其默认匹配到<code>to=&quot;/about&quot;</code>相当于一个兜底的</p>
</blockquote>
<h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><ol>
<li>注册组路由时要加上父路由的path值</li>
<li>路由的匹配是按照注册路由的顺序进行的</li>
</ol>
<blockquote>
<p>├─components<br>│  ├─Header<br>│  ├─MyNavLink<br>│  └─Test<br>└─pages<br>    ├─About<br>    └─Home<br>        ├─Message<br>        └─News</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;nav nav-tabs&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&quot;/home/news&quot;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&quot;/home/message&quot;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/news&quot;</span> <span class="attr">component</span>=<span class="string">&#123;News&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/message&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Message&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/home/news&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="向路由组件传递参数"><a href="#向路由组件传递参数" class="headerlink" title="向路由组件传递参数"></a>向路由组件传递参数</h2><h3 id="1-params参数"><a href="#1-params参数" class="headerlink" title="1.params参数"></a>1.params参数</h3><ul>
<li>路由链接(携带参数)：<code>&lt;link to=&#39;/dome/test/tom/18&#39;&gt;详情&lt;/link&gt;</code></li>
<li>注册路由(声明接收)：<code>&lt;Route path=&quot;/demo/test/:name/:age&quot; components=&#123;Test&#125;/&gt;</code></li>
<li>接收参数：<code>const &#123;id,title&#125; = this.props.match.params</code></li>
</ul>
<blockquote>
<p>这种传递是将数据存放在url路径后面以<code>/</code>分割的方式，当然也有很多注意点，比如</p>
<ul>
<li>声明接收的标签要使用<code>/:id/:title</code>进行占位和express的那种有点相像</li>
</ul>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;<span class="comment">/* 声明接收params */</span>&#125;</span><br><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/home/message/detail/:id/:title&quot;</span> component=&#123;<span class="title class_">Detail</span>&#125;/&gt;</span><br></pre></td></tr></table></figure>

<p>接收数据的组件<code>this.props</code>上存放如下：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220813161825095.png" alt="image-20220813161825095"></p>
<h3 id="2-search参数"><a href="#2-search参数" class="headerlink" title="2.search参数"></a>2.search参数</h3><ol>
<li>路由链接(携带参数): <code>&lt;Link to=&#39;/demo/test?name=tom&amp;age=18&#39;&#125;&gt;详情&lt;/Link&gt;</code></li>
<li>注册路由(无需声明，正常注册即可): <code>&lt;Route path=&quot;/demo/test&quot; component=&#123;Test&#125;/&gt;</code></li>
<li>接收参数: <code>const &#123;search&#125; = this.props.1ocation</code></li>
<li>备注:获取到的<code>search</code>是<code>ur1encoded</code>编码字符串，需要借助<code>querystring</code>解析</li>
</ol>
<p><strong>传递部分：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;<span class="comment">/* 向路由组件传递search参数 */</span>&#125;</span><br><span class="line">&lt;<span class="title class_">Link</span> to=&#123;<span class="string">`/home/message/detail/?id=<span class="subst">$&#123;msgObj.id&#125;</span>&amp;title=<span class="subst">$&#123;msgObj.title&#125;</span>`</span>&#125;&gt;&#123;msgObj.<span class="property">title</span>&#125;&lt;/<span class="title class_">Link</span>&gt;</span><br><span class="line">......</span><br><span class="line">&#123;<span class="comment">/* 声明接收search参数 无需接收 */</span>&#125;</span><br><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/home/message/detail&quot;</span> component=&#123;<span class="title class_">Detail</span>&#125;/&gt;</span><br></pre></td></tr></table></figure>

<p><strong>接收部分：</strong></p>
<p>因为search接受的参数没有像params那样自动转换为对象，这里我们使用一个插件解决</p>
<ol>
<li>安装<code>yarn add query-string</code></li>
<li>引入<code>import qs from &#39;query-string&#39;</code></li>
<li>使用<code>qs.parse(值)</code>   <em>这里面的值指的是  q&#x3D;1&amp;a&#x3D;2  这种</em></li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//   接收search参数</span></span><br><span class="line"><span class="keyword">const</span> &#123;search&#125; = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">location</span>;</span><br><span class="line"><span class="keyword">const</span> &#123;id,title&#125; = qs.<span class="title function_">parse</span>(search.<span class="title function_">slice</span>(<span class="number">1</span>)) <span class="comment">//search传递的还有？所以要截取字符串</span></span><br></pre></td></tr></table></figure>

<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220813165302226.png"></p>
<h3 id="3-state参数"><a href="#3-state参数" class="headerlink" title="3.state参数"></a>3.state参数</h3><ul>
<li>路由链接(携带参数): <code>&lt;Link to=&#123;&#123;path: '/demo/test',state:&#123;name:'tom',age:18&#125;&#125;&gt;详情&lt;/Link&gt;</code></li>
<li>注册路由(无需声明，正常注册即可): <code>&lt;Route path=&quot;/demo/test&quot; component=&#123;Test&#125;/&gt;</code></li>
<li>接收参数: <code>this.props.1ocation.state</code></li>
<li>备注:刷新也可以保留住参数</li>
</ul>
<p><strong>传递部分：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;<span class="comment">/* 向路由组件传递state参数 */</span>&#125;</span><br><span class="line">&lt;<span class="title class_">Link</span> to=&#123;&#123;<span class="attr">pathname</span>:<span class="string">&#x27;/home/message/detail&#x27;</span>,<span class="attr">state</span>:&#123;<span class="attr">id</span>:msgObj.<span class="property">id</span>,<span class="attr">title</span>:msgObj.<span class="property">title</span>&#125;&#125;&#125;&gt;&#123;msgObj.<span class="property">title</span>&#125;&lt;/<span class="title class_">Link</span>&gt;</span><br><span class="line">......</span><br><span class="line">&#123;<span class="comment">/* 声明接收state参数 无需接收 */</span>&#125;</span><br><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/home/message/detail&quot;</span> component=&#123;<span class="title class_">Detail</span>&#125;/&gt;</span><br></pre></td></tr></table></figure>

<p><strong>接收部分：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//   3.接收state参数</span></span><br><span class="line"><span class="comment">// console.log(this.props);</span></span><br><span class="line"><span class="keyword">const</span> &#123;id,title&#125; = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">location</span>.<span class="property">state</span> || &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220813171403454.png" alt="image-20220813171403454"></p>
<h2 id="push与replace模式"><a href="#push与replace模式" class="headerlink" title="push与replace模式"></a>push与replace模式</h2><blockquote>
<p>首先先了解一下浏览器历史记录执行原理。浏览器的历史记录执行是以栈的形式，这个栈中存放着你的历史记录，默认是push模式，比如你点击了a连接跳转页面，这个行为就会被push到栈中，堆叠起来。</p>
<p>当模式变成replace模式，那么你点击的行为就会替换栈中的最上方的历史记录。</p>
</blockquote>
<p><strong>切换方式</strong></p>
<ul>
<li><code>replace=&#123;true&#125;</code></li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;<span class="comment">/* 向路由组件传递state参数 */</span>&#125;</span><br><span class="line">&lt;<span class="title class_">Link</span> replace=&#123;<span class="literal">true</span>&#125; to=&#123;&#123;<span class="attr">pathname</span>:<span class="string">&#x27;/home/message/detail&#x27;</span>,<span class="attr">state</span>:&#123;<span class="attr">id</span>:msgObj.<span class="property">id</span>,<span class="attr">title</span>:msgObj.<span class="property">title</span>&#125;&#125;&#125;&gt;&#123;msgObj.<span class="property">title</span>&#125;&lt;/<span class="title class_">Link</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h2><p>借助<strong>this.prosp.history</strong>对象上的API对操作路由跳转、前进、后退</p>
<ul>
<li>this.prosp.history.push(  )</li>
<li>this.prosp.history.replace(  )</li>
<li>this.prosp.history.goBack(  )</li>
<li>this.prosp.history.goForward(  )</li>
<li>this.prosp.history.go(  )</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> ...</span><br><span class="line"> </span><br><span class="line">replaceShow=<span class="function">(<span class="params">id,title</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 编写一段代码，让其实现跳转到Detail组件，且为replace跳转</span></span><br><span class="line">    <span class="comment">// replace跳转+携带params参数</span></span><br><span class="line">    <span class="comment">// this.props.history.replace(`/home/message/detail/$&#123;id&#125;/$&#123;title&#125;`);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// replace跳转+携带search参数</span></span><br><span class="line">    <span class="comment">// this.props.history.replace(`/home/message/detail?id=$&#123;id&#125;&amp;title=$&#123;title&#125;`);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// replace跳转+携带state参数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">replace</span>(<span class="string">`/home/message/detail`</span>,&#123;id,title&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  pushShow=<span class="function">(<span class="params">id,title</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// push跳转+携带params参数</span></span><br><span class="line">    <span class="comment">// this.props.history.push(`/home/message/detail/$&#123;id&#125;/$&#123;title&#125;`);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// push跳转+携带search参数</span></span><br><span class="line">    <span class="comment">// this.props.history.push(`/home/message/detail?id=$&#123;id&#125;&amp;title=$&#123;title&#125;`);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// replace跳转+携带state参数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">push</span>(<span class="string">`/home/message/detail`</span>,&#123;id,title&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  back=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">goBack</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  forword=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">goForward</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  go=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">go</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="withRouter的使用"><a href="#withRouter的使用" class="headerlink" title="withRouter的使用"></a>withRouter的使用</h2><ol>
<li>withRouter可以加工一般组件，让一般组件具备路由组件所特有的API</li>
<li>withRouter的返回值是一个新的组件</li>
</ol>
<blockquote>
<p>这部分的代码其实是一个一般组件，一般组件不具备路由组件身上的方法，所以可以通过react自带的<code>withRouter</code>来实现转换。</p>
<p>在暴露这个组件的时候使用<code>export default withRouter(Header)</code>将一般组件转换为路由组件</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;withRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Header</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  back=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">goBack</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  forword=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">goForward</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  go=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">go</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.back&#125;</span>&gt;</span>回退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.forword&#125;</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.go&#125;</span>&gt;</span>GO<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">withRouter</span>(<span class="title class_">Header</span>)</span><br></pre></td></tr></table></figure>

<h2 id="BrowserRouter与HashRouter的区别"><a href="#BrowserRouter与HashRouter的区别" class="headerlink" title="BrowserRouter与HashRouter的区别"></a>BrowserRouter与HashRouter的区别</h2><ol>
<li>底层原理不一-样:<br> BrowserRouter使用的是H5的history API，不兼容IE9及以下版本。<br> HashRouter使用的是URL的哈希值。</li>
<li>url表现形式不一样<br> BrowserRouter的路径中没有#,例如: localhost: 3000&#x2F;demo&#x2F;test<br> HashRouter的路径包含#,例如: localhost: 3000&#x2F;#&#x2F;demo&#x2F;test</li>
<li>刷新后对路由state参数的影响<br> (1) BrowserRouter没有任何影响，因为state 保存在history对象中。<br> (2) HashRouter刷新后会导致路由state参数的丢失</li>
<li>备注: HashRouter 可以用于解决一些路径错误相关的问题。</li>
</ol>
<h1 id="React-UI组件库"><a href="#React-UI组件库" class="headerlink" title="React UI组件库"></a>React UI组件库</h1><h2 id="流行的开源React-UI组件库"><a href="#流行的开源React-UI组件库" class="headerlink" title="流行的开源React UI组件库"></a>流行的开源React UI组件库</h2><h3 id="material-ui-国外"><a href="#material-ui-国外" class="headerlink" title="material-ui(国外)"></a>material-ui(国外)</h3><ol>
<li>官网: <a href="http://www.material-ui.com/#/">链接</a></li>
<li>github: <a href="https://github.com/callemall/material-ui">链接</a></li>
</ol>
<h3 id="ant-design-国内蚂蚁金服"><a href="#ant-design-国内蚂蚁金服" class="headerlink" title="ant-design(国内蚂蚁金服)"></a>ant-design(国内蚂蚁金服)</h3><ol>
<li>官网: <a href="https://ant-design.gitee.io/index-cn">链接</a></li>
<li>Github: <a href="https://github.com/ant-design/ant-design/">链接</a></li>
</ol>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><blockquote>
<p>这里以ant为例</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 引入你想使用的组件</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Button</span>,<span class="title class_">DatePicker</span>,<span class="title class_">ConfigProvider</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="comment">// 引入官方样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;antd/dist/antd.css&#x27;</span></span><br><span class="line"><span class="comment">// 引入语言包 官方默认英文</span></span><br><span class="line"><span class="keyword">import</span> zhCN <span class="keyword">from</span> <span class="string">&#x27;antd/es/locale/zh_CN&#x27;</span>;</span><br><span class="line"><span class="comment">// 引入你想使用的icon图标组件</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">GithubOutlined</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/icons&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="comment">// 根据官方api配置方法</span></span><br><span class="line">  onChange = <span class="function">(<span class="params">date, dateString</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(date, dateString);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Primary Button<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">GithubOutlined</span> <span class="attr">style</span>=<span class="string">&#123;&#123;fontSize:</span>&#x27;<span class="attr">50px</span>&#x27;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ConfigProvider</span> <span class="attr">locale</span>=<span class="string">&#123;zhCN&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">DatePicker</span> <span class="attr">onChange</span>=<span class="string">&#123;this.onChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ConfigProvider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220813204318901.png" alt="image-20220813204318901"></p>
<h1 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h1><h2 id="redux理解"><a href="#redux理解" class="headerlink" title="redux理解"></a>redux理解</h2><h3 id="学习文档。"><a href="#学习文档。" class="headerlink" title="学习文档。"></a>学习文档。</h3><ol>
<li>英文文档: <a href="https://redux.js.org/">https://redux.js.org/</a></li>
<li>中文文档: <a href="http://www.redux.org.cn/">http://www.redux.org.cn/</a></li>
<li>Github: <a href="https://github.com/reactjs/redux">https://github.com/reactjs/redux</a></li>
</ol>
<h3 id="redux是什么"><a href="#redux是什么" class="headerlink" title="redux是什么"></a>redux是什么</h3><ol>
<li>redux是一个专门用于做状态管理的IS库(不是react插件库)</li>
<li>它可以用在 react, angular, vue等项目中,但基本与react配合使用.</li>
<li>作用: 集中式管理react应用中多个组件共享的状态</li>
</ol>
<h3 id="什么情况下需要使用redux"><a href="#什么情况下需要使用redux" class="headerlink" title="什么情况下需要使用redux"></a>什么情况下需要使用redux</h3><ol>
<li>某个组件的状态， 需要让其他组件可以随时拿到(共享)。</li>
<li>一个组件需要改变另-个组件的状态(通信) 。</li>
<li>总体原则: 能不用就不用，如果不用比较吃力才考虑使用。</li>
</ol>
<h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220813215624467.png" alt="image-20220813215624467"></p>
<h2 id="redux的三个核心概念"><a href="#redux的三个核心概念" class="headerlink" title="redux的三个核心概念"></a>redux的三个核心概念</h2><h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><ol>
<li>动作的对象</li>
<li>包含2个属性<ul>
<li>type：标识属性，值为字符串，唯一，必要属性</li>
<li>data：数据属性，值类型任意，可选属性</li>
</ul>
</li>
<li>例子：{type:’ADD_STUDENT’,data:{name:’tom’,age:18}}</li>
</ol>
<h3 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h3><ol>
<li>用于初始化状态，加工状态</li>
<li>加工时，根据旧的state和action，产生新的state的纯函数</li>
</ol>
<h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><ol>
<li>将state，action，reducer联系在一起的对象</li>
<li>如何得到此对象？<ol>
<li><code>import &#123;createStore&#125; from &#39;redux&#39;</code></li>
<li><code>import reducer from &#39;./reducers&#39;</code></li>
<li><code>const store = createStore(reducer)</code></li>
</ol>
</li>
<li>此对象的功能?</li>
<li><code>getState()</code>: 得到state</li>
<li><code>dispatch(action)</code>: 分发action,触发reducer调用，产生新的state</li>
<li><code>subscribe(listener)</code>: 注册监听,当产生了新的state时，自动调用</li>
</ol>
<h2 id="安装redux"><a href="#安装redux" class="headerlink" title="安装redux"></a>安装redux</h2><p>安装：<code>yarn add redux</code>   或者   <code>npm i redux</code></p>
<h2 id="redux使用"><a href="#redux使用" class="headerlink" title="redux使用"></a>redux使用</h2><h3 id="迷你版redux"><a href="#迷你版redux" class="headerlink" title="迷你版redux"></a>迷你版redux</h3><p><strong>新建文件redux&#x2F;store.js</strong></p>
<ol>
<li>该文件专门用于暴露一个store对象，整个应用只有一个store对象</li>
<li>引入createStore专门用于创建redux中最为核心的store对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 旧版：import &#123;createStore&#125; from &#x27;redux&#x27;</span></span><br><span class="line"><span class="comment">// 现在要这样写</span></span><br><span class="line"><span class="keyword">import</span> &#123; legacy_createStore <span class="keyword">as</span> createStore &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入为Count组件服务的reducer</span></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&#x27;./count_reducer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(countReducer);</span><br></pre></td></tr></table></figure>

<p><strong>新建文件redux&#x2F;count_reducer.js</strong></p>
<ol>
<li>该组件用于创建一个为Count组件服务的reducer。reducer的本质就是一个函数</li>
<li>reducer函数会接到连个参数分别是：<ol>
<li>之前的状态（preState）</li>
<li>动作对象（action）</li>
</ol>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组件初始化状态为0</span></span><br><span class="line"><span class="keyword">const</span> initState = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">countReducer</span>(<span class="params">preState = initState,action</span>) &#123;</span><br><span class="line">    <span class="comment">// 从action对象中获取：type，data</span></span><br><span class="line">    <span class="keyword">const</span> &#123;type,data&#125; = action;</span><br><span class="line">    <span class="comment">// 根据type决定如何加工数据</span></span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;increment&#x27;</span>: <span class="comment">//如果是加</span></span><br><span class="line">            <span class="keyword">return</span> preState + data;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;decrement&#x27;</span>: <span class="comment">//如果是减</span></span><br><span class="line">            <span class="keyword">return</span> preState - data;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> preState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>组件文件中</strong></p>
<p>初始化的状态并没有存放在该组件，那么组件该如何调用初始状态</p>
<ul>
<li>使用<code>store.getState()</code>: 可以获取初始化状态</li>
<li>使用<code>store.dispatch(action)</code>: 分发action,触发reducer调用，产生新的state<ul>
<li>action是一个对象{type:’increment’,data:value*1}<ul>
<li>type：用于匹配count_reducer.js中的数据处理</li>
<li>data：上方文件中<em>action</em>这个对象的属性(其实就是传值)</li>
</ul>
</li>
</ul>
</li>
<li>使用<code>store.subscribe(()=&gt;&#123;&#125;)</code>: 监测redux中状态的变化<ul>
<li>当redux中状态发生变化就会触发其中的函数</li>
<li>使用<code>this.setState(&#123;&#125;)</code>更新数据即可改变页面</li>
<li>进阶版：在index.js入口文件中监测:<ul>
<li><code>store.subscribe(()=&gt;&#123;root.render(&lt;App/&gt;)&#125;)</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 引入store 获取redux中的状态</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../../redux/store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    state=&#123;</span><br><span class="line">        <span class="attr">carName</span>:<span class="string">&#x27;组件自己用的数据(不用在意)&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 组件挂载完毕的钩子</span></span><br><span class="line">    <span class="comment">// componentDidMount()&#123;</span></span><br><span class="line">    <span class="comment">//     // 监测redux中状态的变化只要变化就调用render</span></span><br><span class="line">    <span class="comment">//     store.subscribe(()=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//         this.setState(&#123;&#125;)</span></span><br><span class="line">    <span class="comment">//     &#125;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加</span></span><br><span class="line">    increment = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; =<span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">        <span class="comment">// const &#123;count&#125; =this.state</span></span><br><span class="line">        <span class="comment">// this.setState(&#123;count:count + value*1&#125;)</span></span><br><span class="line">        <span class="comment">// 通知redux加value</span></span><br><span class="line">        store.<span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>:<span class="string">&#x27;increment&#x27;</span>,<span class="attr">data</span>:value*<span class="number">1</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 减</span></span><br><span class="line">    decrement = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; =<span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">        <span class="comment">// const &#123;count&#125; =this.state</span></span><br><span class="line">        store.<span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>:<span class="string">&#x27;decrement&#x27;</span>,<span class="attr">data</span>:value*<span class="number">1</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 奇数加</span></span><br><span class="line">    incrementIfOdd = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; =<span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">        <span class="keyword">const</span> count =store.<span class="title function_">getState</span>()</span><br><span class="line">        <span class="keyword">if</span> (count % <span class="number">2</span>!== <span class="number">0</span>) &#123;</span><br><span class="line">            store.<span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>:<span class="string">&#x27;increment&#x27;</span>,<span class="attr">data</span>:value*<span class="number">1</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 异步加</span></span><br><span class="line">    incrementAsync = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; =<span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">        <span class="comment">// const &#123;count&#125; =this.state</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            store.<span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>:<span class="string">&#x27;increment&#x27;</span>,<span class="attr">data</span>:value*<span class="number">1</span>&#125;)</span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和：&#123;store.getState()&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span>=&gt;</span>this.selectNumber=c&#125;&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.decrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementIfOdd&#125;</span>&gt;</span>当前求和为奇数再+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>异步+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="完整版redux"><a href="#完整版redux" class="headerlink" title="完整版redux"></a>完整版redux</h3><ol>
<li>新增两个文件：<ol>
<li>count_action.js专门用于创建action对象</li>
<li>constant.js  放置用于编码疏忽写错action中的type</li>
</ol>
</li>
</ol>
<p><strong>count_action.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该文件专门为Count组件生成action对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">INCREMENT</span>,<span class="variable constant_">DECREMENT</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./constant&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createIncrementAction</span>=(<span class="params">data</span>)=&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">type</span>:<span class="variable constant_">INCREMENT</span>,data&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createDecrementAction</span>=(<span class="params">data</span>)=&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">type</span>:<span class="variable constant_">DECREMENT</span>,data&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>constant.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该模块用于定义action对象中type类型的常量值</span></span><br><span class="line"><span class="comment">// 用于管理的同时防止程序员写错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">INCREMENT</span> = <span class="string">&#x27;increment&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">DECREMENT</span> = <span class="string">&#x27;decrement&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="异步action"><a href="#异步action" class="headerlink" title="异步action"></a>异步action</h3><ol>
<li><p>明确:延迟的动作不想交给组件自身，想交给action</p>
</li>
<li><p>何时需要异步action:想要对状态进行操作，但是具体的数据靠异步任务返回(非必须)</p>
</li>
<li><p>具体编码:</p>
<ol>
<li><code>yarn add redux-thunk</code>, 并配置在store中</li>
<li>创建action的函数不再返回一般对象， 而是一个函数， 该函数中写异步任务。</li>
<li>异步任务有结果后，分发一个同步的action去真正操作数据。</li>
</ol>
</li>
<li><p>备注:异步action不是必须要写的，完全可以自己等待异步任务的结果了再去分发同步action.</p>
</li>
</ol>
<p><strong>count_action.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该文件专门为Count组件生成action对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">INCREMENT</span>,<span class="variable constant_">DECREMENT</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./constant&#x27;</span></span><br><span class="line"><span class="comment">// import store from &#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所谓的异步action就是指action的值为Object类型的一般对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createIncrementAction</span>=(<span class="params">data</span>)=&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">type</span>:<span class="variable constant_">INCREMENT</span>,data&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createDecrementAction</span>=(<span class="params">data</span>)=&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">type</span>:<span class="variable constant_">DECREMENT</span>,data&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所谓的异步action就是指action的值为函数</span></span><br><span class="line"><span class="comment">// 异步action中一般都会调用同步action，异步action不是必须要用的</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createIncrementAsyncAction</span>=(<span class="params">data,time</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(data))</span><br><span class="line">        &#125;,time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>store.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该文件专门用于暴露一个store对象，整个应用只有一个store对象</span></span><br><span class="line"><span class="comment">// 引入createStore专门用于创建redux中最为核心的store对象</span></span><br><span class="line"><span class="comment">// 旧版：import &#123;createStore&#125; from &#x27;redux&#x27;</span></span><br><span class="line"><span class="comment">// 现在要这样写</span></span><br><span class="line"><span class="keyword">import</span> &#123; legacy_createStore <span class="keyword">as</span> createStore,applyMiddleware &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;<span class="comment">//----</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入redux-thunk，用于支持异步action-----------</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入为Count组件服务的reducer</span></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&#x27;./count_reducer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(countReducer,<span class="title function_">applyMiddleware</span>(thunk));<span class="comment">//------</span></span><br></pre></td></tr></table></figure>

<h2 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h2><h3 id="模型图："><a href="#模型图：" class="headerlink" title="模型图："></a>模型图：</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220814162257196.png" alt="image-20220814162257196"></p>
<h3 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h3><p>这个比较难理解，首先呢，App组件中存放的不再是原本的CountUI组件，而是被Count包裹的容器组件，但这个容器组件不是人为制作的，只通过第三方包<code>yarn add react-redux</code>生成的，上代码：</p>
<p><strong>新建coutainers文件夹,存放Count组件</strong></p>
<blockquote>
<p>其实就是app组件中的Count不再是components文件中的UI组件Count，而是经过包装的containers文件下的Count容器组件</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个容器组件</span></span><br><span class="line"><span class="comment">// 引入Count的UI组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CountUI</span> <span class="keyword">from</span> <span class="string">&#x27;../../components/Count&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    createIncrementAction,</span><br><span class="line">    createDecrementAction,</span><br><span class="line">    createIncrementAsyncAction</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;../../redux/count_action&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入connect用于连接UI组件与redux</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. mapStateToProps函数返回的是一个对象:</span></span><br><span class="line"><span class="comment">// 2. 返回的对象中的key就作为传递给UI组件props的key, value就作为传递给UI组件props的value</span></span><br><span class="line"><span class="comment">// 3. mapStateToProps用于传递状态</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">state</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">count</span>:state&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. mapDispatchToProps函数返回的是一个对象;</span></span><br><span class="line"><span class="comment">// 2. 返回的对象中的key就作为传递给UI组件props的key, value就作为传递给UI组件props的value</span></span><br><span class="line"><span class="comment">// 3. mapDispatchToProps用于传递操作状态的方法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapDispatchToProps</span> = (<span class="params">dispatch</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">add</span>:<span class="function">(<span class="params">number</span>)=&gt;</span>&#123;</span><br><span class="line">           <span class="comment">// 通知redux执行加法</span></span><br><span class="line">           <span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(number))</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">jian</span>:<span class="function">(<span class="params">number</span>)=&gt;</span>&#123;</span><br><span class="line">           <span class="title function_">dispatch</span>(<span class="title function_">createDecrementAction</span>(number))</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">addAsync</span>:<span class="function">(<span class="params">number,time</span>)=&gt;</span>&#123;</span><br><span class="line">           <span class="title function_">dispatch</span>(<span class="title function_">createIncrementAsyncAction</span>(number,time))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用connect()()创建并暴露一个Count的容器组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps,mapDispatchToProps)(<span class="title class_">CountUI</span>);</span><br></pre></td></tr></table></figure>

<p>但是UI组件该如何拿到初始数据呢？，可以看图，容器组件和UI组件间通过props传递数据，但是我们又没法通过常规手法传递，但同时官方提供了方法：</p>
<ol>
<li>首先容器组件要获得store<ul>
<li>以下代码就可以使得容器组件获得store，那么容器组件中的UI组件不就可以获取到store了吗。（但其实状态是在<code>count_reducer</code>中的）</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Count</span> <span class="keyword">from</span> <span class="string">&#x27;./containers/Count&#x27;</span></span><br><span class="line"><span class="comment">// 引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./redux/store&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 给容器组件传递store */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Count</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>官方提供的容器组件与UI组件通信的方式<ol>
<li><code>connect(mapStateToProps,mapDispatchToProps)(CountUI);</code></li>
</ol>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. mapStateToProps函数返回的是一个对象:</span></span><br><span class="line"><span class="comment">// 2. 返回的对象中的key就作为传递给UI组件props的key, value就作为传递给UI组件props的value</span></span><br><span class="line"><span class="comment">// 3. mapStateToProps用于传递状态</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">state</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">count</span>:state&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. mapDispatchToProps函数返回的是一个对象;</span></span><br><span class="line"><span class="comment">// 2. 返回的对象中的key就作为传递给UI组件props的key, value就作为传递给UI组件props的value</span></span><br><span class="line"><span class="comment">// 3. mapDispatchToProps用于传递操作状态的方法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapDispatchToProps</span> = (<span class="params">dispatch</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">add</span>:<span class="function">(<span class="params">number</span>)=&gt;</span>&#123;</span><br><span class="line">           <span class="comment">// 通知redux执行加法</span></span><br><span class="line">           <span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(number))</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">jian</span>:<span class="function">(<span class="params">number</span>)=&gt;</span>&#123;</span><br><span class="line">           <span class="title function_">dispatch</span>(<span class="title function_">createDecrementAction</span>(number))</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">addAsync</span>:<span class="function">(<span class="params">number,time</span>)=&gt;</span>&#123;</span><br><span class="line">           <span class="title function_">dispatch</span>(<span class="title function_">createIncrementAsyncAction</span>(number,time))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里面不用store点调用也不用引入是因为已经通过App组件引入过了</p>
</blockquote>
<ol start="3">
<li>UI组件要想使用这些方法可是直接在<code>this.props中找到</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加</span></span><br><span class="line">increment = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;value&#125; =<span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">add</span>(value*<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 减</span></span><br><span class="line">decrement = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;value&#125; =<span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">jian</span>(value*<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 奇数加</span></span><br><span class="line">incrementIfOdd = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;value&#125; =<span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">count</span>%<span class="number">2</span>!==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">add</span>(value*<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 异步加</span></span><br><span class="line">incrementAsync = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;value&#125; =<span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">addAsync</span>(value*<span class="number">1</span>,<span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然值也在props中</span></span><br><span class="line">&lt;h1&gt;当前求和：&#123;<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">count</span>&#125;&lt;/h1&gt;&amp;nbsp;</span><br></pre></td></tr></table></figure>

<p><strong>coutainers文件夹中Count容器组件精简写法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个容器组件</span></span><br><span class="line"><span class="comment">// 引入Count的UI组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CountUI</span> <span class="keyword">from</span> <span class="string">&#x27;../../components/Count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    createIncrementAction,</span><br><span class="line">    createDecrementAction,</span><br><span class="line">    createIncrementAsyncAction</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;../../redux/count_action&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="comment">// 使用connect()()创建并暴露一个Count的容器组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(</span><br><span class="line">    <span class="function"><span class="params">state</span>=&gt;</span>(&#123;<span class="attr">count</span>:state&#125;),</span><br><span class="line">    <span class="comment">// mapDispatchToProps一般写法</span></span><br><span class="line">    <span class="comment">// dispatch=&gt;(&#123;</span></span><br><span class="line">    <span class="comment">//     add:(number)=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//         // 通知redux执行加法</span></span><br><span class="line">    <span class="comment">//         dispatch(createIncrementAction(number))</span></span><br><span class="line">    <span class="comment">//         &#125;,</span></span><br><span class="line">    <span class="comment">//     jian:(number)=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//         dispatch(createDecrementAction(number))</span></span><br><span class="line">    <span class="comment">//         &#125;,</span></span><br><span class="line">    <span class="comment">//     addAsync:(number,time)=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//         dispatch(createIncrementAsyncAction(number,time))</span></span><br><span class="line">    <span class="comment">//     &#125;  </span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// mapDispatchToProps 对象形式精简写法</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">add</span>:createIncrementAction,</span><br><span class="line">        <span class="attr">jian</span>:createDecrementAction,</span><br><span class="line">        <span class="attr">addAsync</span>:createIncrementAsyncAction</span><br><span class="line">    &#125;</span><br><span class="line">)(<span class="title class_">CountUI</span>);</span><br></pre></td></tr></table></figure>

<h4 id="优化："><a href="#优化：" class="headerlink" title="优化："></a>优化：</h4><h5 id="1-不再监测"><a href="#1-不再监测" class="headerlink" title="1.不再监测"></a>1.不再监测</h5><p>在redux中还需要在入口文件中监测状态的变化改变页面，但是react-redux中就不需要这样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 直接在入口文件监听，当产生了新的state时，自动调用</span></span><br><span class="line"><span class="comment">// 监测redux中状态的改变，如果redux的状态发生了改变，那么重新渲染App组件</span></span><br><span class="line">store.<span class="title function_">subscribe</span>(<span class="function">()=&gt;</span>&#123;root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h5 id="2-多个容器组件传递store"><a href="#2-多个容器组件传递store" class="headerlink" title="2.多个容器组件传递store"></a>2.多个容器组件传递store</h5><p>实例是一个容器组件，但是当容器组件多了，就需要一个一个传递，非常不银杏。react-redux提供了一个内置方法解决：</p>
<ul>
<li>引入<code>store</code></li>
<li>引入<code>react-redux</code>中的<code>Provider</code></li>
<li>使用<code>Provider</code>包裹App组件<ul>
<li>这样就会自动监测App组件中的容器组件并向其传递store</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入react核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 引入ReactDOM渲染页面</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入App组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./redux/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Provider</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染app到页面</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line"></span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span>   </span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h5 id="3-文件优化"><a href="#3-文件优化" class="headerlink" title="3.文件优化"></a>3.文件优化</h5><p>上文中的写法过于臃肿，容器组件和UI组件分开写，为何不整合成一个文件？</p>
<p>可以剪切走UI组件的代码，到容器组件中，不需要分开引入</p>
<p><strong>containers&#x2F;Count&#x2F;index.jsx</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个容器组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    createIncrementAction,</span><br><span class="line">    createDecrementAction,</span><br><span class="line">    createIncrementAsyncAction</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;../../redux/count_action&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="comment">// 使用connect()()创建并暴露一个Count的容器组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义UI组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    state=&#123;</span><br><span class="line">        <span class="attr">carName</span>:<span class="string">&#x27;组件自己用的数据(不用在意)&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加</span></span><br><span class="line">    increment = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; =<span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">add</span>(value*<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 减</span></span><br><span class="line">    decrement = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; =<span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">jian</span>(value*<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 奇数加</span></span><br><span class="line">    incrementIfOdd = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; =<span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">count</span>%<span class="number">2</span>!==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">add</span>(value*<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 异步加</span></span><br><span class="line">    incrementAsync = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; =<span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">addAsync</span>(value*<span class="number">1</span>,<span class="number">500</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和：&#123;this.props.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span>=&gt;</span>this.selectNumber=c&#125;&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.decrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementIfOdd&#125;</span>&gt;</span>当前求和为奇数再+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>异步+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用connect()()创建并暴露-个Count的容器组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(</span><br><span class="line">    <span class="function"><span class="params">state</span>=&gt;</span>(&#123;<span class="attr">count</span>:state&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// mapDispatchToProps一般写法</span></span><br><span class="line">    <span class="comment">// dispatch=&gt;(&#123;</span></span><br><span class="line">    <span class="comment">//     add:(number)=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//         // 通知redux执行加法</span></span><br><span class="line">    <span class="comment">//         dispatch(createIncrementAction(number))</span></span><br><span class="line">    <span class="comment">//         &#125;,</span></span><br><span class="line">    <span class="comment">//     jian:(number)=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//         dispatch(createDecrementAction(number))</span></span><br><span class="line">    <span class="comment">//         &#125;,</span></span><br><span class="line">    <span class="comment">//     addAsync:(number,time)=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//         dispatch(createIncrementAsyncAction(number,time))</span></span><br><span class="line">    <span class="comment">//     &#125;  </span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// mapDispatchToProps精简写法</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">add</span>:createIncrementAction,</span><br><span class="line">        <span class="attr">jian</span>:createDecrementAction,</span><br><span class="line">        <span class="attr">addAsync</span>:createIncrementAsyncAction</span><br><span class="line">    &#125;</span><br><span class="line">)(<span class="title class_">Count</span>);</span><br></pre></td></tr></table></figure>

<h4 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h4><ol>
<li><p>明确两个概念:</p>
<ul>
<li>UI组件:不能使用任何redux的api,只负责页面的呈现、交互等。</li>
<li>容器组件:负责和redux通信，将结果交给UI组件。</li>
</ul>
</li>
<li><p>如何创建一个容器组件一靠react-redux的connect函数</p>
<ul>
<li>connect (mapStateToProps , mapDispatchToProps ) (UI组件)<ul>
<li>mapStateToProps:映射状态，返回值是一个对象</li>
<li>mapDispatchToProps:映射操作状态的方法，返回值是一个对象</li>
</ul>
</li>
</ul>
</li>
<li><p>备注1:容器组件中的store是靠props传进去的，而不是在容器组件中直接引入</p>
</li>
<li><p>备注2: mapDispatchToProps也可以是一个对象</p>
</li>
</ol>
<h3 id="多组件数据共享"><a href="#多组件数据共享" class="headerlink" title="多组件数据共享"></a>多组件数据共享</h3><p>上文中都是一个组件获取redux中的数据或者状态，并不能体现出redux的强大性，我们可以再次定义一个新的组件，让这个组件可以获得到Count组件中的状态，Count也可以获取到这个组件的状态。</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220814195342777.png" alt="image-20220814195342777"></p>
<h4 id="创建actions-x2F-person-js文件"><a href="#创建actions-x2F-person-js文件" class="headerlink" title="创建actions&#x2F;person.js文件"></a>创建actions&#x2F;person.js文件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">ADD_PERSON</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;../constant&#x27;</span> <span class="comment">//单纯是使用变量的文件避免出错的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createAddPersonAction</span> = personObj =&gt;(</span><br><span class="line">    &#123;<span class="attr">type</span>:<span class="variable constant_">ADD_PERSON</span>,<span class="attr">data</span>:personObj&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="创建reducers-x2F-person-js文件"><a href="#创建reducers-x2F-person-js文件" class="headerlink" title="创建reducers&#x2F;person.js文件"></a>创建reducers&#x2F;person.js文件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">ADD_PERSON</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../constant&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化人的列表</span></span><br><span class="line"><span class="keyword">const</span> initState = [&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">personReducer</span>(<span class="params">preState = initState,action</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;type,data&#125; = action;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">ADD_PERSON</span>: <span class="comment">//若是添加一个人</span></span><br><span class="line">            <span class="keyword">return</span> [data,...preState]</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> preState</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="改变store文件-重点"><a href="#改变store文件-重点" class="headerlink" title="改变store文件(重点)"></a>改变store文件(重点)</h4><p>上文中我们仅仅只是使用了一个容器组件，但是这个是多组件共享数据，写法大不相同：</p>
<ul>
<li>引入<code>combineReducers</code>从redux</li>
<li>引入为Person组件服务的reducer</li>
<li>汇总所有的reducer变为一个总的reducer</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该文件专门用于暴露一个store对象，整个应用只有一个store对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入createStore专门用于创建redux中最为核心的store对象</span></span><br><span class="line"><span class="comment">// 旧版：import &#123;createStore&#125; from &#x27;redux&#x27;</span></span><br><span class="line"><span class="comment">// 1.现在要这样写</span></span><br><span class="line"><span class="keyword">import</span> &#123; legacy_createStore <span class="keyword">as</span> createStore,applyMiddleware,combineReducers &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入redux-thunk，用于支持异步action</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入为Count组件服务的reducer</span></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&#x27;./reducers/reducer&#x27;</span></span><br><span class="line"><span class="comment">// 2.引入为Person组件服务的reducer</span></span><br><span class="line"><span class="keyword">import</span> personReducer <span class="keyword">from</span> <span class="string">&#x27;./reducers/person&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.汇总所有的reducer变为一个总的reducer</span></span><br><span class="line"><span class="keyword">const</span> allReducer = <span class="title function_">combineReducers</span>(&#123;</span><br><span class="line">    <span class="attr">count</span>:countReducer,</span><br><span class="line">    <span class="attr">person</span>:personReducer</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(allReducer,<span class="title function_">applyMiddleware</span>(thunk));</span><br></pre></td></tr></table></figure>

<h4 id="如何获取其他组件的状态？"><a href="#如何获取其他组件的状态？" class="headerlink" title="如何获取其他组件的状态？"></a>如何获取其他组件的状态？</h4><p>就拿Person组件为例：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;nanoid&#125; <span class="keyword">from</span> <span class="string">&#x27;nanoid&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------引入action文件中的action对象----------</span></span><br><span class="line"><span class="keyword">import</span> &#123;createAddPersonAction&#125; <span class="keyword">from</span> <span class="string">&#x27;../../redux/actions/person&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    addPerson=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> name = <span class="variable language_">this</span>.<span class="property">nameNode</span>.<span class="property">value</span>;</span><br><span class="line">        <span class="keyword">const</span> age = <span class="variable language_">this</span>.<span class="property">ageNode</span>.<span class="property">value</span>;</span><br><span class="line">        <span class="keyword">const</span> personObj=&#123;</span><br><span class="line">          <span class="attr">id</span>:<span class="title function_">nanoid</span>(),</span><br><span class="line">          name,</span><br><span class="line">          age</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">add</span>(personObj);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">nameNode</span>.<span class="property">value</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ageNode</span>.<span class="property">value</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是Person组件,上方组件求和为&#123;this.props.he&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span>=&gt;</span>this.nameNode=c&#125; type=&quot;text&quot; placeholder=&#x27;输入名字&#x27;/&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span>=&gt;</span>this.ageNode=c&#125; type=&quot;text&quot; placeholder=&#x27;输入年龄&#x27;/&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addPerson&#125;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;</span></span><br><span class="line"><span class="language-xml">              this.props.peops.map((p)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;p.id&#125;</span>&gt;</span>&#123;p.name&#125;-----&#123;p.age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#125;)</span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(</span><br><span class="line">  <span class="comment">// 这个state中放的就是redux中的公共状态</span></span><br><span class="line">  <span class="function"><span class="params">state</span>=&gt;</span>(&#123;</span><br><span class="line">      <span class="attr">peops</span>:state.<span class="property">person</span>, <span class="comment">// 映射状态</span></span><br><span class="line">      <span class="attr">he</span>:state.<span class="property">count</span></span><br><span class="line">  &#125;),</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">add</span>:createAddPersonAction <span class="comment">//映射操作状态的方法</span></span><br><span class="line">  &#125;</span><br><span class="line">)(<span class="title class_">Person</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h3><ol>
<li><p>一类特别的函数:只要是同样的输入(实参),必定得到同样的输出(返回)</p>
</li>
<li><p>必须遵守以下一些约束</p>
</li>
<li><p>不得改写参数数据。</p>
</li>
<li><p>不会产生任何副作用， 例如网络请求，输入和输出设备</p>
</li>
<li><p>不能调用Date.now()或者Math.random()等不纯的方法</p>
</li>
<li><p>redux 的 reducer 函数必须是一个纯函数</p>
</li>
</ol>
<h2 id="redux开发者工具"><a href="#redux开发者工具" class="headerlink" title="redux开发者工具"></a>redux开发者工具</h2><p>(1)安装：<code>yarn add redux-devtools-extension</code><br>(2)store中进行配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;composeWithDevTools&#125; <span class="keyword">from</span> <span class="string">&#x27;redux-devtools-extension&#x27;</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(allReducer , <span class="title function_">composeWithDevTools</span>( <span class="title function_">applyMiddleware</span>(thunk)))</span><br></pre></td></tr></table></figure>

<h1 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h1><p>当一个react项目完成后该如何上线呢？其实真正的开发中我们只需要将项目打包后交给后端即可，这里我们使用一个第三方包serve来临时搭建一台服务器。</p>
<p>安装：<code>npm i serve -g</code></p>
<ol>
<li>先执行打包指令<code>npm run build</code></li>
<li>会生成一个build文件，这个build就是你发给后端的文件</li>
<li>执行<code>serve build</code>指定build文件为一个服务器</li>
<li>这时候你的页面就可以呈现出来了</li>
</ol>
<h1 id="React扩展知识"><a href="#React扩展知识" class="headerlink" title="React扩展知识"></a>React扩展知识</h1><h2 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h2><p>setState其实是有两种写法的，并且setState中的执行是一个异步任务！</p>
<h3 id="1-对象式的setState"><a href="#1-对象式的setState" class="headerlink" title="1.对象式的setState"></a>1.对象式的setState</h3><p><code>setState(stateChange, [callback])</code></p>
<blockquote>
<ul>
<li>stateChange为状态改变对象(该对象可以体现出状态的更改)</li>
<li>callback是可选的回调函数, 它在状态更新完毕、界面也更新后(render调用后)才被调用</li>
</ul>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">add=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">     <span class="comment">// 对象式setState</span></span><br><span class="line">     <span class="comment">//1.获取原来的count值</span></span><br><span class="line">     <span class="keyword">const</span> &#123;count&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">     <span class="comment">//2.更新状态</span></span><br><span class="line">     <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">count</span>:count+<span class="number">1</span>&#125;,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">         <span class="comment">// 这个回调在render更新后触发</span></span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>);</span><br><span class="line">     &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-函数式的setState"><a href="#2-函数式的setState" class="headerlink" title="2.函数式的setState"></a>2.函数式的setState</h3><p><code>setState(updater, [callback])</code></p>
<blockquote>
<ul>
<li>updater为返回stateChange对象的函数。</li>
<li>updater可以接收到state和props。</li>
<li>callback是可选的回调函数, 它在状态更新、界面也更新后(render调用后)才被调用。</li>
</ul>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">add=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 函数式setState</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state,props</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">count</span>:state.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结：-2"><a href="#总结：-2" class="headerlink" title="总结："></a>总结：</h3><ol>
<li>对象式的setState是函数式的setState的简写方式(语法糖)</li>
<li>使用原则：<ol>
<li>如果新状态不依赖于原状态 &#x3D;&#x3D;&#x3D;&gt; 使用对象方式</li>
<li>如果新状态依赖于原状态 &#x3D;&#x3D;&#x3D;&gt; 使用函数方式</li>
<li>如果需要在setState()执行后获取最新的状态数据, 要在第二个callback函数中读取</li>
</ol>
</li>
</ol>
<h2 id="路由组件lazyLoad"><a href="#路由组件lazyLoad" class="headerlink" title="路由组件lazyLoad"></a>路由组件lazyLoad</h2><blockquote>
<p>react在加载页面过程中，路由组件都会被加载并缓存在浏览器中，这样会造成请求负载</p>
</blockquote>
<h3 id="引入路由组件"><a href="#引入路由组件" class="headerlink" title="引入路由组件"></a>引入路由组件</h3><p>需要用到<code>lazy</code>和<code>Suspense</code>这两个react内置的方法和组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span>,lazy,<span class="title class_">Suspense</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NavLink</span>,<span class="title class_">Route</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span> = <span class="title function_">lazy</span>(<span class="function">()=&gt;</span></span><br><span class="line">    <span class="title function_">import</span>(<span class="string">&#x27;./Home&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">About</span> = <span class="title function_">lazy</span>(<span class="function">()=&gt;</span></span><br><span class="line">    <span class="title function_">import</span>(<span class="string">&#x27;./About&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="包裹路由组件"><a href="#包裹路由组件" class="headerlink" title="包裹路由组件"></a>包裹路由组件</h3><p>对于Route组件要用<code>&lt;Suspense&gt;&lt;/Suspense&gt;</code>组件包裹，并设置默认加载组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;panel-body&quot;</span>&gt;</span><br><span class="line">  &#123;<span class="comment">/* 注册路由 */</span>&#125;</span><br><span class="line"> &lt;<span class="title class_">Suspense</span> fallback=&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">Loading</span>/&gt;</span></span>&#125;&gt; <span class="comment">//这里的loading组件就是加载过程中呈现的组件</span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line"> &lt;/<span class="title class_">Suspense</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h2><h3 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h3><ol>
<li>Hook是React 16.8.0版本增加的新特性&#x2F;新语法</li>
<li>可以让你在函数组件中使用 state 以及其他的 React 特性</li>
<li>Hook已然成为了React组件编写的<strong>新趋势</strong></li>
</ol>
<h3 id="三个常用Hooks"><a href="#三个常用Hooks" class="headerlink" title="三个常用Hooks"></a>三个常用Hooks</h3><ol>
<li>State Hook: React.useState()</li>
<li>Effect Hook: React.useEffect()</li>
<li>Ref Hook: React.useRef()</li>
</ol>
<h3 id="useState-Hook"><a href="#useState-Hook" class="headerlink" title="useState Hook"></a>useState Hook</h3><p>过去当中，我们只所以不用函数式组件，是因为其无法得到state状态等等一系列问题，但是React提供了新的解决方案：</p>
<ol>
<li>语法: <code>const [xxx, setXxx] = React.useState(initValue)</code><ul>
<li>这种写法其实是数组的解构赋值</li>
<li>initValue：第一次初始化指定的值在内部作缓存</li>
<li>[xxx, setXxx]：第1个为内部当前状态值, 第2个为更新状态值的函数</li>
</ul>
</li>
<li>setXxx()<ul>
<li><code>setXxx(newValue)</code>: 参数为非函数值, 直接指定新的状态值, 内部用其覆盖原来的状态值</li>
<li><code>setXxx(value =&gt; newValue)</code>: 参数为函数, 接收原本的状态值, 返回新的状态值, 内部用其覆盖原来的状态值</li>
</ul>
</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [count,setCount] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="number">0</span>); <span class="comment">//数组 </span></span><br><span class="line">    <span class="keyword">const</span> [name,setName] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="string">&#x27;jack&#x27;</span>); <span class="comment">//数组 </span></span><br><span class="line">    <span class="comment">// 加的回调</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// setCount(count+1) //第一种写法</span></span><br><span class="line">        <span class="title function_">setCount</span>(<span class="function">(<span class="params">count</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> count+<span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">change</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">setName</span>(<span class="string">&#x27;Tom&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前求和:&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我的名字:&#123;name&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;add&#125;</span>&gt;</span>点我加一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;change&#125;</span>&gt;</span>点我改名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Demo</span></span><br></pre></td></tr></table></figure>

<h3 id="useEffect-Hook"><a href="#useEffect-Hook" class="headerlink" title="useEffect Hook"></a>useEffect Hook</h3><p><a href="https://www.cnblogs.com/operate/p/16055824.html">参考帖子</a></p>
<p>Effect Hook 可以让你在函数组件中执行副作用操作*(用于模拟类组件中的生命周期钩子)*</p>
<p>React中的副作用操作：</p>
<ul>
<li>发ajax请求数据获取</li>
<li>设置订阅 &#x2F; 启动定时器</li>
<li>手动更改真实DOM</li>
</ul>
<p>Effect Hook 的第一个参数是回调函数，第二个参数是依赖。</p>
<blockquote>
<p>当第二个参数为 null 或 undefined 的时候，回调函数每次 render 都会执行，而参数为数组的时候，只有依赖项变了才会执行。</p>
<ul>
<li>当第二个参数为null 或 undefined，每次 render 都会执行</li>
<li>当第二个参数为[]空数组，回调函数只会在第一次render()后执行(挂载完毕)</li>
<li>当第二个参数数组中有值，则他会在值改变时触发回调</li>
</ul>
</blockquote>
<p><strong>语法说明：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//---在此可以执行任何带副作用操作---</span></span><br><span class="line">    <span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setCount</span>(<span class="function"><span class="params">count</span>=&gt;</span>count+<span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">400</span>);</span><br><span class="line">   	<span class="comment">//-----------------------------</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//---这个返回的函数做一些收尾工作---</span></span><br><span class="line">        <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,[])  <span class="comment">//如果指定的是[],回调函数只会在第一次render()后执行</span></span><br></pre></td></tr></table></figure>

<p>可以把 useEffect Hook 看做如下三个函数的组合</p>
<ol>
<li>componentDidMount(  )       组件挂载完毕的钩子</li>
<li>componentDidUpdate(  )      组件更新完毕钩子</li>
<li>componentWillUnmount(  )    组件将要销毁的钩子</li>
</ol>
<h3 id="useRef-Hook"><a href="#useRef-Hook" class="headerlink" title="useRef Hook"></a>useRef Hook</h3><ol>
<li>Ref Hook可以在函数组件中存储&#x2F;查找组件内的标签或任意其它数据</li>
<li>语法:<code>const refContainer = useRef(  )</code></li>
<li>作用:保存标签对象,功能与React.createRef(  )一样</li>
</ol>
<blockquote>
<p>跟类式组件官方推荐的ref有些相像</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据的获取</span></span><br><span class="line"><span class="keyword">const</span> myRef = <span class="title class_">React</span>.<span class="title function_">useRef</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(myRef.<span class="property">current</span>.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据的绑定</span></span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> ref=&#123;myRef&#125;/&gt;</span><br></pre></td></tr></table></figure>

<h3 id="memo-Hook"><a href="#memo-Hook" class="headerlink" title="memo Hook"></a>memo Hook</h3><p>memo缓存，当组件被反复加载时会一直触发函数组件，非常占用性能</p>
<p>此时点击按钮就不会重复触发<code>console.log(&#39;子组件被触发&#39;);</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;useState,memo&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存组件 memory</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Sub</span> = <span class="title function_">memo</span>(<span class="function">()=&gt;</span>&#123; <span class="comment">// 使用memo组件将组件包装</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子组件被触发&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件被触发<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [num,setnum] =<span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="title function_">setnum</span>(num+<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;num&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>累加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Sub</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>

<h3 id="useCallback-Hook"><a href="#useCallback-Hook" class="headerlink" title="useCallback Hook"></a>useCallback Hook</h3><p>配合memo使用，在我们单独使用memo的时候会遇到memo失效bug，当父组件向子组件传递的数据是一个函数方法，会造成memo失效</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;useState,memo,useCallback&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line">interface <span class="title class_">IProps</span>&#123;</span><br><span class="line">  <span class="attr">handleClick</span>:<span class="function">()=&gt;</span><span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 缓存组件 memory</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Sub</span> = <span class="title function_">memo</span>(<span class="function">(<span class="params">props:IProps</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子组件被触发&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;&gt;</span> </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;props.handleClick&#125;</span>&gt;</span>累加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件被触发<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [num,setnum] =<span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">//真正被触发的函数-----useCallback包裹真正触发的函数</span></span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="title function_">useCallback</span>(</span><br><span class="line">    <span class="function">()=&gt;</span><span class="title function_">setnum</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> item+<span class="number">1</span></span><br><span class="line">    &#125;),</span><br><span class="line">    []</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;num&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Sub</span> <span class="attr">handleClick</span>=<span class="string">&#123;handleClick&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>

<h3 id="useMemo-Hook"><a href="#useMemo-Hook" class="headerlink" title="useMemo Hook"></a>useMemo Hook</h3><p>用法和useCallback一样，就是多嵌套一层</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;useState,memo,useCallback,useMemo&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line">interface <span class="title class_">IProps</span>&#123;</span><br><span class="line">  <span class="attr">handleClick</span>:<span class="function">()=&gt;</span><span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存组件 memory</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Sub</span> = <span class="title function_">memo</span>(<span class="function">(<span class="params">props:IProps</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子组件被触发&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;&gt;</span> </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;props.handleClick&#125;</span>&gt;</span>累加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件被触发<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [num,setnum] =<span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//真正被触发的函数-----和useCallback用法相像</span></span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="title function_">useMemo</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span> <span class="title function_">setnum</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item+<span class="number">1</span></span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,[])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;num&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Sub</span> <span class="attr">handleClick</span>=<span class="string">&#123;handleClick&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义Hook"><a href="#自定义Hook" class="headerlink" title="自定义Hook"></a>自定义Hook</h3><p>自定义hook其实就是自己封装一个函数，然后按需使用</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Hook本质还是一个钩子函数</span></span><br><span class="line"><span class="comment">// - 把小写字母转换大写 - </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> samllWord = <span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义一个hook</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useWord</span>(<span class="params">word: string</span>):string &#123;</span><br><span class="line">  <span class="keyword">return</span> word.<span class="title function_">toUpperCase</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> bigWord =  <span class="title function_">useWord</span>(samllWord)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>小写:&#123;samllWord&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>小写:&#123;bigWord&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>



<h2 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h2><p>我们在编写jsx的时候都需要一个根标签包裹，这就会造成层级过多很臃肿。我们可以使用<code>import React, &#123; Component,Fragment &#125; from &#39;react&#39;</code>引入<strong>Fragment</strong>来解决这个问题</p>
<blockquote>
<p>第一种写法：</p>
<p>使用<code>&lt;Fragment&gt;&lt;/Fragment&gt;</code>包裹</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span>,<span class="title class_">Fragment</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>第二种写法：</p>
<p>使用空标签包裹<code>&lt;&gt;&lt;/&gt;</code></p>
<ul>
<li>两者的区别就是Fragment可以设置key值</li>
</ul>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><blockquote>
<p>Context是React提供的一种【祖组件】和【后代组件】间通信的新功能</p>
</blockquote>
<h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><h4 id="1-发送数据的组件"><a href="#1-发送数据的组件" class="headerlink" title="1.发送数据的组件"></a>1.发送数据的组件</h4><ul>
<li>创建Context容器对象：<ul>
<li><code>const XxxContext = React.createContext()</code></li>
</ul>
</li>
<li>渲染子组时，外面包裹xxxContext.Provider, 通过value属性给后代组件传递数据<ul>
<li><code>&lt;xxxContext.Provider value=&#123;数据&#125;&gt;子组件&lt;/xxxContext.Provider&gt;</code></li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建Context对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserNameContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>();</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="title class_">Provider</span>,<span class="title class_">Consumer</span>&#125; = <span class="title class_">UserNameContext</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    state=&#123;</span><br><span class="line">        <span class="attr">username</span>:<span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;username,age&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;parent&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是A组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>我的用户名是&#123;username&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>我的年龄是&#123;age&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* <span class="tag">&lt;<span class="name">B</span> <span class="attr">username</span>=<span class="string">&#123;this.state.username&#125;/</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">        </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;username,age&#125;&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">B</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-读取数据的组件"><a href="#2-读取数据的组件" class="headerlink" title="2.读取数据的组件"></a>2.读取数据的组件</h4><p><strong>第一种方式：适用于类组件</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="comment">// 声明接收context</span></span><br><span class="line">    <span class="keyword">static</span> contextType = <span class="title class_">UserNameContext</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//console.log(this); //C组件实例对象身上的context</span></span><br><span class="line">      <span class="keyword">const</span> &#123;username,age&#125;=<span class="variable language_">this</span>.<span class="property">context</span></span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;grand&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">             <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是C组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">             <span class="tag">&lt;<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                 我从A组件接收到的名字是:&#123;username&#125;</span></span><br><span class="line"><span class="language-xml">                 年龄是:&#123;age&#125;</span></span><br><span class="line"><span class="language-xml">             <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第二种方式：函数组件和类组件都可</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">C</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;grand&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">             <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是C组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">             <span class="tag">&lt;<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                 我从A组件接收到的名字是:</span></span><br><span class="line"><span class="language-xml">                 <span class="tag">&lt;<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                     &#123;</span></span><br><span class="line"><span class="language-xml">                         value =&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                             return `$&#123;value.username&#125;,年龄是$&#123;value.age&#125;`</span></span><br><span class="line"><span class="language-xml">                         &#125;</span></span><br><span class="line"><span class="language-xml">                     &#125;</span></span><br><span class="line"><span class="language-xml">                 <span class="tag">&lt;/<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">             <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="组件优化"><a href="#组件优化" class="headerlink" title="组件优化"></a>组件优化</h2><h3 id="Component的两个问题"><a href="#Component的两个问题" class="headerlink" title="Component的两个问题"></a>Component的两个问题</h3><ol>
<li><p>只要执行<code>setState()</code>,即使不改变状态数据, 组件也会重新<code>render()</code> &#x3D;&#x3D;&gt; 效率低</p>
</li>
<li><p>只当前组件重新<code>render()</code>, 就会自动重新render子组件，纵使子组件没有用到父组件的任何数据 &#x3D;&#x3D;&gt; 效率低</p>
</li>
</ol>
<h3 id="效率高的做法"><a href="#效率高的做法" class="headerlink" title="效率高的做法"></a>效率高的做法</h3><p>只有当组件的state或props数据发生改变的时候才重新render()</p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>Component中的shouldComponentUpdate()总是返回true</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h4 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h4><blockquote>
<p>自己重写一个shouldComponentUpdate()阀门控制方法</p>
<p>shouldComponentUpdate()阀门在开启的前提是state或者props发生改变！</p>
<p>正好shouldComponentUpdate(nextProps,nextState)可以传递两个参数</p>
<ul>
<li>nextProps		接下来要变的目标props</li>
<li>nextState          接下来要变的目标state</li>
</ul>
</blockquote>
<p>原理其实就是判断当前的state和改变后的state是否一致</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">shouldComponentUpdate</span>(<span class="params">nextProps,nextState</span>)&#123;</span><br><span class="line">    <span class="comment">//console.log(this.props,this.state);//目前的props和state</span></span><br><span class="line">    <span class="comment">//console.log(nextProps,nextState);//接下来要变的目标props和目标state</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">carName</span>===nextState.<span class="property">carName</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接收的组件也要重写：</p>
<blockquote>
<p>判断接收的props是否和目标props一致</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">shouldComponentUpdate</span>(<span class="params">nextProps,nextState</span>)&#123;</span><br><span class="line">    <span class="comment">//console.log(this.props,this.state);//目前的props和state</span></span><br><span class="line">    <span class="comment">//console.log(nextProps,nextState);//接下来要变的目标props和目标state</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">carName</span>===nextProps.<span class="property">carName</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h4><p>使用<strong>PureComponent</strong></p>
<blockquote>
<p>PureComponent重写了shouldComponentUpdate(), 只有state或props数据有变化才返回true</p>
</blockquote>
<p>不使用Components，而是使用PureComponent</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">PureComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Parent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意: </p>
<ul>
<li>只是进行state和props数据的浅比较, 如果只是数据对象内部数据变了, 返回false 。不要直接修改state数据, 而是要产生新数据项目中一般使用PureComponent来优化</li>
</ul>
<h2 id="render-props"><a href="#render-props" class="headerlink" title="render props"></a>render props</h2><p>Vue中:<br>    使用slot技术, 也就是通过组件标签体传入结构  <code>&lt;A&gt;&lt;B/&gt;&lt;/A&gt;</code><br>React中:<br>    使用children props: 通过组件标签体传入结构<br>    使用render props: 通过组件标签属性传入结构,而且可以携带数据，一般用render函数属性</p>
<p><strong>children props方式：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Parent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;parent&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是parent组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">A</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        	&#x27;内容&#x27;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">A</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">children</span>) <span class="comment">//这个.children中存放着上方A组件包裹的‘内容’</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;child&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是A组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>render props方式：</strong></p>
<blockquote>
<p>这种方式是在你不知道这个地方要放什么组件的时候可以让其他开发者知道这里放的是一个占位组件，相当于Vue中的插槽</p>
<ul>
<li><code>&lt;A render=&#123;(name)=&gt;&lt;B name=&#123;name&#125;/&gt;&#125;/&gt;</code></li>
</ul>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Parent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;parent&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是parent组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">A</span> <span class="attr">render</span>=<span class="string">&#123;(name)</span>=&gt;</span><span class="tag">&lt;<span class="name">B</span> <span class="attr">name</span>=<span class="string">&#123;name&#125;/</span>&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    state=&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;name&#125;=<span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;child&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是A组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>我发送的name:&#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;this.props.render(name)&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;b&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是B组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h4</span>&gt;</span>我收到的name:&#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="错误边界"><a href="#错误边界" class="headerlink" title="错误边界"></a>错误边界</h2><h4 id="理解：-1"><a href="#理解：-1" class="headerlink" title="理解："></a>理解：</h4><p>错误边界(Error boundary)：用来捕获后代组件错误，渲染出备用页面</p>
<h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><p>只能捕获后代组件生命周期产生的错误，不能捕获自己组件产生的错误和其他组件在合成事件、定时器中产生的错误</p>
<h5 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h5><blockquote>
<p>为父组件添加生命周期勾子处理错误：</p>
</blockquote>
<p><code>getDerivedStateFromError</code>配合<code>componentDidCatch</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">...  </span><br><span class="line"></span><br><span class="line">  state=&#123;</span><br><span class="line">    <span class="attr">hasError</span>:<span class="string">&#x27;&#x27;</span><span class="comment">//用于标识子组件是否产生错误</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 当Parent的子组件出现报错时，会触发getDerivedStateFromProps调用</span></span><br><span class="line"><span class="comment">// 并携带错误信息</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getDerivedStateFromProps</span>(<span class="params">error</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">hasError</span>:error&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 此勾子在渲染组件时出错被调用</span></span><br><span class="line">  <span class="title function_">componentDidCatch</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;统计错误此处,反馈服务器,用于通知编码人员进行bug的解决&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="组件间通信总结"><a href="#组件间通信总结" class="headerlink" title="组件间通信总结"></a>组件间通信总结</h2><h3 id="组件间关系："><a href="#组件间关系：" class="headerlink" title="组件间关系："></a>组件间关系：</h3><ul>
<li>父子组件</li>
<li>兄弟组件（非嵌套组件）</li>
<li>祖孙组件（跨级组件）</li>
</ul>
<h3 id="几种通信方式："><a href="#几种通信方式：" class="headerlink" title="几种通信方式："></a>几种通信方式：</h3><ol>
<li>props：<ol>
<li>.children props</li>
<li>.render props</li>
</ol>
</li>
<li>消息订阅-发布：<ol>
<li>pubs-sub，event等等</li>
</ol>
</li>
<li>集中式管理：<ol>
<li>redux，dva等等</li>
</ol>
</li>
<li>conText：<ol>
<li>生产者消费者模式</li>
</ol>
</li>
</ol>
<h3 id="比较好的搭配方式："><a href="#比较好的搭配方式：" class="headerlink" title="比较好的搭配方式："></a>比较好的搭配方式：</h3><ul>
<li>父子组件：props</li>
<li>兄弟组件：消息订阅-发布、集中式管理</li>
<li>祖孙组件(跨级组件)：消息订阅-发布、集中式管理、conText(开发用的少，封装插件用的多)</li>
</ul>
<h1 id="React-Router-6"><a href="#React-Router-6" class="headerlink" title="React Router 6"></a>React Router 6</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol>
<li><p>React Router以三个不同的包发布到npm上,它们分别为:</p>
<ol>
<li>react-router:路由的核心库,提供了很多的:组件、钩子。</li>
<li><strong>react-router-dom:包含react-router所有内容,井添加一些专门用于DOM的组件，例如</strong><code>&lt;BrowserRouter&gt;</code> 等。</li>
<li>react-router-native:包括react-router所有内容，并添加一些专[ 用于ReactNative的API,例如: <code>&lt;NativeRouter&gt;</code>等。</li>
</ol>
</li>
<li><p>与React Router 5.x版本相比,改变了什么?</p>
<ol>
<li>内置组件的变化:移除<code>&lt;Switch/&gt;</code>,新增<code>&lt;Routes/&gt;</code> 等。</li>
<li>语法的变化: <code>component=&#123;About&#125; </code>变为<code>element=&#123; &lt;About/&gt;&#125;</code>等。</li>
<li>新增多个hook: useParams 、useNavigate. useMatch 等。</li>
<li>官方明确推荐函数式组件了! ! !</li>
</ol>
</li>
</ol>
<h2 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h2><h3 id="BrowserRouter"><a href="#BrowserRouter" class="headerlink" title="BrowserRouter"></a>BrowserRouter</h3><ol>
<li>说明：<code>BrowserRouter</code>用于包裹整个应用</li>
<li>示例代码：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入react核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 引入ReactDOM渲染页面</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="comment">// 引入App组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">BrowserRouter</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="comment">// 渲染app到页面</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="HashRouter"><a href="#HashRouter" class="headerlink" title="HashRouter"></a>HashRouter</h3><p>1.说明:作用与<code>&lt;BrowserRouter&gt;</code>一样，但<code>&lt;HashRouter&gt;</code>修改的是地址栏的hash值。<br>2.备注: 6.x版本中<code>&lt;HashRouter&gt;</code>、<code>&lt;BrowserRoutery</code> 的用法与5.x相同。</p>
<h3 id="Routes与Route"><a href="#Routes与Route" class="headerlink" title="Routes与Route"></a>Routes与Route</h3><ol>
<li>v6版本中移出了先前的<code>&lt;Switch&gt;</code>,引入了新的替代者: <code>&lt;Routes&gt; </code>。</li>
<li><code>&lt;Routes&gt;</code> 和<code>&lt;Route&gt;</code> 要配合使用，且必须要用<code>&lt;Routes&gt;</code>包裹<code>&lt;Route&gt;</code>。</li>
<li><code>&lt;Route&gt;</code> 相当于一个if语询,如果其路径与当前URL匹配,则呈现其对应的组件。</li>
<li><code>&lt;Route caseSensitive&gt;</code> 属性用于指定:匹配时是否区分大小写(默认为false)。</li>
<li>当URL发生变化时，<code>&lt;Routes&gt;</code> 都会查看其所有子<code>&lt;Route&gt;</code>元素以找到最佳匹配并呈现组件。</li>
<li><code>&lt;Route&gt;</code>也可以嵌套使用，且可配合<code>useRoutes()</code>配置“路由表”，但需要通过<code>&lt;outlet&gt; </code>组件来渲染其子路由。</li>
</ol>
<h3 id="Navigate"><a href="#Navigate" class="headerlink" title="Navigate"></a>Navigate</h3><ol>
<li>作用:只要<code>&lt;Navigate&gt;</code>组件被渲染，就会修改路径，切换视图。</li>
<li>replace属性用于控制跳转模式(push 或replace,默认是push) .</li>
<li>示例代码：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Navigate</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [sum,setSum] = <span class="title function_">useState</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是Home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 根据sum决定是否切换视图 */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;sum === 2 ? <span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">replace</span>/&gt;</span> : <span class="tag">&lt;<span class="name">h4</span>&gt;</span>当前sum值:&#123;sum&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>setSum(2)&#125;&gt;点我将sum变为2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当url为:3000&#x2F;的时候在5版本用的是<code>&lt;Redirect to=&quot;/about&quot;/&gt;</code>,但在6版本中则使用<code>Navigate</code></p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&#123;<span class="comment">/* 注册路由 */</span>&#125;</span><br><span class="line">&lt;<span class="title class_">Routes</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line">&lt;/<span class="title class_">Routes</span>&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="NavLink高亮"><a href="#NavLink高亮" class="headerlink" title="NavLink高亮"></a>NavLink高亮</h3><p>在过去我们要想让激活的NavLink添加样式可以使用<code>activeClassName=&#39;found&#39;</code>表示激活状态的navLink类名为found，但在6当中改变了这一做法：</p>
<blockquote>
<p>NavLink中的className赋值一个函数,传递形参为<code>&#123;isActive&#125;</code>是个布尔值，根据这个布尔值判断是否被激活</p>
<p>true为激活，false为未激活</p>
<ul>
<li>另外可以给NavLink添加end 表示子级路由亮起的时候自己不亮</li>
</ul>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&#123;<span class="comment">/* 路由链接 */</span>&#125;</span><br><span class="line">&lt;<span class="title class_">NavLink</span> className=&#123;computeClassName&#125; to=<span class="string">&quot;/about&quot;</span>&gt;<span class="title class_">About</span>&lt;/<span class="title class_">NavLink</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&#123;computeClassName&#125;</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">computeClassName</span>(<span class="params">&#123;isActive&#125;</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> isActive ? <span class="string">&#x27;list-group-item found&#x27;</span>:<span class="string">&#x27;list-group-item&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h2><blockquote>
<p>这个路由表和Vue有点相像，就是把路由规则写到一个数组中，这样写法更加直观</p>
</blockquote>
<p><strong>配置路由表</strong></p>
<p>涵盖嵌套路由配置规则：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Navigate</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">About</span>/&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span>,</span><br><span class="line">      <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">          <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">News</span>/&gt;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">          <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Message</span>/&gt;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>/&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>

<p><strong>配置占位(仅仅一级路由)</strong></p>
<p>使用到hooks中的<strong>useRoutes</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NavLink</span>,useRoutes&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="comment">// 引入你的路由表</span></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&#x27;./routes&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据路由表生成对应的路由规则</span></span><br><span class="line">  <span class="keyword">const</span> element = <span class="title function_">useRoutes</span>(routes)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-offset-2 col-xs-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>React Router Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 路由链接 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/* ----------------重要------------------- */&#125;</span></span><br><span class="line"><span class="language-xml">                &#123;element&#125;</span></span><br><span class="line"><span class="language-xml">                &#123;/* --------------占位作用------------------- */&#125;</span></span><br><span class="line"><span class="language-xml">                &#123;/* ----------------重要------------------- */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>配置占位(二级路由…)</strong></p>
<blockquote>
<p>对于二级路由之后的要使用内置组件<code>&lt;Outlet/&gt;</code>指定路由组件呈现位置</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NavLink</span>,<span class="title class_">Outlet</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是Home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;nav nav-tabs&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;news&quot;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;message&quot;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* 指定路由组件呈现的位置 */&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Outlet</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h2><h3 id="params"><a href="#params" class="headerlink" title="params"></a>params</h3><blockquote>
<p>params传参需要对路径进行占位</p>
<ul>
<li>改变路由表的写法</li>
</ul>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Navigate</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">About</span>/&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span>,</span><br><span class="line">      <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">          <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">News</span>/&gt;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">          <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Message</span>/&gt;</span></span>,</span><br><span class="line">          <span class="attr">children</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title/:content&#x27;</span>, <span class="comment">// ---这里---</span></span><br><span class="line">              <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Detail</span>/&gt;</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>/&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>

<p><strong>传递数据路由组件</strong></p>
<blockquote>
<p>更改url传递参数，to的路径更改</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;</span></span><br><span class="line"><span class="language-xml">                message.map((m)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                  return (</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;m.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`<span class="attr">detail</span>/$&#123;<span class="attr">m.id</span>&#125;/$&#123;<span class="attr">m.title</span>&#125;/$&#123;<span class="attr">m.content</span>&#125;`&#125;&gt;</span>&#123;m.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  )</span></span><br><span class="line"><span class="language-xml">                &#125;)</span></span><br><span class="line"><span class="language-xml">              &#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* 指定路由组件的展示位置 */&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Outlet</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><strong>接收状态的组件</strong></p>
<blockquote>
<p>使用<strong>useParams</strong>接收传递的状态，传递的是一个对象，可以使用解构赋值方式</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Detail</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;id,title,content&#125; = <span class="title function_">useParams</span>() </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>id:&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>title:&#123;title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>content:&#123;content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><blockquote>
<p>search传参肯定不需要在对路由表进行更改了，不需要:占位了</p>
</blockquote>
<p><strong>传递数据路由组件</strong></p>
<blockquote>
<p>对to:url进行更改</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;useState&#125;<span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span>,<span class="title class_">Outlet</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Message</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [message] = <span class="title function_">useState</span>([</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息1&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;one&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息2&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;two&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息3&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;three&#x27;</span>&#125;,</span><br><span class="line">  ])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;</span></span><br><span class="line"><span class="language-xml">                message.map((m)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                  return (</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;m.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`<span class="attr">detail</span>?<span class="attr">id</span>=<span class="string">$&#123;m.id&#125;&amp;title</span>=<span class="string">$&#123;m.title&#125;&amp;content</span>=<span class="string">$&#123;m.content&#125;</span>`&#125;&gt;</span>&#123;m.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  )</span></span><br><span class="line"><span class="language-xml">                &#125;)</span></span><br><span class="line"><span class="language-xml">              &#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* 指定路由组件的展示位置 */&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Outlet</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>接收数据的路由组件</strong></p>
<p>跟params不同的是要使用<strong>useSearchParams</strong>这个hook方法接收，而且接收的还是一个数组，有两个参数，search和setSearch</p>
<ul>
<li>search上内置的<code>get(&#39;你要的数据key值&#39;)</code>可以获取数据</li>
<li>setSearch可以更改参数<ul>
<li>实例：<code>setSearch(&#39;id=10080&amp;title=haha&amp;content=xixi&#39;)</code></li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSearchParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Detail</span>(<span class="params"></span>) &#123;</span><br><span class="line">  	<span class="keyword">const</span> [search,setSearch] = <span class="title function_">useSearchParams</span>() </span><br><span class="line">  	<span class="keyword">const</span> id = search.<span class="title function_">get</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">  	<span class="keyword">const</span> title = search.<span class="title function_">get</span>(<span class="string">&#x27;title&#x27;</span>);</span><br><span class="line">  	<span class="keyword">const</span> content = search.<span class="title function_">get</span>(<span class="string">&#x27;content&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>id:&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>title:&#123;title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>content:&#123;content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><p><strong>传递数据的组件</strong></p>
<p>多出了一个属性<code>state=&#123;&#123;&#125;&#125;</code>传递一个对象,这个对象包含你要传递的值</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;useState&#125;<span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span>,<span class="title class_">Outlet</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Message</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [message] = <span class="title function_">useState</span>([</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息1&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;one&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息2&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;two&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息3&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;three&#x27;</span>&#125;,</span><br><span class="line">  ])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;</span></span><br><span class="line"><span class="language-xml">                message.map((m)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                  return (</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;m.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">Link</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                      <span class="attr">to</span>=<span class="string">&#x27;detail&#x27;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                      <span class="attr">state</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">id:m.id</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">title:m.title</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">content:m.content</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                      &#125;&#125;&gt;</span>&#123;m.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  )</span></span><br><span class="line"><span class="language-xml">                &#125;)</span></span><br><span class="line"><span class="language-xml">              &#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* 指定路由组件的展示位置 */&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Outlet</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>接收数据的组件</strong></p>
<p>使用到useLocation这个hook，返回值是一个对象，可以使用结构再赋值的形式获取到state对象中的传递过来的属性</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useLocation &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Detail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;<span class="attr">state</span>:&#123;id,title,content&#125;&#125; =<span class="title function_">useLocation</span>()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>id:&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>title:&#123;title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>content:&#123;content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编程式路由导航-1"><a href="#编程式路由导航-1" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h2><h3 id="useNavigate"><a href="#useNavigate" class="headerlink" title="useNavigate"></a>useNavigate</h3><p>useNavigate可以实现跳转指定路径并同时携带state参数</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span>,<span class="title class_">Outlet</span>,useNavigate &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> navigate = <span class="title function_">useNavigate</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">showDetail</span>(<span class="params">m</span>) &#123; <span class="comment">//这里的m是button传递的</span></span><br><span class="line">    <span class="title function_">navigate</span>(<span class="string">&#x27;detail&#x27;</span>,&#123;</span><br><span class="line">      <span class="attr">replace</span>:<span class="literal">false</span>, <span class="comment">//跳转模式</span></span><br><span class="line">      <span class="attr">state</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>:m.<span class="property">id</span>,</span><br><span class="line">        <span class="attr">title</span>:m.<span class="property">title</span>,</span><br><span class="line">        <span class="attr">content</span>:m.<span class="property">content</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>当然也可以实现前进后退功能：</p>
<ul>
<li>navigate(-1) 后退</li>
<li>navigate(1) 前进</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useNavigate &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Header</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> navigate = <span class="title function_">useNavigate</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">back</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">navigate</span>(-<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">forward</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">navigate</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-offset-2 col-xs-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>React Router Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;back&#125;</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;forward&#125;</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="额外的几个Hooks"><a href="#额外的几个Hooks" class="headerlink" title="额外的几个Hooks"></a>额外的几个Hooks</h2><h4 id="1-useInRouterContext"><a href="#1-useInRouterContext" class="headerlink" title="1. useInRouterContext()"></a>1. useInRouterContext()</h4><p>作用：如果组件在<code>&lt;Router&gt;</code>的上下文中呈现，则<code>useInRouterContext()</code>勾子返回true，否则false</p>
<blockquote>
<p>简单来说就是这个组件有没有被<code>&lt;BrowserRouter&gt;</code>所包裹</p>
</blockquote>
<h4 id="2-useNavigationType"><a href="#2-useNavigationType" class="headerlink" title="2.useNavigationType()"></a>2.useNavigationType()</h4><ol>
<li>作用：返回当前的导航类型(用户是如何来到当前页面的)</li>
<li>返回值：POP，PUSH，PEPLACE</li>
<li>备注：POP是指在浏览器中直接打开了这个路由组件（刷新页面）</li>
</ol>
<h4 id="3-useOutlet"><a href="#3-useOutlet" class="headerlink" title="3.useOutlet()"></a>3.useOutlet()</h4><ol>
<li>作用：用来呈现当前组件中渲染的嵌套路由</li>
<li>示例代码：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="title function_">useOutlet</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"><span class="comment">// 如果嵌套路由没有挂载，则result为null</span></span><br><span class="line"><span class="comment">// 如果嵌套路已经挂载，则展示嵌套的路由对象</span></span><br></pre></td></tr></table></figure>

<h4 id="4-useResolvedPath"><a href="#4-useResolvedPath" class="headerlink" title="4.useResolvedPath()"></a>4.useResolvedPath()</h4><ol>
<li>作用：给定一个URL值，解析其中的：path，search，hash值</li>
</ol>
]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>antd中的setFieldsValue</title>
    <url>/found404.io/2022/08/20/antd%E4%B8%AD%E7%9A%84setFieldsValue/</url>
    <content><![CDATA[<h1 id="关于antd中的setFieldsValue"><a href="#关于antd中的setFieldsValue" class="headerlink" title="关于antd中的setFieldsValue"></a>关于antd中的setFieldsValue</h1><p>起因：</p>
<blockquote>
<p>在做后台管理的用户列表页面时，想要制作一个点击编辑用户信息可以弹出一个拟态框，拟态框可以动态获取到用户的name和password值。同时，将获取到的值传递进input中。</p>
</blockquote>
<span id="more"></span>

<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220820211735532.png" alt="image-20220820211735532"></p>
<p>我原本的思路是先设置一个默认值，当点击编辑渲染拟态框组件的时候会触发<code>useEffect</code>组件挂载完毕的勾子，这时候就会触发setusername这个回调，将数据更改，从而将input中的值也更改。</p>
<p>当然，组件间传递数据是可以实现的</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用消息订阅与发布</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PubSub</span> <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击编辑按钮弹出拟态框并将数据发给拟态框组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">edit</span> = (<span class="params">record</span>)=&gt;&#123;</span><br><span class="line">    <span class="comment">// 使用消息订阅与发布将数据传送给拟态框</span></span><br><span class="line">    <span class="title class_">PubSub</span>.<span class="title function_">publish</span>(<span class="string">&#x27;inputValue&#x27;</span>,record)</span><br><span class="line">    <span class="comment">// 开启拟态框</span></span><br><span class="line">    <span class="title function_">setVisible</span>(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>接收数据：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> token = <span class="title class_">PubSub</span>.<span class="title function_">subscribe</span>(<span class="string">&#x27;inputValue&#x27;</span>,<span class="function">(<span class="params">_,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;username,password&#125; = data;</span><br><span class="line">    <span class="comment">// 此时拟态框获取到了对应点击那行用户的数据</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title class_">PubSub</span>.<span class="title function_">unsubscribe</span>(token);<span class="comment">// 清除消息订阅</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,[]);</span><br></pre></td></tr></table></figure>



<hr>
<p>起初想使用<code>useState</code>改变状态，但是不彳亍😥，看了文档发现不支持，可以使用<code>form.setFieldsValue(&#123;&#125;)</code></p>
<p>但是我实在不知道这里面的对象到底该怎么传！！</p>
<p>要知道，input有两个，该如何区分，如何赋值，官网也不详细。后来看了一个demo才发现，原来每个<code>&lt;From.Item&gt;</code>上都有一个<code>name</code>值，这就是区分不同input的关键！</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;<span class="title class_">Form</span>.<span class="property">Item</span> </span><br><span class="line">    name=<span class="string">&quot;password&quot;</span> </span><br><span class="line">    label=<span class="string">&quot;密码&quot;</span></span><br><span class="line">    initialValue=<span class="string">&quot;admin&quot;</span> <span class="comment">//这是默认值</span></span><br><span class="line">    &gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span>/&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Form</span>.<span class="property">Item</span>&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><strong>解决方案：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> token = <span class="title class_">PubSub</span>.<span class="title function_">subscribe</span>(<span class="string">&#x27;inputValue&#x27;</span>,<span class="function">(<span class="params">_,data</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> &#123;username,password&#125; = data;</span><br><span class="line">      <span class="comment">// 修改默认值</span></span><br><span class="line">      form.<span class="title function_">setFieldsValue</span>(&#123;</span><br><span class="line">        <span class="attr">username</span>:username, <span class="comment">// 对应第一个input</span></span><br><span class="line">        <span class="attr">password</span>:password  <span class="comment">// 对应第二个input</span></span><br><span class="line">      &#125;)</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="title class_">PubSub</span>.<span class="title function_">unsubscribe</span>(token); <span class="comment">//清除消息订阅</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,[]);</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>此时不管点哪行用户的编辑，都可以实时更改input中的值：😍😍</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220820212921172.png" alt="image-20220820212921172"></p>
<p><a href="https://found-404.github.io/found404.io/">Blog地址</a></p>
]]></content>
      <categories>
        <category>React</category>
        <category>UI组件库</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>antd</tag>
      </tags>
  </entry>
  <entry>
    <title>认识jQuery</title>
    <url>/found404.io/2022/07/04/jQuery/</url>
    <content><![CDATA[<h1 id="认识jQuery"><a href="#认识jQuery" class="headerlink" title="认识jQuery"></a>认识jQuery</h1><h1 id="DOM对象和jQuery对象"><a href="#DOM对象和jQuery对象" class="headerlink" title="DOM对象和jQuery对象"></a>DOM对象和jQuery对象</h1><h2 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h2><h3 id="1-DOM对象-用原生js获取过来的对象就是DOM对象"><a href="#1-DOM对象-用原生js获取过来的对象就是DOM对象" class="headerlink" title="1. DOM对象:用原生js获取过来的对象就是DOM对象"></a>1. DOM对象:用原生js获取过来的对象就是DOM对象</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655434695673-716396bb-2625-4a7c-8bf5-f657e6f7fdc9.png" alt="img"></p>
<span id="more"></span>

<h3 id="2-关于jQuery对象-用jQuery方式获取"><a href="#2-关于jQuery对象-用jQuery方式获取" class="headerlink" title="2.关于jQuery对象:用jQuery方式获取"></a>2.关于jQuery对象:用jQuery方式获取</h3><p>获取过来的对象是<strong>jQuery</strong>对象。本质: 通过**$**把DOM元素进行了包装</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655434767179-023a8725-75b5-4295-9825-a27ebe331c60.png" alt="img"></p>
<h3 id="3-关于jQuery对象只能使用jQuery-方法"><a href="#3-关于jQuery对象只能使用jQuery-方法" class="headerlink" title="3. 关于jQuery对象只能使用jQuery 方法"></a>3. 关于jQuery对象只能使用jQuery 方法</h3><p><em>DOM对象则使用原生的JavaScirpt属性和方法</em></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655434820534-0d742421-b37b-48ef-b785-a6279fb24c1f.png" alt="img"></p>
<h2 id="相互转换"><a href="#相互转换" class="headerlink" title="相互转换"></a>相互转换</h2><h3 id="1-DOM-对象转换为-jQuery-对象"><a href="#1-DOM-对象转换为-jQuery-对象" class="headerlink" title="1. DOM 对象转换为 jQuery 对象"></a>1. DOM 对象转换为 jQuery 对象</h3><p>使用$包裹就会改变</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655434936962-fb382719-79c5-42ba-be85-34d2608d74a9.png" alt="img"></p>
<h3 id="2-让jQuery-转换为-DOM-对象"><a href="#2-让jQuery-转换为-DOM-对象" class="headerlink" title="2. 让jQuery 转换为 DOM 对象"></a>2. 让jQuery 转换为 DOM 对象</h3><ul>
<li><strong>$(‘video’)[0]</strong></li>
<li><strong>$(‘video’).get(0)</strong></li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655434974828-06375355-f07b-44a8-93a7-29bd18a26d7d.png" alt="img"></p>
<h1 id="使用jQuery选择器"><a href="#使用jQuery选择器" class="headerlink" title="使用jQuery选择器"></a>使用jQuery选择器</h1><h2 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655435213752-a7b68ee4-eb1a-4792-8fd0-92333b12ff4d.png" alt="img"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./jQuery-min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span>我是nav div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;.nav&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;.nav&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;ul li&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;ul li&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="筛选选择器"><a href="#筛选选择器" class="headerlink" title="筛选选择器"></a>筛选选择器</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655435253683-f237c0ff-b675-4abb-9973-1867df648e0d.png" alt="img"></p>
<ul>
<li><strong>获取第一个li元素</strong></li>
</ul>
<p>​            <strong>$(‘ul li:first’).css(‘color’, ‘red’);</strong></p>
<ul>
<li><strong>获取最后一个li元素</strong></li>
</ul>
<p>​            <strong>$(‘ul li:last’).css(‘color’, ‘red’);</strong></p>
<ul>
<li><strong>获取第三个li元素</strong></li>
</ul>
<p>​            <strong>$(‘ul li:eq(2)’).css(‘color’, ‘blue’);</strong></p>
<ul>
<li><strong>获取奇数li元素</strong></li>
</ul>
<p>​            <strong>$(‘ul li:odd’).css(‘background’, ‘gray’);</strong></p>
<ul>
<li><strong>获取偶数li元素</strong></li>
</ul>
<p>​            <strong>$(‘ul li:even’).css(‘background’, ‘pink’);</strong></p>
<h2 id="关于jQuery’父-子-兄’选择"><a href="#关于jQuery’父-子-兄’选择" class="headerlink" title="关于jQuery’父,子,兄’选择"></a>关于jQuery’父,子,兄’选择</h2><h3 id="1-父-‘-son’-parent"><a href="#1-父-‘-son’-parent" class="headerlink" title="1.父		$(‘.son’).parent();"></a>1.父		<em>$(‘.son’).parent();</em></h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655435496919-db1f244b-dbe8-4ae4-888c-ae5c4d3a6310.png" alt="img"></p>
<h3 id="2-子-‘-nav’-children-‘p’"><a href="#2-子-‘-nav’-children-‘p’" class="headerlink" title="2.子  	$(‘.nav’).children(‘p’)"></a>2.子  	$(‘.nav’).children(‘p’)</h3><p>(1) 亲儿子 children( )			<strong>类似于子代选择器 ul&gt;li</strong></p>
<p>​            $(‘.nav’).children(‘p’).css(‘color’, ‘red’);</p>
<p>(2) 可以选择所有后代 包括儿子孙子find( )		<strong>类似于后代选择器</strong></p>
<p>​            $(‘.nav’).find(‘p’).css(‘background’, ‘gray’);</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655435657767-0d0f130c-13a3-420d-8ab8-21756a224071.png" alt="img"></p>
<h3 id="3-兄"><a href="#3-兄" class="headerlink" title="3.兄"></a>3.兄</h3><p>(1)siblings( )			除了自身元素之外的所有亲兄弟</p>
<p>​            $(‘ol .item’).siblings(‘li’).css(‘color’, ‘red’);</p>
<p>(2)nextAll( )			当前元素之后所有同辈元素</p>
<p>​            $(‘ol .item’).nextAll(‘li’).css(‘background’, ‘gray’);</p>
<p>(3)prevAll( ) 			当前元素之前所有同辈元素</p>
<p>​            $(‘ol .item’).prevAll(‘li’).css(‘background’, ‘gray’);</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655435861596-5290592b-00c5-42a0-ad6c-c0b72f8bebbf.png" alt="img"></p>
<p>(4)eq 第几个元素</p>
<p>​            $(‘ol li:eq(2)’).css(‘font-weight’, ‘900’)</p>
<p>(5)利用选择方法的方式选择 推荐此方法</p>
<p>​            $(‘ul li’).eq(2).css(‘color’, ‘red’);</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655436008036-56096940-6122-4d18-a009-5d914d4f6e3e.png" alt="img"></p>
<h1 id="关于jQuery隐式迭代"><a href="#关于jQuery隐式迭代" class="headerlink" title="关于jQuery隐式迭代"></a>关于jQuery隐式迭代</h1><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655436098193-e2fc708e-016e-43e4-b75b-d69bff520ecc.png" alt="img"></p>
<p><strong>jQuery对元素集合的操作不需要再利用for循环</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./jQuery-min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>演示文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>演示文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>演示文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>演示文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>相同操作<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>相同操作<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>相同操作<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.获取四个div元素</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;div&#x27;</span>); <span class="comment">// 伪数组形式储存</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;div&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.给四个div设置背景颜色 jQuery不能使用style方法</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.隐式迭代</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 遍历内部的DOM元素(伪数组形式储存)的过程叫做隐式迭代</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;ul li&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="排他思想案例"><a href="#排他思想案例" class="headerlink" title="排他思想案例"></a>排他思想案例</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655436251283-a24f09e8-06b9-4c5e-8c79-4e73827ae406.png" alt="img"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./jQuery-min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1.隐式迭代,给所有按钮绑定点击事件</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 2.当前元素变化背景颜色</span></span></span><br><span class="line"><span class="language-javascript">                $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 3.其余兄弟去掉背景颜色 隐式迭代</span></span></span><br><span class="line"><span class="language-javascript">                $(<span class="variable language_">this</span>).<span class="title function_">siblings</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="淘宝精品服饰案例-index-获取数组索引方法"><a href="#淘宝精品服饰案例-index-获取数组索引方法" class="headerlink" title="淘宝精品服饰案例    index()获取数组索引方法"></a>淘宝精品服饰案例    <em>index()获取数组索引方法</em></h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655436549904-d7415874-ef08-4096-a568-229b30d86fce.png" alt="img"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./jQuery-min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.wrapper</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.wrapper</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">33.3%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.wrapper</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.wrapper</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">83px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#content</span> <span class="selector-tag">div</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:first</span>-child) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../img/图片/cs (1).webp&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../img/图片/cs (2).webp&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../img/图片/cs (3).webp&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1.鼠标经过li</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#left li&#x27;</span>).<span class="title function_">mouseover</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 2.得到当前li的索引号</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> index = $(<span class="variable language_">this</span>).<span class="title function_">index</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 3.让右侧盒子相应索引号盒子显示</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// $(&#x27;#content div&#x27;).eq(index).show();</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 4.让其余的图片(就是其他的兄弟)隐藏</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// $(&#x27;#content div&#x27;).eq(index).siblings().hide();</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 链式编程</span></span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&#x27;#content div&#x27;</span>).<span class="title function_">eq</span>(index).<span class="title function_">show</span>().<span class="title function_">siblings</span>().<span class="title function_">hide</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h1><p>为了使代码更加简洁，推崇使用链式编程思想</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1.隐式迭代,给所有按钮绑定点击事件</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 2.当前元素变化背景颜色</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// $(this).css(&#x27;background&#x27;, &#x27;pink&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 3.其余兄弟去掉背景颜色 隐式迭代</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// $(this).siblings(&#x27;button&#x27;).css(&#x27;background&#x27;, &#x27;&#x27;);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 链式编程</span></span></span><br><span class="line"><span class="language-javascript">                $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>).<span class="title function_">siblings</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="修改css样式"><a href="#修改css样式" class="headerlink" title="修改css样式"></a>修改css样式</h1><h2 id="通过-css-方法修改"><a href="#通过-css-方法修改" class="headerlink" title="通过.css({})方法修改"></a>通过.css({})方法修改</h2><ol>
<li><p>修改样式逗号隔开,引号引入,当值为数字可以不加引号</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;width&#x27;</span>, <span class="string">&#x27;300px&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>以对象的形式修改可以不加引号</p>
<ul>
<li>数字可以不用加引号</li>
<li>组合属性采取驼峰命名法</li>
<li>值不为数字就需要加引号</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">css</span>(&#123;</span><br><span class="line">    <span class="comment">// 数字可以不用加引号</span></span><br><span class="line">    <span class="attr">width</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="comment">// 组合属性采取驼峰命名法</span></span><br><span class="line">    <span class="comment">// 值不为数字就需要加引号</span></span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&#x27;red&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="设置类名方法"><a href="#设置类名方法" class="headerlink" title="设置类名方法"></a>设置类名方法</h2><p>1.添加类 <strong>addClass()</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	$(<span class="variable language_">this</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;current&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>2.删除类 <strong>removeClass()</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	$(<span class="variable language_">this</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;current&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>3.切换类 <strong>toggleClass()</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	$(<span class="variable language_">this</span>).<span class="title function_">toggleClass</span>(<span class="string">&#x27;current&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="使用jQuery的动态效果"><a href="#使用jQuery的动态效果" class="headerlink" title="使用jQuery的动态效果"></a>使用jQuery的动态效果</h1><h2 id="显示与隐藏"><a href="#显示与隐藏" class="headerlink" title="显示与隐藏"></a>显示与隐藏</h2><ul>
<li>show([时间]，[function(){}])   	<strong>显示</strong></li>
<li>hide([时间]，[function(){}])         <strong>隐藏</strong></li>
<li>toggle([时间]，[function(){}])      <strong>切换</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 显示</span></span><br><span class="line">    $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">show</span>(<span class="number">1000</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//隐藏</span></span><br><span class="line">    $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">hide</span>(<span class="number">1000</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//切换</span></span><br><span class="line">    $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">toggle</span>(<span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h2><ul>
<li>slideDown([时间]，[function(){}]);</li>
<li>slideUp([时间]，[function(){}]);</li>
<li>slideToggle([时间]，[function(){}]);</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 下滑动 slideDown()</span></span><br><span class="line">        $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">slideDown</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 上滑动 slideUp()</span></span><br><span class="line">        $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">slideUp</span>(<span class="number">500</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 滑动切换 slideToggle()</span></span><br><span class="line">        $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">slideToggle</span>(<span class="number">500</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="渐入渐出"><a href="#渐入渐出" class="headerlink" title="渐入渐出"></a>渐入渐出</h2><ul>
<li>fadeIn([时间]，[function(){}]);</li>
<li>fadeOut([时间]，[function(){}]);</li>
<li>fadeToggle([时间]，[function(){}]);</li>
<li>fadeTo([时间]，[透明度]，[function(){}]);</li>
</ul>
<h2 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h2><ul>
<li>animate([{ css属性 }]，[时间]);</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line">            <span class="attr">left</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">top</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">opacity</span>: <span class="number">0.5</span>,</span><br><span class="line">            <span class="attr">width</span>: <span class="number">500</span>,</span><br><span class="line">        &#125;, <span class="number">200</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="停止排队"><a href="#停止排队" class="headerlink" title="停止排队"></a>停止排队</h2><p>在编写动画相关的事件触发时，会遇到一个bug，当多次触发事件时，事件会发生累积堆叠。造成鬼畜。通过<code>stop()</code>可以解决此bug</p>
<ul>
<li>mouseover   鼠标经过</li>
<li>mouseout   鼠标离开</li>
<li>hover           就是鼠标经过离开的复合写法<ul>
<li><em>事件切换hover如果只写一个函数,那么鼠标经过和鼠标离开都会触发这个函数</em></li>
</ul>
</li>
</ul>
<p><strong>stop()方法必须写在动画前面</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./jQuery-min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.nav</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* background-color: gray; */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.nav</span>&gt;<span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.nav</span>&gt;<span class="selector-tag">li</span>&gt;<span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* background-color: aquamarine; */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* border: 1px solid gray; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: <span class="number">900</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.nav</span>&gt;<span class="selector-tag">li</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid gray;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.nav</span>&gt;<span class="selector-tag">li</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.nav</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>私信<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>@我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>私信<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>@我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>私信<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>@我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>私信<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>@我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// mouseover鼠标经过</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// $(&#x27;.nav&gt;li&#x27;).mouseover(function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     // $(this) jQuery 当前元素 this不加引号</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     // show() 显示元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     $(this).children(&#x27;ul&#x27;).slideDown(200);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// // 鼠标离开</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// $(&#x27;.nav&gt;li&#x27;).mouseout(function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     // hide() 隐藏元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     $(this).children(&#x27;ul&#x27;).slideUp(200);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 写法1.事件切换 hover 就是鼠标经过离开的复合写法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//$(&#x27;.nav&gt;li&#x27;).hover(function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">             <span class="comment">//   $(this).children(&#x27;ul&#x27;).slideDown(200);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//&#125;, function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">               <span class="comment">// $(this).children(&#x27;ul&#x27;).slideUp(200);</span></span></span><br><span class="line"><span class="language-javascript">           <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 写法2.事件切换hover如果只写一个函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//   那么鼠标经过和鼠标离开都会触发这个函数</span></span></span><br><span class="line"><span class="language-javascript">             $(<span class="string">&#x27;.nav&gt;li&#x27;</span>).<span class="title function_">hover</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                 <span class="comment">// stop()方法必须写在动画前面</span></span></span><br><span class="line"><span class="language-javascript">                 $(<span class="variable language_">this</span>).<span class="title function_">children</span>(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">stop</span>().<span class="title function_">slideToggle</span>(<span class="number">200</span>);</span></span><br><span class="line"><span class="language-javascript">             &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="使用jQuery的属性操作"><a href="#使用jQuery的属性操作" class="headerlink" title="使用jQuery的属性操作"></a>使用jQuery的属性操作</h1><h2 id="1-element-prop-‘属性名’-获取元素固有属性值"><a href="#1-element-prop-‘属性名’-获取元素固有属性值" class="headerlink" title="1.element.prop(‘属性名’)获取元素固有属性值"></a>1.element.prop(‘属性名’)获取元素固有属性值</h2><p>element.prop(‘属性名’，{值})</p>
<p>不仅可以获取元素固有属性值，也可以设置元素固有属性值</p>
<h2 id="2-元素自定义属性attr"><a href="#2-元素自定义属性attr" class="headerlink" title="2.元素自定义属性attr()"></a>2.元素自定义属性attr()</h2><p>element.attr(‘属性名’，{值})</p>
<h2 id="3-数据缓存data"><a href="#3-数据缓存data" class="headerlink" title="3.数据缓存data()"></a>3.数据缓存data()</h2><p>这个里面的数据是存放在元素的内存里 <em>不会显示在标签上</em></p>
<p>element.data(‘属性名’，{值});</p>
<p>这个方法获取data-index h5自定义属性 第一个不用写data- 而且返回的是数字型</p>
<h1 id="使用jQuery更改文本内容"><a href="#使用jQuery更改文本内容" class="headerlink" title="使用jQuery更改文本内容"></a>使用jQuery更改文本内容</h1><h2 id="1-获取设置元素内容-html"><a href="#1-获取设置元素内容-html" class="headerlink" title="1.获取设置元素内容 html()"></a>1.获取设置元素内容 html()</h2><p><em>相当于原生innerHTML</em></p>
<p>.html({值});</p>
<h2 id="2-获取设置元素文本内容-text"><a href="#2-获取设置元素文本内容-text" class="headerlink" title="2.获取设置元素文本内容 text()"></a>2.获取设置元素文本内容 text()</h2><p><em>相当于原生 innerText</em></p>
<p>.text({值});</p>
<h2 id="3-获取设置表单值-val"><a href="#3-获取设置表单值-val" class="headerlink" title="3.获取设置表单值 val()"></a>3.获取设置表单值 val()</h2><p>.val({值});</p>
<h1 id="关于jQuery遍历方法"><a href="#关于jQuery遍历方法" class="headerlink" title="关于jQuery遍历方法"></a>关于jQuery遍历方法</h1><h2 id="1-each-方法遍历元素"><a href="#1-each-方法遍历元素" class="headerlink" title="1.each() 方法遍历元素"></a>1.each() 方法遍历元素</h2><p>each(	function([index，domEle]){}	)</p>
<ul>
<li>回调函数第一个参数一定是索引号 可以自己指定index索引号名称</li>
<li>回调函数第二个参数一定是DOM元素</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">index, domEle</span>) &#123;</span><br><span class="line">    <span class="comment">// 回调函数第一个参数一定是索引号 可以自己指定index索引号名称</span></span><br><span class="line">    <span class="comment">// console.log(index);</span></span><br><span class="line">    <span class="comment">// 回调函数第二个参数一定是DOM元素</span></span><br><span class="line">    <span class="comment">// console.log(domEle);</span></span><br><span class="line">    <span class="comment">// domEle.css(&#x27;color&#x27;); dom对象没有css方法</span></span><br><span class="line">    <span class="comment">// $(domEle)转换为jQuery对象</span></span><br><span class="line">    $(domEle).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, arr[index]);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2-each-方法遍历元素"><a href="#2-each-方法遍历元素" class="headerlink" title="2.$.each() 方法遍历元素"></a>2.$.each() 方法遍历元素</h2><p> 主要用于遍历数据,处理数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$.<span class="title function_">each</span>($(<span class="string">&#x27;div&#x27;</span>), <span class="keyword">function</span>(<span class="params">i, ele</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ele);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line"> $.<span class="title function_">each</span>(arr, <span class="keyword">function</span>(<span class="params">i, ele</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(ele);</span><br><span class="line"> &#125;)</span><br><span class="line"><span class="comment">// 遍历对象</span></span><br><span class="line">$.<span class="title function_">each</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">i, ele</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 输出: name age 属性名</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ele); <span class="comment">// 输出: andy 18 属性值</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="使用jQuery创建添加删除元素"><a href="#使用jQuery创建添加删除元素" class="headerlink" title="使用jQuery创建添加删除元素"></a>使用jQuery创建添加删除元素</h1><h2 id="1-创建元素"><a href="#1-创建元素" class="headerlink" title="1.创建元素"></a>1.创建元素</h2><blockquote>
<p><code>var li = $(&#39;&lt;li&gt;我是后来li&lt;/li&gt;&#39;);</code></p>
</blockquote>
<h2 id="2-添加元素"><a href="#2-添加元素" class="headerlink" title="2.添加元素"></a>2.添加元素</h2><h3 id="内部添加"><a href="#内部添加" class="headerlink" title="内部添加"></a>内部添加</h3><p>在指定元素内部添加新元素</p>
<ul>
<li>$(‘ul’).prepend(li);                  内部添加且放到内容最<em>前面</em></li>
<li>$(‘ul’).append(li);                    内部添加且放到内容最<em>后面</em></li>
</ul>
<h3 id="外部添加"><a href="#外部添加" class="headerlink" title="外部添加"></a>外部添加</h3><p>在指定元素的上面或者下面添加新的元素</p>
<ul>
<li><p>$(‘.test’).after(div);                        放到后面</p>
</li>
<li><p>$(‘.test’).before(div);                     放到前面</p>
</li>
</ul>
<h2 id="3-删除元素"><a href="#3-删除元素" class="headerlink" title="3.删除元素"></a>3.删除元素</h2><p>删除指定元素或者其子元素</p>
<ul>
<li>$(‘ul’).remove();                           可以删除匹配的元素 自杀<ul>
<li>删除自身以及自己的子元素</li>
</ul>
</li>
<li>$(‘ul’).empty();                             可以删除匹配元素的子节点 孩子删除<ul>
<li>只删除自己的子元素</li>
</ul>
</li>
<li>$(‘ul’).html(‘ ‘);                              可以删除匹配元素的子节点 孩子删除 同上<ul>
<li>同上</li>
</ul>
</li>
</ul>
<h1 id="关于jQuery尺寸方法"><a href="#关于jQuery尺寸方法" class="headerlink" title="关于jQuery尺寸方法"></a>关于jQuery尺寸方法</h1><blockquote>
<p>（     ）       为空返回原始大小<br>（数值）    含有值就改变</p>
</blockquote>
<ul>
<li><p>width() &#x2F; height() </p>
<ul>
<li>获取设置元素 width和height大小</li>
</ul>
</li>
<li><p>innerWidth() &#x2F; innerHeight() </p>
<ul>
<li>获取设置元素width和height + padding 大小</li>
</ul>
</li>
<li><p>outerWidth() &#x2F; outerHeight() </p>
<ul>
<li>获取设 置元素width和height + padding + border大小</li>
</ul>
</li>
<li><p>outerwidth(true) &#x2F; outerHeight(true) </p>
<ul>
<li>获取设置width和height + padding + border + margin</li>
</ul>
</li>
</ul>
<h1 id="关于jQuery位置和被卷去方法"><a href="#关于jQuery位置和被卷去方法" class="headerlink" title="关于jQuery位置和被卷去方法"></a>关于jQuery位置和被卷去方法</h1><h2 id="位置属性"><a href="#位置属性" class="headerlink" title="位置属性"></a>位置属性</h2><p>1.获取&#x2F;设置距离文档的位置(偏移) offset</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">         <span class="comment">// 获取👇</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;.son&#x27;</span>).<span class="title function_">offset</span>());</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;.son&#x27;</span>).<span class="title function_">offset</span>().<span class="property">top</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置👇</span></span><br><span class="line">         <span class="comment">// $(&#x27;.son&#x27;).offset(&#123;</span></span><br><span class="line">         <span class="comment">//     top: 200,</span></span><br><span class="line">         <span class="comment">//     left: 200,</span></span><br><span class="line">         <span class="comment">// &#125;);</span></span><br></pre></td></tr></table></figure>

<p>2.获取(不能设置)距离带有定位父级位置(偏移) position 如果没有带有定位的父级，则以文档为准</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;.son&#x27;</span>).<span class="title function_">position</span>());</span><br></pre></td></tr></table></figure>

<h2 id="被卷去的部分"><a href="#被卷去的部分" class="headerlink" title="被卷去的部分"></a>被卷去的部分</h2><ul>
<li><p>被卷去的头部<strong>scrollTop(   )</strong></p>
</li>
<li><p>被卷去的左侧<strong>scrollLeft(   )</strong></p>
</li>
</ul>
<h1 id="事件处理on-x2F-off"><a href="#事件处理on-x2F-off" class="headerlink" title="事件处理on()&#x2F;off()"></a>事件处理on()&#x2F;off()</h1><h2 id="on"><a href="#on" class="headerlink" title="on()"></a>on()</h2><h3 id="on绑定多个事件"><a href="#on绑定多个事件" class="headerlink" title="on绑定多个事件"></a>on绑定多个事件</h3><p>对一个元素绑定事件需要点多次，非常繁琐，使用on（）方法就可以对一个元素进行多个事件绑定，非常银杏化。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">on</span>(&#123;</span><br><span class="line">    <span class="attr">mouseenter</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;skyblue&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">click</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;black&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mouseleave</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="on可以实现事件委托-委派"><a href="#on可以实现事件委托-委派" class="headerlink" title="on可以实现事件委托(委派)"></a>on可以实现事件委托(委派)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;li&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">11</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// click 是绑定在ul身上的,但是触发的对象是ul里面的li</span></span><br></pre></td></tr></table></figure>

<h3 id="on可以给未来动态创建的元素绑定事件"><a href="#on可以给未来动态创建的元素绑定事件" class="headerlink" title="on可以给未来动态创建的元素绑定事件"></a>on可以给未来动态创建的元素绑定事件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;ol&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;li&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">11</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> li = $(<span class="string">&quot;&lt;li&gt;我是后来创建的&lt;/li&gt;&quot;</span>);</span><br><span class="line">$(<span class="string">&#x27;ol&#x27;</span>).<span class="title function_">append</span>(li);</span><br></pre></td></tr></table></figure>

<ul>
<li>因为li是后来创建的,用原始方法绑定事件无法触发</li>
<li>可以通过on给父级ol绑定事件,这样后来生成的li就有了<strong>click</strong>事件</li>
</ul>
<h2 id="off"><a href="#off" class="headerlink" title="off()"></a>off()</h2><h3 id="1-事件绑定off"><a href="#1-事件绑定off" class="headerlink" title="1.事件绑定off"></a>1.事件绑定off</h3><p>off()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//$(&#x27;div&#x27;).off(); //这个是解除了div身上的所有事件</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">off</span>(<span class="string">&#x27;click&#x27;</span>); <span class="comment">//只接触点击事件 </span></span><br><span class="line">$(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">off</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;li&#x27;</span>); <span class="comment">//事件委托解除</span></span><br></pre></td></tr></table></figure>

<h3 id="2-只触发一次时间"><a href="#2-只触发一次时间" class="headerlink" title="2.只触发一次时间"></a>2.只触发一次时间</h3><p>one()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">one</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="number">22</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="自动触发"><a href="#自动触发" class="headerlink" title="自动触发"></a>自动触发</h1><h2 id="1-元素-click"><a href="#1-元素-click" class="headerlink" title="1.元素.click()"></a>1.元素.click()</h2><p><code>$(&#39;div&#39;).click();</code></p>
<h2 id="2-元素-trigger-‘事件’"><a href="#2-元素-trigger-‘事件’" class="headerlink" title="2.元素.trigger(‘事件’)"></a>2.元素.trigger(‘事件’)</h2><p><code>$(&#39;div&#39;).trigger(&#39;click&#39;);</code></p>
<h2 id="3-元素-triggerHandler-‘事件’"><a href="#3-元素-triggerHandler-‘事件’" class="headerlink" title="3.元素.triggerHandler(‘事件’)"></a>3.元素.triggerHandler(‘事件’)</h2><p>不会触发元素默认行为</p>
<p>比如说，如果点击元素表单，则不会触发表单的光标</p>
<h1 id="关于jQuery事件对象"><a href="#关于jQuery事件对象" class="headerlink" title="关于jQuery事件对象"></a>关于jQuery事件对象</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了document&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(event);</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了div&#x27;</span>);</span><br><span class="line">        <span class="comment">// event.stopPropagation()停止冒泡</span></span><br><span class="line">        event.<span class="title function_">stopPropagation</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="使用jQuery对象拷贝"><a href="#使用jQuery对象拷贝" class="headerlink" title="使用jQuery对象拷贝"></a>使用jQuery对象拷贝</h1><h2 id="1-浅拷贝"><a href="#1-浅拷贝" class="headerlink" title="1. 浅拷贝"></a>1. 浅拷贝</h2><p>把原来对象里面的复杂数据类型地址拷贝给目标对象</p>
<p><strong>$.extend([拷贝的对象],[被拷贝的对象]);</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> targetObj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">$.<span class="title function_">extend</span>(targetObj, obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(targetObj);</span><br></pre></td></tr></table></figure>

<p><strong>如果被拷贝的对象中有相同的属性值：</strong></p>
<p><em>如果原先有属性 那么拷贝的属性就会</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> targetObj = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">$.<span class="title function_">extend</span>(targetObj, obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(targetObj); <span class="comment">//覆盖掉原先的数据</span></span><br></pre></td></tr></table></figure>

<h2 id="2-深拷贝"><a href="#2-深拷贝" class="headerlink" title="2.深拷贝"></a>2.深拷贝</h2><p><strong>$.extend(true，[拷贝的对象]，[被拷贝的对象]);</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> targetObj = &#123;</span><br><span class="line">              <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">              <span class="attr">msg</span>: &#123;</span><br><span class="line">                  <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;;</span><br><span class="line">          <span class="keyword">var</span> obj = &#123;</span><br><span class="line">              <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">              <span class="attr">msg</span>: &#123; <span class="comment">//拷贝的只是地址</span></span><br><span class="line">                  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;;</span><br><span class="line">          $.<span class="title function_">extend</span>(<span class="literal">true</span>, targetObj, obj);</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(targetObj);</span><br><span class="line">          targetObj.<span class="property">msg</span>.<span class="property">age</span> = <span class="number">20</span>; <span class="comment">//修改也不会有影响</span></span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(targetObj); <span class="comment">//msg:&#123;sex:&#x27;男&#x27;,age:20&#125;</span></span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure>

<h1 id="多库共存"><a href="#多库共存" class="headerlink" title="多库共存"></a>多库共存</h1><p>其实$()是jQuery自己封装的一个函数方法，可以通过 <code>var suibian = jQuery.noConflict();</code>来改变$符号</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 自己封装的$函数 类比为其他库的$</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">$</span>(<span class="params">ele</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(ele);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;div&#x27;</span>));</span><br><span class="line">    <span class="comment">// 1.改用jQuery不用$</span></span><br><span class="line">    jQuery.<span class="title function_">each</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.自己定义一个变量 suibian(&#x27;div&#x27;) = $(&#x27;div&#x27;)</span></span><br><span class="line">    <span class="keyword">var</span> suibian = jQuery.<span class="title function_">noConflict</span>();</span><br><span class="line">    <span class="title function_">suibian</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">suibian</span>(<span class="string">&#x27;span&#x27;</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>认识jQuery框架</tag>
      </tags>
  </entry>
  <entry>
    <title>简单的node爬虫</title>
    <url>/found404.io/2022/07/07/%E5%85%B3%E4%BA%8Enode%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h1 id="编写一个简单的Node爬虫"><a href="#编写一个简单的Node爬虫" class="headerlink" title="编写一个简单的Node爬虫"></a>编写一个简单的Node爬虫</h1><h2 id="关于爬虫"><a href="#关于爬虫" class="headerlink" title="关于爬虫"></a>关于爬虫</h2><p>爬虫就是模拟用户浏览网站的行为。获取你要爬取页面的html源码。通过cheerio工具模块解析获取到的源码。cheerio跟jQuery原理一样，jQuery的API基本都可用。这是最基本的原理，但是只针对一些反爬措施不怎么强的网站。😢。</p>
<blockquote>
<p>爬虫编写的样式千奇百怪，但是背后的逻辑都是一样的</p>
</blockquote>
<span id="more"></span>

<h2 id="下载模块化工具"><a href="#下载模块化工具" class="headerlink" title="下载模块化工具"></a>下载模块化工具</h2><ol>
<li>新建一个文件夹</li>
<li>在当前文件夹下执行终端命令<code>npm init -y</code>创建配置文件</li>
<li>下载相应的模块化工具<code>npm i cheerio</code>,此时会自动生成一个<code>node_modules</code>文件</li>
<li><code>node_modules</code>文件下存放的是你所下载的模块化工具</li>
</ol>
<blockquote>
<p>注意：🤞下载node.js，配置好环境变量，如果网络不佳切换镜像(切换方法参考node.js文章)🤞</p>
</blockquote>
<h2 id="编写一个简单的爬虫脚本"><a href="#编写一个简单的爬虫脚本" class="headerlink" title="编写一个简单的爬虫脚本"></a>编写一个简单的爬虫脚本</h2><h3 id="1-导入需要的的模块"><a href="#1-导入需要的的模块" class="headerlink" title="1.导入需要的的模块"></a>1.导入需要的的模块</h3><blockquote>
<p>新建<code>index.js</code>文件夹</p>
<p>除了cheerio其他的https和fa路径模块都是node内置的模块</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入http模块</span></span><br><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入路径模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入cheerio工具解析模块</span></span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-使用https模块发送请求"><a href="#2-使用https模块发送请求" class="headerlink" title="2.使用https模块发送请求"></a>2.使用https模块发送请求</h3><blockquote>
<p>这里使用豆瓣的url地址</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> req = https.<span class="title function_">request</span>(<span class="string">&#x27;https://movie.douban.com/chart&#x27;</span>, <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> html = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    res.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">chunk</span> =&gt;</span> &#123;</span><br><span class="line">        html += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 结束数据监听后将所有内容拼接存放进html</span></span><br><span class="line">        <span class="keyword">let</span> $ = cheerio.<span class="title function_">load</span>(html);</span><br><span class="line">        <span class="keyword">let</span> text = [];</span><br><span class="line">        <span class="comment">// 将筛选的内容存放到text数组</span></span><br><span class="line">        $(<span class="string">&#x27;.article .indent .item&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">i, ele</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> imgs = $(<span class="string">&#x27;.nbg img&#x27;</span>, <span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>);</span><br><span class="line">            text.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">pic</span>: imgs</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="title function_">downloadImg</span>(text);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="分支解析"><a href="#分支解析" class="headerlink" title="分支解析"></a>分支解析</h4><p>将目标url的页面通过字符串形式拼接并交给html</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220707150801513.png" alt="image-20220707150801513"></p>
<p>在数据监听结束后使用cheerio工具解析模块将得到的页面筛选，并存入到text数组中</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220718104439830.png" alt="image-20220718104439830"></p>
<h3 id="3-编写下载方法"><a href="#3-编写下载方法" class="headerlink" title="3.编写下载方法"></a>3.编写下载方法</h3><p>循环得到的存放地址的text数组，将每个数组中的pic属性赋值给picUrl变量接收，使用https的get方法读取picUrl，字符串拼接并以二进制存放，<code>res.setEncoding(&#39;binary&#39;);</code></p>
<blockquote>
<p>注：也可以使用download工具下载，具体用法见官方文档<a href="https://www.npmjs.com/package/download">download npm 官方网站</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编写下载方法</span></span><br><span class="line"><span class="comment">// 将获取过来的数据进行下载</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">downloadImg</span>(<span class="params">allFilms</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allFilms.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 获取每个对象的url地址给picUrl</span></span><br><span class="line">        <span class="keyword">const</span> picUrl = allFilms[i].<span class="property">pic</span>;</span><br><span class="line">        https.<span class="title function_">get</span>(picUrl, <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="comment">// 读取picUrl写入到本地</span></span><br><span class="line">            <span class="comment">// 设置二进制存放</span></span><br><span class="line">            res.<span class="title function_">setEncoding</span>(<span class="string">&#x27;binary&#x27;</span>);</span><br><span class="line">            <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            res.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span>(<span class="params">chunk</span>) &#123;</span><br><span class="line">                str += chunk;</span><br><span class="line">            &#125;);</span><br><span class="line">            res.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">// 写入模块</span></span><br><span class="line">                <span class="comment">// 创建images文件夹</span></span><br><span class="line">                fs.<span class="title function_">mkdir</span>(<span class="string">&#x27;./images&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;imgages文件写入成功！&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="comment">// 往images文件中写入图片文件</span></span><br><span class="line">                <span class="comment">// str, &#x27;binary&#x27; 将str转换为二进制存放</span></span><br><span class="line">                fs.<span class="title function_">writeFile</span>(<span class="string">`./images/<span class="subst">$&#123;i&#125;</span>.png`</span>, str, <span class="string">&#x27;binary&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`第<span class="subst">$&#123;i&#125;</span>张图片下载成功`</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>将读取的url以字符串型形式拼接，并在数据读写完毕后，使用fs路径模块，将数据下载到指定文件夹下。</p>
<h3 id="4-结束请求"><a href="#4-结束请求" class="headerlink" title="4.结束请求"></a>4.结束请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结束请求</span></span><br><span class="line">req.<span class="title function_">end</span>();</span><br></pre></td></tr></table></figure>

<h3 id="5-执行脚本"><a href="#5-执行脚本" class="headerlink" title="5.执行脚本"></a>5.执行脚本</h3><p>在终端使用<code>node &#39;你js文件名字&#39;</code>指令，例如：<code>node index.js</code></p>
<h2 id="工程已上传gitee"><a href="#工程已上传gitee" class="headerlink" title="工程已上传gitee"></a>工程已上传gitee</h2><p>在工程文件中使用<code>git clone git@gitee.com:bl_ack233/watercress-reptile.git</code>指令将文件克隆下载。</p>
<blockquote>
<p>前提是有git，下载地址<a href="https://www.baidu.com/link?url=X5l38lG20iLR-7YnWC3veGGbD50L6Z_PNWoa-NZLmmy&wd=&eqid=b2fc5a7a002867d50000000262cc0709">git官网</a> (大概率被墙)</p>
</blockquote>
<h2 id="爬虫Pro版本Puppeteer"><a href="#爬虫Pro版本Puppeteer" class="headerlink" title="爬虫Pro版本Puppeteer"></a>爬虫Pro版本Puppeteer</h2><p><strong>Puppeteer</strong>是一个Node库，由Chrome官方团队进行维护，提供接口来控制headless Chrome。Headless Chrome是一种不使用Chrome来运行Chrome浏览器的方式。简单的来说就是一个运行在命令行中的 chrome,我们可以通过代码来实现我们常规的浏览器浏览网页的功能。<a href="https://blog.csdn.net/jessicaiu/article/details/82864001">原文链接</a></p>
<blockquote>
<p>就是使用代码模拟人的操作来浏览页面</p>
<p><a href="https://www.npmjs.com/package/puppeteer">Puppeteer官方文档</a></p>
</blockquote>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>同上下载方式一样，在工程文件下使用终端命令 <code>npm i puppeteer </code></p>
<blockquote>
<p>注意：如果你不想在全局下安装npm包，或者安装到别的地方，就在工程目录下运行指令</p>
</blockquote>
<h4 id="下载中所遇问题"><a href="#下载中所遇问题" class="headerlink" title="下载中所遇问题"></a>下载中所遇问题</h4><p>通常情况下，下载这个包的时候会包含下载chrome的过程，这个阶段常常报错，可以通过指令 <code>npm i --save puppeteer-core</code> 来跳过下载，<a href="https://blog.csdn.net/weixin_34292959/article/details/91451876?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165729112416781683988740%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165729112416781683988740&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-91451876-null-null.142%5Ev32%5Epc_search_result_control_group,185%5Ev2%5Econtrol&utm_term=puppeteer%E4%B8%8B%E8%BD%BD%E5%A4%B1%E8%B4%A5&spm=1018.2226.3001.4187">原帖子</a></p>
<h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入cheerio工具解析模块</span></span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入路径模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置网址</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;https://www.jd.com/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">start</span>(<span class="params">bool</span>) &#123;</span><br><span class="line">    <span class="comment">//启动浏览器,传入headless为false可以打开窗口</span></span><br><span class="line">    <span class="comment">//executablePath为你的谷歌浏览器下载地址</span></span><br><span class="line">    <span class="keyword">const</span> browers = <span class="keyword">await</span> puppeteer.<span class="title function_">launch</span>(&#123;</span><br><span class="line">            <span class="attr">headless</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">executablePath</span>: <span class="string">&#x27;C:/Program Files/Google/Chrome/Application/chrome.exe&#x27;</span></span><br><span class="line">        </span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//启动新页面</span></span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browers.<span class="title function_">newPage</span>()</span><br><span class="line">        <span class="comment">//设置页面打开时的页面宽度高度</span></span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">setViewport</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">1920</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">1080</span>,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开链接网址</span></span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">goto</span>(url)</span><br><span class="line">    <span class="keyword">var</span> content, $</span><br><span class="line">    <span class="keyword">await</span> page.evaluate(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 好多电商类或者其他数据较多的网站都会有懒加载，通过puppeteer内置的滚动事件模拟用户滚动行为</span></span><br><span class="line">        <span class="comment">// 让完整的页面加载出来，这时候获取的页面就是完整的页面</span></span><br><span class="line">        <span class="keyword">var</span> top = <span class="number">0</span></span><br><span class="line">            <span class="comment">//每200毫秒滚动100px</span></span><br><span class="line">        <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">scrollY</span>);</span><br><span class="line">            <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, top += <span class="number">100</span>)</span><br><span class="line">        &#125;, <span class="number">200</span>);</span><br><span class="line">        <span class="comment">//15秒后清除定时器并开始获取内容</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(timer);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> box = $(<span class="string">&#x27;.more2_item&#x27;</span>)</span><br><span class="line">                <span class="comment">// console.log(box);</span></span><br><span class="line">            <span class="keyword">let</span> <span class="title class_">List</span> = []</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; box.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">let</span> e = box.<span class="title function_">eq</span>(i)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">                <span class="keyword">let</span> title;</span><br><span class="line">                <span class="keyword">let</span> obj = &#123;</span><br><span class="line">                    <span class="attr">title</span>: $(e).<span class="title function_">find</span>(<span class="string">&#x27;.more2_info_name&#x27;</span>).<span class="title function_">text</span>(),</span><br><span class="line">                    <span class="attr">src</span>: $(e).<span class="title function_">find</span>(<span class="string">&#x27;.lazyimg_img&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">                    <span class="attr">price</span>: $(e).<span class="title function_">find</span>(<span class="string">&#x27;.more2_info_price_txt&#x27;</span>).<span class="title function_">text</span>(),</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="title class_">List</span>.<span class="title function_">push</span>(obj);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">List</span>);</span><br><span class="line">            <span class="title class_">List</span> = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title class_">List</span>, <span class="literal">undefined</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="comment">//以下是下载json,创建元素</span></span><br><span class="line">            <span class="keyword">var</span> ele = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            <span class="comment">//设置下载文件名</span></span><br><span class="line">            ele.<span class="property">download</span> = <span class="string">&quot;jingdong.json&quot;</span>;</span><br><span class="line">            <span class="comment">//隐藏元素</span></span><br><span class="line">            ele.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">            <span class="comment">//字符内容转变成blob地址</span></span><br><span class="line">            <span class="keyword">var</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="title class_">List</span>], &#123; <span class="attr">type</span>: <span class="string">&#x27;text/json&#x27;</span> &#125;);</span><br><span class="line">            <span class="comment">//如果是链接，这里也可以直接设置链接地址</span></span><br><span class="line">            ele.<span class="property">href</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(ele);</span><br><span class="line">            <span class="comment">//模拟点击</span></span><br><span class="line">            ele.<span class="title function_">click</span>();</span><br><span class="line">            <span class="comment">//移除元素</span></span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(ele);</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="number">25000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">start</span>(<span class="literal">false</span>)</span><br></pre></td></tr></table></figure>

<ol>
<li>好多电商类或者其他数据较多的网站都会有懒加载，通过Puppeteer内置的滚动事件模拟用户滚动行为。让完整的页面加载出来，这时候获取的页面就是完整的页面.</li>
<li>最终的数据下载，并没有使用fs模块，是因为没法用！尝试过，但是不成功。也许是Puppeteer的原因，这里使用的是HTML5中给a标签增加的一个download属性，原帖子<a href="https://blog.csdn.net/weixin_44870139/article/details/113534295?ops_request_misc=&request_id=&biz_id=102&utm_term=js%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%B9%B6%E4%B8%8B%E8%BD%BD&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-113534295.142%5Ev32%5Epc_search_result_control_group,185%5Ev2%5Econtrol&spm=1018.2226.3001.4187">使用a标签下载文件</a></li>
</ol>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>爬虫</tag>
        <tag>j逆太没</tag>
      </tags>
  </entry>
  <entry>
    <title>关于This</title>
    <url>/found404.io/2022/06/27/%E5%85%B3%E4%BA%8EThis/</url>
    <content><![CDATA[<h1 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h1><p>this指向问题一般情况下this的最终指向的是那个调用它的对象</p>
<h2 id="1-全局作用域或者普通函数中this"><a href="#1-全局作用域或者普通函数中this" class="headerlink" title="1.全局作用域或者普通函数中this"></a>1.全局作用域或者普通函数中this</h2><p>指向全局对象<strong>window</strong>(注意定时器里面的this指向<strong>window</strong>)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// this指向问题一般情况下this的最终指向的是那个调用它的对象</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.全局作用域或者普通函数中this指向全局对象window(注意定时器甲面的this指向window)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//window</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="2-函数中的this"><a href="#2-函数中的this" class="headerlink" title="2.函数中的this"></a>2.函数中的this</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654744499437-6ea6b88a-d412-4772-9064-e590f576ae41.png" alt="img"></p>
<p><strong>注：</strong>匿名函数中的this也同样指向windows</p>
<h2 id="3-定时器中的this"><a href="#3-定时器中的this" class="headerlink" title="3.定时器中的this"></a>3.定时器中的this</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654744551802-255f5ba4-a4a8-42b1-9baf-8d488175c3d1.png" alt="img"></p>
<h2 id="4-对象或者构造函数中的this"><a href="#4-对象或者构造函数中的this" class="headerlink" title="4.对象或者构造函数中的this"></a>4.对象或者构造函数中的this</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">     </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.调用中谁调用this指向谁</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> o = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// this指向的是o这个对象</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    o.<span class="title function_">sayHi</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.构造函数中this指向构造函数的实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">name, age</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//指向fun实例对象</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title function_">fun</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>对象中的<strong>this</strong>指向它本身</li>
<li>构造函数中的<strong>this</strong>指向它这个构造函数</li>
</ul>
<p><em>构造函数中的this因为new的过程使得this指向发生了转移</em></p>
<p><strong>new的整个过程：</strong></p>
<ol>
<li>new会在内存中创建一个新的空对像</li>
<li>new会让this指向这个新对象</li>
<li>执行构造函数中的代码</li>
<li>return这个新对象</li>
</ol>
<h2 id="5-绑定事件中的this"><a href="#5-绑定事件中的this" class="headerlink" title="5.绑定事件中的this"></a>5.绑定事件中的this</h2><p>谁绑定事件<strong>this</strong>就指向谁</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654744731772-a804b07f-d121-4b03-aa9c-57980de6fc8d.png" alt="img"></p>
<h2 id="6-箭头函数this指向特殊性"><a href="#6-箭头函数this指向特殊性" class="headerlink" title="6.箭头函数this指向	特殊性"></a>6.箭头函数this指向	<em>特殊性</em></h2><p>箭头函数的this指向它的父作用域，箭头函数声明在全局作用域下其this指向window，若不在全局作用域下，this指向其父作用域</p>
<p><strong>箭头函数的this永远指向其父作用域，箭头函数没有自己的this</strong></p>
<h3 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654746204921-fab4c532-3bae-4292-9e9d-b5f9d6d75eac.png" alt="img"></p>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1654746238269-01e68480-a644-4ce2-9c57-d94c32499fe0.png" alt="img"></p>
<h1 id="改变this指向方法"><a href="#改变this指向方法" class="headerlink" title="改变this指向方法"></a>改变this指向方法</h1><h2 id="1-call-方法-常用于继承"><a href="#1-call-方法-常用于继承" class="headerlink" title="1.call()方法    常用于继承"></a>1.call()方法    <em>常用于继承</em></h2><p>call(无数个参数);</p>
<ul>
<li>第一个参数：改变this指向</li>
<li>第二个参数：实参</li>
<li>使用之后会自动执行该函数，不适合用在定时器处理函数或者事件处理函数</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655455484583-0d0dd80b-d5c2-4752-9623-fdd9cf6b7e47.png" alt="img"> </p>
<h2 id="2-apply-方法"><a href="#2-apply-方法" class="headerlink" title="2.apply()方法"></a>2.apply()方法</h2><p>apply（两个参数）</p>
<ul>
<li>第一个参数：改变this指向</li>
<li>第二个参数：数组或者伪数组（里面为实参）</li>
<li>特点：使用时候会自动执行函数，不适合用在定时器处理函数或者事件处理函数</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655457205108-985cd7e9-ae97-4743-942d-6a12deb83123.png" alt="img"></p>
<h2 id="3-bind-方法"><a href="#3-bind-方法" class="headerlink" title="3.bind()方法"></a>3.bind()方法</h2><p>bind（无数个参数）</p>
<ul>
<li>第一个参数：改变this指向</li>
<li>第二个参数之后：实参</li>
<li>返回值为一个新的函数</li>
<li>使用的时候需要手动调用下返回的新函数（不会自动执行）</li>
<li>作用：改变事件处理函数或者定时器处理函数的this指向</li>
</ul>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/1655457422671-0e2884fe-92a5-449b-9deb-e42a3cccafab.png" alt="img"></p>
<h2 id="三者区别"><a href="#三者区别" class="headerlink" title="三者区别"></a>三者区别</h2><p><strong>call、apply</strong>与<strong>bind</strong>区别：前两个可以自动执行，<strong>bind</strong>不会自动执行，需要手动调用</p>
<p><strong>call、bind</strong>与<strong>apply</strong>区别：前两个都有无数个参数，<strong>apply</strong>只有两个参数，而且第二个参数为**[数组]**</p>
<h1 id="经典例题🥳"><a href="#经典例题🥳" class="headerlink" title="经典例题🥳"></a>经典例题🥳</h1><h2 id="原型和this"><a href="#原型和this" class="headerlink" title="原型和this"></a>原型和this</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = <span class="number">100</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = <span class="number">200</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getX</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getX</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getY</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> <span class="title class_">Fn</span>();</span><br><span class="line"><span class="keyword">var</span> f2 = <span class="keyword">new</span> <span class="title class_">Fn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="property">getX</span> === f2.<span class="property">getX</span>); <span class="comment">//false  两个对象不能全等</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="property">getY</span> === f2.<span class="property">getY</span>); <span class="comment">//true	 使用的一个构造函数，原型上的方法相同</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="property">__proto__</span>.<span class="property">getY</span> === <span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getY</span>); <span class="comment">//true	对象的原型方法和构造函数的原型方法相同(指向同一个构造函数)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="property">__proto__</span>.<span class="property">getX</span> === f2.<span class="property">getX</span>); <span class="comment">//false	对象原型的方法和对象的方法不相等</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="property">__proto__</span>.<span class="property">getX</span> === <span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getX</span>); <span class="comment">//true	对象的原型方法和构造函数的原型方法相同(指向同一个构造函数)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="property">constructor</span>); <span class="comment">//f  Fn()  构造函数对象的构造方法是FN()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>.<span class="property">constructor</span>); <span class="comment">//空函数	构造函数的原型的构造方法是空函数</span></span><br><span class="line">f1.<span class="title function_">getX</span>(); <span class="comment">//	100	</span></span><br><span class="line">f1.<span class="property">__proto__</span>.<span class="title function_">getX</span>(); <span class="comment">//undefined	  原型上的方法没有给x赋值</span></span><br><span class="line">f2.<span class="title function_">getY</span>(); <span class="comment">//	200  </span></span><br><span class="line"><span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">getY</span>(); <span class="comment">//	undefined	  原型上的方法没有给x赋值</span></span><br></pre></td></tr></table></figure>

<p><strong>解析：</strong></p>
<ol>
<li><p>第一个false，首先要想到的是 简单数据类型的比较是<strong>对值的比较</strong>，他们都是存在在栈空间，所以两个值可以相等。而复杂数据类型的比较大不相同，他们在栈空间存放的是地址，当比较两者时，比较的是地址，所以当两个就算是属性相同方法相同的对象比较时，他们的<strong>存放地址</strong>不同，所以不同。</p>
</li>
<li><p>true的原因调用的是同一个原型上的方法，所以相同。</p>
</li>
<li><p>true，<code>f1.__proto__·</code>指向的是Fn原型，再调用getY方法，这其实就等同于<code>Fn.prototype.getY</code>直接调用方法</p>
</li>
<li><p>false，跟第一个同理，<code>f1.__proto__.getX</code>是原型上的方法，其存放地址与实例化对象f2.getX所指向的对象存放地址不相同。并非值的比较。</p>
</li>
<li><p>true，<code>f1.__proto__.getX === Fn.prototype.getX</code>可以看作<code>Fn.prototype.getX === Fn.prototype.getX</code>两者相同，都是原型上的方法，地址也相同。</p>
</li>
<li><p>实例化对象的constructor指向的是Person，死记。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数Person</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我叫&quot;</span>, <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 验证:实例对象p的constructor属性指向构造函数Person</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">constructor</span> === <span class="title class_">Person</span>); <span class="comment">//true,验证结果正确</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>ƒ Object() &#123; [native code] &#125;</code> Fn.prototype指向的是Fn的原型。Fn原型对象的<code>__proto__</code>指向的是Object对象原型。而Object对象原型的constructor指向的是Object对象，可以参考下图：<img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220702174347263New2.png" alt="image-20220702174347263New2"></p>
</li>
<li><p>100，f1是一个对象，它调用它自身的getX方法，此时的this只想他自己，所以输出100</p>
</li>
<li><p>undefined，<code>f1.__proto__</code>指向的是fn原型，首先原型上本身就没有x，y属性值。其次调用的方法中的this指向调用它的对象</p>
</li>
<li><p>f2调用原型上的方法，谁调用，this就只想谁。所以输出200</p>
</li>
<li><p>跟第9个一样，原型调用自身的方法，this指向自己，没有y值，所以是underfined</p>
</li>
</ol>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/found404.io/2022/07/15/Vue/</url>
    <content><![CDATA[<h1 id="Vue核心"><a href="#Vue核心" class="headerlink" title="Vue核心"></a>Vue核心</h1><h2 id="Vue简介"><a href="#Vue简介" class="headerlink" title="Vue简介"></a>Vue简介</h2><h3 id="什么是VUE"><a href="#什么是VUE" class="headerlink" title="什么是VUE"></a>什么是VUE</h3><blockquote>
<p>Vue是一套用于构建用户界面的渐进式JavaScript框架</p>
<p><a href="https://vuejs.bootcss.com/style-guide/">Vue中文文档</a></p>
<p><a href="https://staging-cn.vuejs.org/">Vue官方文档</a></p>
</blockquote>
<p>什么是渐进式：</p>
<ul>
<li>Vue可以自底向上逐层的应用<ul>
<li>简单的应用：只需要一个轻量小巧的核心库</li>
<li>复杂的应用：可以引入各式各样的Vue插件</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h3 id="谁开发的"><a href="#谁开发的" class="headerlink" title="谁开发的"></a>谁开发的</h3><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220715205307722.png" alt="image-20220715205307722"></p>
<h3 id="Vue的特点"><a href="#Vue的特点" class="headerlink" title="Vue的特点"></a>Vue的特点</h3><ol>
<li>采用组件化模式，提高代码复用率，且让代码更好维护。</li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220715210528567.png" alt="image-20220715210528567"></p>
<ol start="2">
<li>声明式编码。让编码人员无需直接操作DOM。提高开发效率。<br> <img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220715205742913.png" alt="image-20220715205742913"></li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220715205803585.png" alt="image-20220715205803585"></p>
<ol start="3">
<li>使用虚拟DOM+优秀的Diff算法，尽量复用DOM节点。</li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220715210607706.png" alt="image-20220715210607706"></p>
<h3 id="Vue-Devtools"><a href="#Vue-Devtools" class="headerlink" title="Vue Devtools"></a>Vue Devtools</h3><p>在chrome下载Vue扩展程序</p>
<p><a href="https://pan.baidu.com/s/1MtYvMPew4lb14piIrs9x6w">密码:6666</a></p>
<h3 id="导入Vue"><a href="#导入Vue" class="headerlink" title="导入Vue"></a>导入Vue</h3><p>再导入Vue后会出现启动Vue生成的生产提示，可以通过</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 阻止Vue在启动时生成生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<p>关闭提示。</p>
<h2 id="Hello-Vue"><a href="#Hello-Vue" class="headerlink" title="Hello Vue"></a>Hello Vue</h2><h3 id="准备一个容器"><a href="#准备一个容器" class="headerlink" title="准备一个容器"></a>准备一个容器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 准备好一个容器 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 插值语法 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>动态的数据要使用插值语法{{}}</p>
<blockquote>
<p>root容器中的代码被称为<strong>Vue模板</strong></p>
</blockquote>
<h3 id="创建Vue实例"><a href="#创建Vue实例" class="headerlink" title="创建Vue实例"></a>创建Vue实例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 阻止Vue在启动时生成生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 创建Vue实例</span></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">      <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>element</strong>	元素 指定当前Vue实例为哪个容器服务，值通常为css选择器字符串</li>
<li><strong>data</strong>           中用于存储数据，数据共el所指定的容器去使用，值<em>暂时</em>写成一个对象</li>
</ul>
<blockquote>
<p>vue实例也可以不用变量接收</p>
<p>容器和实例一一对应，一个容器对应一个实例，一个实例对应一个容器。</p>
<p>注：当一个容器中有很多动态数据时候，一个实例也可以应付。一个实例下可以存在多个“手下”，这个所谓的手下就是之后的<strong>组件</strong></p>
</blockquote>
<h3 id="区分js表达式和js代码-语句"><a href="#区分js表达式和js代码-语句" class="headerlink" title="区分js表达式和js代码(语句)"></a>区分js表达式和js代码(语句)</h3><h4 id="1-js表达式"><a href="#1-js表达式" class="headerlink" title="1.js表达式"></a>1.js表达式</h4><p>一个表达式会产生一个值。可以放在任何一个需要值的地方：</p>
<ol>
<li>a				    一个a变量</li>
<li>a+b               a变量+b变量</li>
<li>demo(1)       调用demo()函数</li>
<li>etc…</li>
</ol>
<h4 id="2-js代码-语句"><a href="#2-js代码-语句" class="headerlink" title="2.js代码(语句)"></a>2.js代码(语句)</h4><ol>
<li>if(){}</li>
<li>for(){}</li>
<li>etc…</li>
</ol>
<h3 id="容器中的“又称vue模板”"><a href="#容器中的“又称vue模板”" class="headerlink" title="容器中的“又称vue模板”"></a>容器中的{{}}“又称vue模板”</h3><p>在容器中的{{}}插值语法块中。可以存放表达式，并且也可以生效</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 插值语法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,&#123;&#123; name &#125;&#125;,&#123; &#123; age+1 &#125;&#125;,&#123;&#123; 2+2 &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 阻止Vue在启动时生成生产提示</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建Vue实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;.root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;World&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>: <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果：<code>Hello, World,19,4</code></p>
<h4 id="巧妙使用Vue扩展框架"><a href="#巧妙使用Vue扩展框架" class="headerlink" title="巧妙使用Vue扩展框架"></a>巧妙使用Vue扩展框架</h4><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220715223904598.png" alt="image-20220715223904598"></p>
<h2 id="Vue模板语法"><a href="#Vue模板语法" class="headerlink" title="Vue模板语法"></a>Vue模板语法</h2><h3 id="1-插值语法"><a href="#1-插值语法" class="headerlink" title="1.插值语法"></a>1.插值语法</h3><h4 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h4><p>用于解析标签体内容</p>
<blockquote>
<p>标签体就是起始标签和结束标签包裹的东西，例如<code>&lt;h3&gt;你好，&#123;&#123;name&#125;&#125;&lt;/h1&gt;</code></p>
</blockquote>
<h4 id="写法："><a href="#写法：" class="headerlink" title="写法："></a>写法：</h4>{{}}，xxx就是js表达式，且可以直接读取到data中的所有属性

<h3 id="2-指令语法"><a href="#2-指令语法" class="headerlink" title="2.指令语法"></a>2.指令语法</h3><h4 id="功能：-1"><a href="#功能：-1" class="headerlink" title="功能："></a>功能：</h4><p>用于解析标签（包括：标签属性，标签体内容，绑定事件。。。。。。）</p>
<h4 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h4><p><code>v-bind:href=&quot;xxx&quot;</code> 或者 简写为 <code>:href=&quot;xxx&quot; </code>，xxx同样要写js表达式，且可以直接读取到data中的所有属性。</p>
<blockquote>
<p>简单来说就是加了v-bind:的属性后“  ”内的部分会变成表达式</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 插值语法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>插值语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>指令语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;school.url&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;name&quot;</span>&gt;</span>点击跳转&#123;&#123; school.name &#125;&#125;官网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 阻止Vue在启动时生成生产提示</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建Vue实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;.root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">school</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;Vue&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&#x27;https://staging-cn.vuejs.org/guide/introduction.html&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h4><p>Vue中有很多指令，且形式都是v-？？？，此处我们只是拿v-bind举例子</p>
<h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><blockquote>
<p>数据绑定类型分为：</p>
<ul>
<li>单向数据绑定<ul>
<li>改变值，并不会改变data对象中的对应值</li>
</ul>
</li>
<li>双向数据绑定<ul>
<li>改变值，会同时改变data对象中的值</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="双向数据绑定之v-model"><a href="#双向数据绑定之v-model" class="headerlink" title="双向数据绑定之v-model:"></a>双向数据绑定之v-model:</h3><p>之前所学的v-bind:属于单向数据绑定。</p>
<blockquote>
<p>v-model:就属于双向数据绑定</p>
<p>注意：v-model:一般应用在表单类元素（输入类元素）上</p>
<ul>
<li>例如：input，select等</li>
</ul>
</blockquote>
<p><strong>简写：</strong></p>
<p><code>v-model=&#39;name&#39;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line">双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">:value</span>=<span class="string">&#x27;name&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">v-model</span>=<span class="string">&#x27;name&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="data与el的两种写法"><a href="#data与el的两种写法" class="headerlink" title="data与el的两种写法"></a>data与el的两种写法</h3><h4 id="el有两种写法"><a href="#el有两种写法" class="headerlink" title="el有两种写法"></a>el有两种写法</h4><p> <strong>new Vue时候配置el属性</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> v = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="comment">// 1.第一种绑定写法</span></span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;.root&#x27;</span>,    </span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Found&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p> <strong>先创建Vue实例，随后再通过vm.$mount(‘#root’)指定el的值</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> v = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;  </span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Found&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line"><span class="comment">// 2.第二种绑定写法</span></span><br><span class="line">v.$mount(<span class="string">&#x27;.root&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="data有两种写法"><a href="#data有两种写法" class="headerlink" title="data有两种写法"></a>data有两种写法</h4><p><strong>对象式</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;.root&#x27;</span>,</span><br><span class="line">     <span class="comment">// 1.data的第一种写法：对象式</span></span><br><span class="line">     <span class="attr">data</span>: &#123;</span><br><span class="line">         <span class="attr">name</span>: <span class="string">&#x27;FOund&#x27;</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>函数式</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;.root&#x27;</span>,</span><br><span class="line">    <span class="comment">// 2.data的第二种写法：函数式</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;FOund&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>一个重要的原则:</strong></p>
<blockquote>
<p>由Vue管理的函数，一i的那个不要写箭头函数，一旦写了箭头函数，this就不再指向Vue实例</p>
</blockquote>
<h2 id="MVVM模型"><a href="#MVVM模型" class="headerlink" title="MVVM模型"></a>MVVM模型</h2><ol>
<li>M：模型（Model）：对应data中的数据</li>
<li>V：视图（View）：模板</li>
<li>VM：视图模型（ViewModel）：Vue实例对象</li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220718194456563.png" alt="image-20220718194456563"></p>
<ul>
<li>data中所有的属性，最后都出现在vm身上。</li>
<li>vm身上所有属性以及Vue原型上所有属性，在Vue模板中都可以直接使用</li>
</ul>
<h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2><h3 id="回忆Object-defineProperty"><a href="#回忆Object-defineProperty" class="headerlink" title="回忆Object.defineProperty"></a>回忆<em>Object</em>.defineProperty</h3><p>使用<em>Object</em>.defineProperty添加的数据不可被遍历(枚举)-修改-删除</p>
<ul>
<li>enumerable: true 		控制属性是否可以被枚举，默认false</li>
<li>Writable: true                控制属性是否可以被修改，默认false</li>
<li>configurable: true         控制属性可以被删除，默认false</li>
</ul>
<blockquote>
<p>get()    当有人读取person的age属性时，get函数(gutter)就会被调用，且返回值就是age的值</p>
<p>set(value)   当有人修改person的age属性时，get函数(gutter)就会被调用，且返回值就是age的值</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> number = <span class="number">10</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="comment">//控制属性是否可以被枚举，默认false</span></span><br><span class="line">    <span class="title class_">Writable</span>: <span class="literal">true</span>, <span class="comment">//控制属性是否可以被修改，默认false</span></span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="comment">//控制属性可以被删除</span></span><br><span class="line">    <span class="comment">//当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//当有人修改person的age属性时，get函数(getter)就会被调用，且返回值就是age的值</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        number = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure>

<h3 id="数据代理-1"><a href="#数据代理-1" class="headerlink" title="数据代理"></a>数据代理</h3><p>何为数据代理：</p>
<blockquote>
<p>数据代理：通过一个对象代理对另一个对象中属性的操作(读&#x2F;写)</p>
<p>通过obj2就可以修改obj1中的属性</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">100</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">y</span>: <span class="number">200</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(obj2, <span class="string">&#x27;x&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj1.<span class="property">x</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        obj2.<span class="property">x</span> = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="Vue中的数据代理"><a href="#Vue中的数据代理" class="headerlink" title="Vue中的数据代理"></a>Vue中的数据代理</h3><ol>
<li>Vue中的数据代理：</li>
</ol>
<p>​			通过vm对象来代理data对象中属性的操作（读与写）</p>
<ol start="2">
<li><p>Vue中数据代理的好处：</p>
<p>​     更加方面的操作data中的数据</p>
</li>
<li><p>基本原理：</p>
<p>​      通过<code>Object.defineProperty()</code>把data对象中所有的属性添加到vm上。</p>
<p>​      为每个添加到vm上的属性，都指定一个getter&#x2F;setter。</p>
<p>​      在getter&#x2F;setter内部去操作(读&#x2F;写)data中对应的属性。</p>
</li>
</ol>
<p>data中的所有属性被传给_data，虽然vm上也有对应的属性，但实际上这些属性都是代理上的。<br>当我更改了<code>vm.name=&#39;123&#39;</code>  ,   _data中的属性name也同样被修改(即最初传进去的data数据)，此时被更改的name也会被更新到页面中，因为Vue的数据实时更新特性</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220718210505028.png" alt="image-20220718210505028"></p>
<h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><h3 id="事件的基本使用："><a href="#事件的基本使用：" class="headerlink" title="事件的基本使用："></a>事件的基本使用：</h3><ol>
<li>使用v-on:xxx或@xxx绑定事件，其中xxx是事件名；</li>
<li>事件的回调需要配置在methods对象中，最终会在vm上；</li>
<li>methods中配置的函数，不要再用箭头函数！否则this就不是vm了；</li>
<li>methods中配置的函数，都是被Vue所管理的函数，this的指向是vm或组件实例对象；</li>
<li><strong>@click&#x3D;“demo”</strong>  和  <strong>@click&#x3D;”demo($event)”</strong>  效果一致，但后者可以传参；</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备一个容器 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h2</span>&gt;</span>hello &#123;&#123;name&#125;&#125;!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;showInfo1&quot;</span>&gt;</span>(不传参)点我提示信息1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo2(66,$event)&quot;</span>&gt;</span>(传参)点我提示信息2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">         <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                 <span class="attr">name</span>: <span class="string">&#x27;FOund&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">             &#125;</span></span><br><span class="line"><span class="language-javascript">         &#125;,</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="title function_">showInfo1</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                 <span class="comment">// console.log(this);  //此处的this是vm</span></span></span><br><span class="line"><span class="language-javascript">                 <span class="comment">// console.log(event); </span></span></span><br><span class="line"><span class="language-javascript">                 <span class="title function_">alert</span>(<span class="string">&#x27;hi!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">             &#125;,</span></span><br><span class="line"><span class="language-javascript">             <span class="title function_">showInfo2</span>(<span class="params">number, a</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                 <span class="variable language_">console</span>.<span class="title function_">log</span>(number, a);</span></span><br><span class="line"><span class="language-javascript">                 <span class="title function_">alert</span>(<span class="string">&#x27;hi!!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">             &#125;,</span></span><br><span class="line"><span class="language-javascript">         &#125;,</span></span><br><span class="line"><span class="language-javascript">     &#125;);</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="事件修饰符："><a href="#事件修饰符：" class="headerlink" title="事件修饰符："></a>事件修饰符：</h3><blockquote>
<p><code>@click.prevent=&quot;showInfo1&quot;</code></p>
</blockquote>
<ol>
<li>prevent：阻止默认事件(常用)</li>
<li>stop：阻止事件冒泡(常用)</li>
<li>xxxxxxxxxx &#x2F;&#x2F; TODO_06：使用全局错误处理中间件，捕获解析 JWT 失败后产生的错误app.use((err, req, res, next) &#x3D;&gt; {    if (err.name &#x3D;&#x3D;&#x3D; ‘UnauthorizedError’) {        return res.send({            status: 401,            message: ‘无效的token’        })    }    res.send({        status: 500,        message: ‘未知错误’    })});js</li>
<li>capture：使用事件的捕获模式</li>
<li>self：只有event.target是当前操作的元素，才触发事件</li>
<li>passive：事件的默认行为立即执行，无需等待事件回调执行完毕</li>
</ol>
<blockquote>
<p>修饰符可以连续写，当想要阻止冒泡，又想阻止默认行为可以<code>.stop.prevent</code></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备一个容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>hello &#123;&#123;name&#125;&#125;!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com/&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;showInfo1&quot;</span>&gt;</span>点我提示信息1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;showInfo1&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;showInfo1&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;FOund&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showInfo1</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(this);  //此处的this是vm</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(event); </span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;hi!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件:"></a>键盘事件:</h3><h4 id="Vue中常用的按键别名："><a href="#Vue中常用的按键别名：" class="headerlink" title="Vue中常用的按键别名："></a>Vue中常用的按键别名：</h4><ol>
<li>回车：enter</li>
<li>删除：delete （捕获“删除”和“退格”键）</li>
<li>推出：esc</li>
<li>空格：space</li>
<li>换行：tab        (特殊，配合keydown使用)</li>
<li>上：up</li>
<li>下：down</li>
<li>左：left</li>
<li>右：right</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备一个容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按下回车提示输入&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;shouInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;FOund&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">shouInfo</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br></pre></td></tr></table></figure>

<h4 id="Vue未提供别名的按键"><a href="#Vue未提供别名的按键" class="headerlink" title="Vue未提供别名的按键"></a>Vue未提供别名的按键</h4><p>可以使用按键原始key值去绑定，但注意要转为kebab-case(短横线命名)</p>
<p>可以使用<code>e.key</code>获取按键别名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">shouInfo</span>(<span class="params">e</span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">key</span>);</span><br><span class="line">	<span class="comment">// console.log(e.target.value);</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：CapsLock（大小写切换）这种形式要写成caps-lock</p>
</blockquote>
<h4 id="系统修饰符"><a href="#系统修饰符" class="headerlink" title="系统修饰符"></a>系统修饰符</h4><p>用法特殊：ctrl，alt，shift，meta</p>
<ol>
<li><p>配合keyup使用：按下修饰按键的同时，再按下其他按键，随后释放其他键，事件才触发</p>
<p>​       <code>@keyup.ctrl.y</code>指定ctrl配合y使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按下回车提示输入&quot;</span> @<span class="attr">keyup.ctrl.y</span>=<span class="string">&quot;shouInfo&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配合keydown使用：正常触发事件。</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按下回车提示输入&quot;</span> @<span class="attr">keydown.ctrl</span>=<span class="string">&quot;shouInfo&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用keyCode去指定按键"><a href="#使用keyCode去指定按键" class="headerlink" title="使用keyCode去指定按键"></a>使用keyCode去指定按键</h3><blockquote>
<p><code>@keyup.13</code>指定’回车键‘</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按下回车提示输入&quot;</span> @<span class="attr">keyup.13</span>=<span class="string">&quot;shouInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="自定义按键别名"><a href="#自定义按键别名" class="headerlink" title="自定义按键别名"></a>自定义按键别名</h3><p><code>Vue.config.keyCodes.自定义键名=键码</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">keyCodes</span>.<span class="property">huiche</span> = <span class="number">13</span>;</span><br></pre></td></tr></table></figure>

<h2 id="计算属性与监视"><a href="#计算属性与监视" class="headerlink" title="计算属性与监视"></a>计算属性与监视</h2><h3 id="插值语法方式"><a href="#插值语法方式" class="headerlink" title="插值语法方式"></a>插值语法方式</h3><blockquote>
<p>要求：拼接姓名两个表单中的值到span中</p>
<ul>
<li>这种方法虽然也可以实现，但是不推荐</li>
</ul>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> 名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>姓名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;firstName.slice(0,3)&#125;&#125;-&#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">firstName</span>: <span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">lastName</span>: <span class="string">&#x27;三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">shouInfo</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span> + <span class="string">&quot; &quot;</span> + e.<span class="property">key</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(e.target.value);</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="methods方法"><a href="#methods方法" class="headerlink" title="methods方法"></a>methods方法</h3><p>将两个表单数据相加写成一个函数方法，在插值语法中调用。</p>
<blockquote>
<p>注意：在插值语法中，函数方法**必须加(  )**代表调用，这是才会返回正确的值</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> 名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>姓名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName()&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">firstName</span>: <span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">lastName</span>: <span class="string">&#x27;三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fullName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="计算属性方法-computed"><a href="#计算属性方法-computed" class="headerlink" title="计算属性方法-computed"></a>计算属性方法-computed</h3><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>要用的属性不存在，要通过已有属性计算得来</p>
<h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><p>底层借助了<code>Object.defineProperty()</code>方法提供的getter和setter方法</p>
<h4 id="get何时执行"><a href="#get何时执行" class="headerlink" title="get何时执行"></a>get何时执行</h4><ol>
<li>初次读取时会执行一次</li>
<li>当依赖的数据发生改变时会再次调用</li>
</ol>
<h4 id="优势："><a href="#优势：" class="headerlink" title="优势："></a>优势：</h4><p>computed与methods实现相比，内部会有缓存机制（复用），效率高，调试更方便。</p>
<h4 id="备注：-1"><a href="#备注：-1" class="headerlink" title="备注："></a>备注：</h4><ol>
<li>计算属性最终会出现在vm上，直接读取数据即可</li>
<li>如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">firstName</span>: <span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">lastName</span>: <span class="string">&#x27;三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 全新的配置项</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fullName</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// get有什么作用:</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 当有人读取fullName时，get就会被调用，且返回值就作为fullName的值</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// get什么时候调用？</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//    1.初次读取fullName时</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//    2.所依赖的数据(data中)发生变化时</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get被调用&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// set什么时候调用？</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 当fullName被修改时</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set&#x27;</span>, value);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> arr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">firstName</span> = arr[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">lastName</span> = arr[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="简写："><a href="#简写：" class="headerlink" title="简写："></a>简写：</h4><blockquote>
<p>在不考虑修改只需要读取时候可以采用简写形式</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">    姓：&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;firstName&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    名: &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt;&lt;br&gt; </span><br><span class="line">    姓名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;&lt;br&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.config.productionTip = false;</span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                firstName: &#x27;张&#x27;,</span><br><span class="line">                lastName: &#x27;三&#x27;,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        // 全新的配置项</span><br><span class="line">        computed: &#123;</span><br><span class="line">            // 简写</span><br><span class="line">            fullName() &#123;</span><br><span class="line">                return this.firstName + &#x27;-&#x27; + this.lastName;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="监视属性-watch"><a href="#监视属性-watch" class="headerlink" title="监视属性-watch"></a>监视属性-watch</h3><h4 id="先写一个切换天气案例"><a href="#先写一个切换天气案例" class="headerlink" title="先写一个切换天气案例"></a>先写一个切换天气案例</h4><ul>
<li>数据 存放进data中</li>
<li>方法存放在methods中</li>
<li>计算属性的方法单独放在computed中</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 事件@xxx=“yyy” yyy可以写一些简单的语句 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 调用的属性和方法都是Vue实例对象上有的 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;button @click=&quot;isHot = !isHot;&quot;&gt;切换天气&lt;/button&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">isHot</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">change</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">info</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="监听属性"><a href="#监听属性" class="headerlink" title="监听属性"></a>监听属性</h4><p><strong>将watch放在new Vue内部：</strong></p>
<ul>
<li><strong>immediate: true，</strong>   </li>
<li>初始化时让handler调用一下，默认值false</li>
<li><strong>handler(newValue, oldValue) {  }，</strong></li>
<li>当isHot发生改变时调用，同时还可以获取修改前的值(oldValue)和修改后的值(newValue)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">isHot</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">change</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">info</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isHot</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 初始化时让handler调用一下</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">immediate</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                </span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// handler什么时候调用？</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 当isHot发生改变时</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 同时还可以获取修改前的值和修改后的值</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改&#x27;</span>, newValue, oldValue);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>将watch放在外部调用：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">isHot</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">change</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">info</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    vm.$watch(<span class="string">&#x27;isHot&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 初始化时让handler调用一下</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">immediate</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// handler什么时候调用？</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 当isHot发生改变时</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 同时还可以获取修改前的值和修改后的值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改&#x27;</span>, newValue, oldValue);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br></pre></td></tr></table></figure>

<h4 id="深度监视deep"><a href="#深度监视deep" class="headerlink" title="深度监视deep"></a>深度监视deep</h4><p>当监听的数据是一个复杂数据的时候watch监视的只是一个在栈空间的地址，不管外界怎样改变numbers对象中的值，都不会触发监视。</p>
<ol>
<li>Vue中的watch默认不监测对象内部值的变化（一层）</li>
<li>配置<code>deep:true</code>可以监测对象内部值得变化（多层）</li>
</ol>
<p>使用<code>deep: true</code>开启深度监听,此时的vue就可以监听到数据内部的变化</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>a的值是:&#123;&#123;numbers.a&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers.a++&quot;</span>&gt;</span>点我让a加1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>b的值是:&#123;&#123;numbers.b&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers.b++&quot;</span>&gt;</span>点我让b加1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">isHot</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">numbers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">a</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">b</span>: <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">change</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">info</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isHot</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 初始化时让handler调用一下</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// immediate: true,</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// handler什么时候调用？</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 当isHot发生改变时</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 同时还可以获取修改前的值和修改后的值</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改&#x27;</span>, newValue, oldValue);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 如果要监视的是对象中的单个值，要用引号写法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// &#x27;numbers.a&#x27;: &#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     handler() &#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//         console.log(&#x27;改变了&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// &#125;;</span></span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 监视多级结构中所有属性的变化</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">numbers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 开启深度监听</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">deep</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;number改变了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br></pre></td></tr></table></figure>

<p><strong>备注：</strong></p>
<ol>
<li>Vue自身可以监测对象内部值的变化，但Vue提供的watch默认不可以</li>
<li>使用watch时根据数据的具体结构，决定是否采用深度监视</li>
</ol>
<h4 id="监听简写"><a href="#监听简写" class="headerlink" title="监听简写"></a>监听简写</h4><blockquote>
<p>所有调用简写的前提就是只监听一个数据并且不触发深入监听，就是没有</p>
<ul>
<li>importScripts: true</li>
<li>deep: true</li>
</ul>
</blockquote>
<h5 id="内部调用简写："><a href="#内部调用简写：" class="headerlink" title="内部调用简写："></a>内部调用简写：</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">isHot</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">numbers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">a</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">b</span>: <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">change</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">info</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 正常写法：</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// isHot: &#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     importScripts: true,</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     deep: true,</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     handler(newValue, oldValue) &#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//         console.log(&#x27;isHot被修改&#x27;, newValue, oldValue);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 简写：</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">isHot</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改&#x27;</span>, newValue, oldValue);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="外部调用简写："><a href="#外部调用简写：" class="headerlink" title="外部调用简写："></a>外部调用简写：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正常写法：</span></span><br><span class="line"><span class="comment">// vm.$watch(&#x27;isHot&#x27;, &#123;</span></span><br><span class="line"><span class="comment">//     importScripts: true,</span></span><br><span class="line"><span class="comment">//     deep: true,</span></span><br><span class="line"><span class="comment">//     handler(newValue, oldValue) &#123;</span></span><br><span class="line"><span class="comment">//         console.log(&#x27;isHot被修改&#x27;, newValue, oldValue);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写：</span></span><br><span class="line"> vm.$watch(<span class="string">&#x27;isHot&#x27;</span>, <span class="keyword">function</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改&#x27;</span>, newValue, oldValue);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="使用watch实现computed"><a href="#使用watch实现computed" class="headerlink" title="使用watch实现computed"></a>使用watch实现computed</h3><blockquote>
<p>思路：</p>
<ul>
<li>姓氏，名字改变，span中的姓名也改变，这时就可以使用watch监视姓和名的改变</li>
<li>要提前在data中准备好一个最终加好数据<code>fullName</code></li>
<li>监视姓&#x2F;名的改变，当改变的时候将<code>fullName</code>更改为新的数据</li>
</ul>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> 名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> 姓名：</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">firstName</span>: <span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">lastName</span>: <span class="string">&#x27;三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fullName</span>: <span class="string">&#x27;张-三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">firstName</span>(<span class="params">newV</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">fullName</span> = newV + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">lastName</span>(<span class="params">newV</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + newV;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h4><ol>
<li>computed能完成的功能，watch都可以完成。</li>
<li>watch能完成的功能，computed不一 定能完成，例如: watch可以进行异步操作。</li>
</ol>
<h4 id="原则："><a href="#原则：" class="headerlink" title="原则："></a>原则：</h4><p>计算属性<code>computed</code>中不可以使用异步任务</p>
<p><code>computed</code>中是return一个数据，异步任务不可行</p>
<blockquote>
<p>需求：数据改变后延迟1s执行span中的改变</p>
<p>在watch中实现：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="title function_">firstName</span>(<span class="params">newV</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">fullName</span> = newV + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">lastName</span>(<span class="params">newV</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + newV;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>注意：使用箭头函数，如果使用普通函数，此时的this指向的是window，而箭头函数的特殊性使得this指向<code>Vue</code></p>
<h2 id="绑定样式"><a href="#绑定样式" class="headerlink" title="绑定样式"></a>绑定样式</h2><h3 id="1-class样式"><a href="#1-class样式" class="headerlink" title="1.class样式"></a>1.class样式</h3><blockquote>
<p>写法：class&#x3D;“xxx”   xxx可以是字符串，对象，数组</p>
</blockquote>
<ul>
<li>字符串写法适用于：类名不确定，要动态获取</li>
<li>对象写法适用于：要绑定多个样式，个数不确定，名字也不确定</li>
<li>数组写法 适用于：要绑定多个样式，个数确定，名字确定，但不确定用不用</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;mood&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeMood&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定，名字也不确定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定，名字也确定，要动态决定用不用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;FOund&#x27;</span>,</span><br><span class="line">            <span class="attr">mood</span>: <span class="string">&#x27;normal&#x27;</span>,</span><br><span class="line">            <span class="attr">classArr</span>: [<span class="string">&#x27;atguihu1&#x27;</span>, <span class="string">&#x27;atguihu2&#x27;</span>, <span class="string">&#x27;atguihu3&#x27;</span>],</span><br><span class="line">            <span class="attr">classObj</span>: &#123;</span><br><span class="line">                <span class="attr">atguihu1</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">atguihu2</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="comment">// 随即改变样式</span></span><br><span class="line">        <span class="title function_">changeMood</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> arr = [<span class="string">&#x27;happy&#x27;</span>, <span class="string">&#x27;sad&#x27;</span>, <span class="string">&#x27;normal&#x27;</span>];</span><br><span class="line">            <span class="keyword">const</span> index = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">3</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">mood</span> = arr[index];</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2-style样式"><a href="#2-style样式" class="headerlink" title="2.style样式"></a>2.style样式</h3><ul>
<li>**:style&#x3D;”{fontSize:xxx}” **   其中xxx是动态值</li>
<li><strong>:style&#x3D;”[a,b]”</strong>                      其中a，b是样式对象</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定style样式--对象写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj1&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定style样式--数组写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;[styleArr]&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;FOund&#x27;</span>,</span><br><span class="line">            <span class="attr">styleObj1</span>: &#123;</span><br><span class="line">                <span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">styleObj2</span>: &#123;</span><br><span class="line">                <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">styleArr</span>: [&#123;</span><br><span class="line">                <span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span><br><span class="line">                <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="attr">backgroundColor</span>: <span class="string">&#x27;gray&#x27;</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><h3 id="1-v-if"><a href="#1-v-if" class="headerlink" title="1.v-if"></a>1.v-if</h3><p><strong>写法：</strong></p>
<blockquote>
<ol>
<li><strong>v-if</strong>&#x3D;”表达式”</li>
<li><strong>v-else-if</strong>&#x3D;”表达式”</li>
<li><strong>v-else</strong>&#x3D;”表达式”</li>
</ol>
</blockquote>
<p><strong>适用于：</strong></p>
<blockquote>
<p>切换频率较低的场景</p>
</blockquote>
<p><strong>特点：</strong></p>
<blockquote>
<p>不展示的DOM元素直接被移除</p>
</blockquote>
<p><strong>注意：</strong></p>
<blockquote>
<p><strong>v-if</strong>可以和：<strong>v-else-if</strong>，<strong>v-else</strong>一起使用，但要求结构不能被“打断”</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用v-if做条件渲染 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;false&quot;</span>&gt;</span>Hello &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;1===1&quot;</span>&gt;</span>Hello &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v-else和v-else-if --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;n === 1&quot;</span>&gt;</span>Angular<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;n === 2&quot;</span>&gt;</span>React<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;n === 3&quot;</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>=<span class="string">&quot;&quot;</span>&gt;</span>HH<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>v-if与template配合使用:</strong></p>
<blockquote>
<p>template标签在渲染页面中时会自动消失</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;n === 1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>世界<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-v-show"><a href="#2-v-show" class="headerlink" title="2.v-show"></a>2.v-show</h3><p><strong>写法：</strong></p>
<blockquote>
<p><strong>v-show</strong>&#x3D;”表达式”</p>
</blockquote>
<p><strong>适用于：</strong></p>
<blockquote>
<p>切换频率较高的场景</p>
</blockquote>
<p><strong>特点：</strong></p>
<blockquote>
<p>不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用v-show做条件渲染 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;false&quot;</span>&gt;</span>Hello &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;1===1&quot;</span>&gt;</span>Hello &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<h3 id="3-备注"><a href="#3-备注" class="headerlink" title="3.备注"></a>3.备注</h3><p>使用<strong>v-if</strong>的时候，元素可能无法获取到，而使用<strong>v-show</strong>一定可以获取到</p>
<h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><h3 id="v-for指令"><a href="#v-for指令" class="headerlink" title="v-for指令"></a>v-for指令</h3><ol>
<li>用于展示列表数据</li>
<li>语法：v-for&#x3D;“(item，index) in xxx”  :key&#x3D;”yyy”</li>
<li>可遍历：数组，对象，字符串(很少用)，指定次数(更少用)</li>
</ol>
<blockquote>
<p><strong>v-for &#x3D; “(值,[索引]) in [被遍历的]”</strong></p>
</blockquote>
<h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备一个容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 遍历数组 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表（遍历数组）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) in persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;--&#123;&#123;index&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 遍历对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>汽车信息（遍历对象）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(a,b) in car&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;k&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;a&#125;&#125;--&#123;&#123;b&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 遍历字符串 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试遍历字符串<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(a,b) in str&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;a&#125;&#125;--&#123;&#123;b&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 遍历指定次数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>遍历指定次数<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(number,index) in 5&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;number&#125;&#125;--&#123;&#123;index&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// 数组</span></span><br><span class="line">            <span class="attr">persons</span>: [&#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="string">&#x27;003&#x27;</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">            &#125;],</span><br><span class="line">            <span class="comment">// 对象</span></span><br><span class="line">            <span class="attr">car</span>: &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;奥迪A6&#x27;</span>,</span><br><span class="line">                <span class="attr">price</span>: <span class="string">&#x27;20w&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 字符串</span></span><br><span class="line">            <span class="attr">str</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="key-x3D-“”深入理解"><a href="#key-x3D-“”深入理解" class="headerlink" title=":key&#x3D;“”深入理解"></a>:key&#x3D;“”深入理解</h3><h4 id="1-虚拟DOM中key的作用"><a href="#1-虚拟DOM中key的作用" class="headerlink" title="1.虚拟DOM中key的作用"></a>1.虚拟DOM中key的作用</h4><p>key是虚拟DOM对象的标识，当中的数据发生改变时，Vue会根据【新数据】生成【新的虚拟DOM】，随后Vue进行【虚拟DOM】与【旧虚拟DOM】的差异进行比较。</p>
<h4 id="2-比较规则"><a href="#2-比较规则" class="headerlink" title="2.比较规则"></a>2.比较规则</h4><h5 id="a"><a href="#a" class="headerlink" title="a."></a>a.</h5><p>旧DMO中找到了与新虚拟DOM相同的key：</p>
<ol>
<li>若虚拟DOM中内容没有改变，直接使用之前的真实DOM!</li>
<li>若虚拟DOM中内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM</li>
</ol>
<h5 id="b"><a href="#b" class="headerlink" title="b."></a>b.</h5><p>旧虚拟DOM中未找到与新虚拟DOM相同的key</p>
<ol>
<li>创建新的真实DOM，随后渲染到页面中</li>
</ol>
<h4 id="3-用index作为key可能会引发的问题"><a href="#3-用index作为key可能会引发的问题" class="headerlink" title="3.用index作为key可能会引发的问题"></a>3.用index作为key可能会引发的问题</h4><ol>
<li><p>若对数据进行：逆序添加，逆序删除等破坏顺序操作：</p>
<blockquote>
<p>会产生没有必要的真实DOM更新&#x3D;&#x3D;&#x3D;&gt;界面效果没问题，但是效率低</p>
</blockquote>
</li>
<li><p>如果结构中还包含输入类的DOM：</p>
<blockquote>
<p>会产生错误的DOM更新&#x3D;&#x3D;&#x3D;&gt;界面有问题</p>
</blockquote>
</li>
</ol>
<h4 id="4-开发中如何选择key"><a href="#4-开发中如何选择key" class="headerlink" title="4.开发中如何选择key"></a>4.开发中如何选择key</h4><ol>
<li>最好使用每条数据的唯一标识作为key，比如id，手机号，身份证号，学号等唯一值。</li>
<li>如果不存在对数据的逆序添加，逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。</li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220721213352552.png" alt="image-20220721213352552"></p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220721213513745.png" alt="image-20220721213513745"></p>
<h3 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h3><blockquote>
<p>实现模糊搜索功能</p>
</blockquote>
<h4 id="watch监听实现"><a href="#watch监听实现" class="headerlink" title="watch监听实现"></a>watch监听实现</h4><p><strong>编写思路：</strong></p>
<ul>
<li>通过watch可以监视到input输入框的变化<ul>
<li>提前准备一个接收inputValue值的数据(使用v-model双向绑定这一数据)</li>
</ul>
</li>
<li>渲染进页面中的数据要用另一个数组承载<ul>
<li>准备另一个filPersons数组</li>
</ul>
</li>
<li>当input中的值(也就是keyWord)发生改变，就是用filter方法过滤初始数组</li>
<li>过滤条件使用indexOf，将不为-1的数据(符合条件的数据)return进承载的新数组中</li>
<li>注意页面中渲染的DOM为承载的数组</li>
</ul>
<blockquote>
<p>注：</p>
<ol>
<li>indexOf(“”)返回为0，当检索的为空字符串时返回的值也为0</li>
<li>使用<code>immediate: true,</code>先执行一次监听方法，不然页面空白</li>
</ol>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备一个容器 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 遍历数组 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) in filPerson&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="line">             &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;--&#123;&#123;p.sex&#125;&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">// 用watch监听实现</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        	<span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">         <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                 <span class="attr">keyWord</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                 <span class="attr">persons</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">name</span>: <span class="string">&#x27;马冬梅&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                 &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">name</span>: <span class="string">&#x27;周冬雨&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                      <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                 &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">id</span>: <span class="string">&#x27;003&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">name</span>: <span class="string">&#x27;周杰伦&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                 &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">id</span>: <span class="string">&#x27;004&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">name</span>: <span class="string">&#x27;温兆伦&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>: <span class="number">22</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                 &#125;],</span></span><br><span class="line"><span class="language-javascript">                 <span class="attr">filPersons</span>: []</span></span><br><span class="line"><span class="language-javascript">             &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">keyWord</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                  <span class="comment">// immediate先制定一次</span></span></span><br><span class="line"><span class="language-javascript">                  <span class="attr">immediate</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                  <span class="title function_">handler</span>(<span class="params">newVal</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                     <span class="variable language_">this</span>.<span class="property">filPersons</span> = <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                          <span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(newVal) !== -<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                      &#125;)</span></span><br><span class="line"><span class="language-javascript">                  &#125;</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="computed属性计算实现"><a href="#computed属性计算实现" class="headerlink" title="computed属性计算实现"></a>computed属性计算实现</h4><p><strong>编写思路：</strong></p>
<ul>
<li>同样借助input中值的变化来改变下方数据<ul>
<li>v-model绑定<code>keyWord</code>数据</li>
</ul>
</li>
<li>同上不同，页面中的DOM是<code>filPerson</code>返回的数组<ul>
<li>当表单值为空，原数组中的所有数据都被渲染进页面</li>
</ul>
</li>
<li>因双向绑定，当input的值改变，<code>filPerson</code>也同样改变</li>
</ul>
<blockquote>
<p>注意：</p>
<ol>
<li>页面的渲染遍历的数据是<code>filPerson</code></li>
</ol>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备一个容器 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 遍历数组 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) in filPerson&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="line">             &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;--&#123;&#123;p.sex&#125;&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">// 用computed属性计算实现</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">         <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                 <span class="attr">keyWord</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                 <span class="attr">persons</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">name</span>: <span class="string">&#x27;马冬梅&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                 &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">name</span>: <span class="string">&#x27;周冬雨&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                 &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">id</span>: <span class="string">&#x27;003&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">name</span>: <span class="string">&#x27;周杰伦&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                 &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">id</span>: <span class="string">&#x27;004&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">name</span>: <span class="string">&#x27;温兆伦&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">age</span>: <span class="number">22</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                 &#125;],</span></span><br><span class="line"><span class="language-javascript">             &#125;</span></span><br><span class="line"><span class="language-javascript">         &#125;,</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="title function_">filPerson</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                 <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                     <span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keyWord</span>) !== -<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                 &#125;)</span></span><br><span class="line"><span class="language-javascript">             &#125;</span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">     &#125;)</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h3><p>实现对数据的检索，同时可以升序，降序，还原</p>
<ul>
<li>页面中的数据是<code>filPerson</code>返回的，只要对其进行操作就可以达到效果</li>
<li>为每个button添加点击，点击不同的按钮让<code>sortType</code>发生改变</li>
<li>对不同<code>sortType</code>的值写出相应的改变</li>
</ul>
<blockquote>
<p>注意：</p>
<ol>
<li>数组的排序方法<code>sort(a,b)</code>改变原数组</li>
<li>b-a降序，a-b升序</li>
</ol>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备一个容器 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 遍历数组 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 2&quot;</span>&gt;</span>年龄升序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 1&quot;</span>&gt;</span>年龄降序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 0&quot;</span>&gt;</span>还原<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) in filPerson&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="line">             &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;--&#123;&#123;p.sex&#125;&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">// 用computed属性计算实现</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">         <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                 <span class="attr">keyWord</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                 <span class="attr">sortType</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">                 <span class="comment">// 0:原数据</span></span></span><br><span class="line"><span class="language-javascript">                 <span class="comment">// 1:降序</span></span></span><br><span class="line"><span class="language-javascript">                 <span class="comment">// 2:升序</span></span></span><br><span class="line"><span class="language-javascript">                 <span class="attr">persons</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">name</span>: <span class="string">&#x27;马冬梅&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">age</span>: <span class="number">30</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                 &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">name</span>: <span class="string">&#x27;周冬雨&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                 &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">id</span>: <span class="string">&#x27;003&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">name</span>: <span class="string">&#x27;周杰伦&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                 &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">id</span>: <span class="string">&#x27;004&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">name</span>: <span class="string">&#x27;温兆伦&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">age</span>: <span class="number">22</span>,</span></span><br><span class="line"><span class="language-javascript">                     <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                 &#125;],</span></span><br><span class="line"><span class="language-javascript">             &#125;</span></span><br><span class="line"><span class="language-javascript">         &#125;,</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="title function_">filPerson</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                 <span class="keyword">const</span> arr = <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                     <span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keyWord</span>) !== -<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                 &#125;);</span></span><br><span class="line"><span class="language-javascript">                 <span class="comment">// 判断是否需要排序</span></span></span><br><span class="line"><span class="language-javascript">                 <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">sortType</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                     arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                         <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">sortType</span> === <span class="number">1</span> ? b.<span class="property">age</span> - a.<span class="property">age</span> : a.<span class="property">age</span> - b.<span class="property">age</span></span></span><br><span class="line"><span class="language-javascript">                     &#125;)</span></span><br><span class="line"><span class="language-javascript">                 &#125;;</span></span><br><span class="line"><span class="language-javascript">                 <span class="keyword">return</span> arr;</span></span><br><span class="line"><span class="language-javascript">             &#125;,</span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">     &#125;)</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Vue监测数据的原理"><a href="#Vue监测数据的原理" class="headerlink" title="Vue监测数据的原理"></a>Vue监测数据的原理</h2><ol>
<li>vue会监视data中所有层次的数据</li>
<li>如何监测对象中的数据？</li>
</ol>
<blockquote>
<p>通过setter实现监视，且要在new Vue时就传入要监测的数据</p>
<ul>
<li>对象中后追加的数据，Vue默认不做响应式处理</li>
<li>如需给后添加的属性做响应式，请使用如下API<ul>
<li><code>Vue.set(target,propertyName/index,value)</code></li>
<li><code>Vue.$set(target,propertyName/index,value)</code></li>
</ul>
</li>
</ul>
</blockquote>
<ol start="3">
<li>如何监测数组中的数据？</li>
</ol>
<blockquote>
<p>通过包裹数组更新元素的方法实现，本质就是做了两件事</p>
<ul>
<li>调用原生对应的方法对数组进行更新</li>
<li>重新解析模板，进而更新页面</li>
</ul>
</blockquote>
<ol start="4">
<li>在Vue修改数组中的某个元素一定要使用如下方法：</li>
</ol>
<blockquote>
<ul>
<li>使用这些API：push(),  pop(),  shift(),  unshift(),  splice(),  sort(),  reverse()</li>
<li>Vue.set()或vm.$set()</li>
</ul>
</blockquote>
<p><strong>特别注意：</strong>Vue.set()和vm.$set()不能给vm或vm的根数据对象添加属性！！！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备一个容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>学生信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;student.age++&quot;</span>&gt;</span>年龄+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addSex&quot;</span>&gt;</span>点击添加性别<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;student.sex=&#x27;未知&#x27;&quot;</span>&gt;</span>修改性别<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;addFriend&quot;</span>&gt;</span>在列表首位添加一个朋友<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeZs&quot;</span>&gt;</span>修改第一个朋友的名字为张三<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addHobby&quot;</span>&gt;</span>添加一个爱好<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeHobby&quot;</span>&gt;</span>修改第一个爱好<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>姓名:&#123;&#123;student.name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>年龄:&#123;&#123;student.age&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">&quot;student.sex&quot;</span>&gt;</span>性别:&#123;&#123;student.sex&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>爱好:&#123;&#123;student.hobby&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(h, index) in student.hobby&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;h&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>朋友们<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(f, index) in student.friends&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;f.name&#125;&#125;---&#123;&#123;f.age&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 用computed属性计算实现</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">student</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">hobby</span>: [<span class="string">&#x27;抽烟&#x27;</span>, <span class="string">&#x27;喝酒&#x27;</span>, <span class="string">&#x27;烫头&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">friends</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">name</span>: <span class="string">&#x27;jerry&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">age</span>: <span class="number">35</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">name</span>: <span class="string">&#x27;tony&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">age</span>: <span class="number">36</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;]</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addSex</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 为student添加一个属性</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// Vue.set(this.student, &#x27;sex&#x27;, &#x27;男&#x27;); //第一种</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">student</span>, <span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;男&#x27;</span>); <span class="comment">// 第二种</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// vm.$set(this.student, &#x27;sex&#x27;, &#x27;男&#x27;);// 第三种</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addFriend</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 使用能引起原数组变化并且vue进行过包装的7个api</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">friends</span>.<span class="title function_">unshift</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>: <span class="number">70</span></span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">changeZs</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 修改第一个朋友的名字</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">friends</span>[<span class="number">0</span>].<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addHobby</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 添加一个爱好</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>.<span class="title function_">push</span>(<span class="string">&#x27;学习&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">changeHobby</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 修改第一个爱好</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.student.hobby.splice(0, 1, &#x27;开车&#x27;) // 第一种写法</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// Vue.set(this.student.hobby, 0, &#x27;男&#x27;) // 第二种写法</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>, <span class="number">0</span>, <span class="string">&#x27;开车&#x27;</span>) <span class="comment">// 第二种写法</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>附：何为数据劫持？</strong></p>
<blockquote>
<p>数据劫持就是当用户修改data中的数据的时候，被后台中途拦截，而调用了Vue包装的set&#x2F;get方法，从而使得数据发生改变。</p>
</blockquote>
<h2 id="收集表单数据"><a href="#收集表单数据" class="headerlink" title="收集表单数据"></a>收集表单数据</h2><p>Vue中的收集表单更加方便快捷，其主要应用在v-model身上。而且v-model也提供了些修饰符供使用</p>
<h3 id="text表单"><a href="#text表单" class="headerlink" title="text表单"></a>text表单</h3><p>若<code>&lt;input type=&quot;text&quot; v-model.trim=&quot;account&quot;&gt;</code>则v-model收集的是value值，用户输入的是value值。</p>
<h3 id="radio单选"><a href="#radio单选" class="headerlink" title="radio单选"></a>radio单选</h3><p>若<code>&lt;input type=&quot;radio&quot; name=&quot;sex&quot; v-model=&quot;sex&quot; value=&quot;male&quot;&gt;</code>则用户收集的就是checked(勾选or未勾选，是布尔值)</p>
<h3 id="checkbox多选"><a href="#checkbox多选" class="headerlink" title="checkbox多选"></a>checkbox多选</h3><ol>
<li>没有配置input的value属性，那么收集的就是checked（勾选or未勾选，是布尔值）</li>
<li>配置input的value属性：<ul>
<li>v-model的初始值是非数组，那么收集的就是checkbox（勾选or未勾选，是布尔值）</li>
<li>v-model的初始值是数组，那么收集的是value组成的数组</li>
</ul>
</li>
</ol>
<h3 id="备注：-2"><a href="#备注：-2" class="headerlink" title="备注："></a>备注：</h3><blockquote>
<p>v-model的三个修饰符：</p>
</blockquote>
<ul>
<li>v-model.lazy：失去焦点再收集数据</li>
<li>v-model.number：输入字符串转换为有效数组</li>
<li>v-model.trim：输入首尾空格过滤</li>
</ul>
<blockquote>
<p>为from添加事件</p>
</blockquote>
<ul>
<li>可以不用为button添加提交事件</li>
<li>将submit事件添加到from身上</li>
<li>使用修饰符<code>@submit.prevent</code>阻止默认提交</li>
</ul>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">        账号:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;account&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- --- --&gt;</span></span><br><span class="line">        密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- --- --&gt;</span></span><br><span class="line">        年龄:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 年龄:&lt;input type=&quot;number&quot; v-model.number=&quot;age&quot;&gt;&lt;br&gt;&lt;br&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- --- --&gt;</span></span><br><span class="line">        性别:<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> 男:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span> 女:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- --- --&gt;</span></span><br><span class="line">        爱好: <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> 学习:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;study&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 打游戏:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 吃饭:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;eat&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- --- --&gt;</span></span><br><span class="line">        所属校区:</span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择校区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shenzhen&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;wuhan&quot;</span>&gt;</span>武汉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- --- --&gt;</span></span><br><span class="line">        其他信息:</span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;other&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- -- --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;agree&quot;</span>&gt;</span>阅读并接收协议:</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>用户协议<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">account</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">password</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">hobby</span>: [],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">city</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">other</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">agree</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">demo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">_data</span>));</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>定义：</p>
<blockquote>
<p>对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）</p>
</blockquote>
<p>语法：</p>
<ol>
<li>注册过滤器:<ul>
<li><code>  Vue.filter(name,callback)</code>     <em>全局过滤器</em></li>
<li><code>new Vue&#123;filters:&#123;&#125;&#125;</code>       <em>局部过滤器</em></li>
</ul>
</li>
</ol>
<p>备注：</p>
<ol>
<li>过滤器也可以接收额外参数，多个过滤器也可以串联</li>
<li>并没有改变原本的数据，是产生新的对应数据</li>
<li>过滤器可以应用在插值语法中，也可以在v-bind中使用</li>
</ol>
<blockquote>
<p>使用到第三方插件<code>dayjs</code></p>
<p><code>&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/dayjs/1.11.3/dayjs.min.js&quot;&gt;&lt;/script&gt;</code></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h2</span>&gt;</span>显示格式化后的时间<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 计算属性实现 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是:&#123;&#123;fmtTime&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- methods实现 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是:&#123;&#123;getFmtTime()&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 过滤器实现 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是:&#123;&#123;time | timeForMater&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 过滤器（传参）实现 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是:&#123;&#123;time | timeForMater(&#x27;YYYY_MM_DD&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 过滤器（传参+嵌套）实现 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是:&#123;&#123;time | timeForMater(&#x27;YYYY_MM_DD&#x27;) | mySlice&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h3</span> <span class="attr">:x</span>=<span class="string">&quot;msg | mySlice&quot;</span>&gt;</span>FOund<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">// 全局过滤器定义</span></span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;mySlice&#x27;</span>, <span class="keyword">function</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">4</span>);</span></span><br><span class="line"><span class="language-javascript">     &#125;);</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">         <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                 <span class="attr">time</span>: <span class="number">16215645213</span>,</span></span><br><span class="line"><span class="language-javascript">                 <span class="attr">msg</span>: <span class="string">&#x27;你好世界123&#x27;</span></span></span><br><span class="line"><span class="language-javascript">             &#125;</span></span><br><span class="line"><span class="language-javascript">         &#125;,</span></span><br><span class="line"><span class="language-javascript">         <span class="comment">// 计算属性实现</span></span></span><br><span class="line"><span class="language-javascript">         <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="title function_">fmtTime</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                 <span class="keyword">return</span> <span class="title function_">dayjs</span>(<span class="variable language_">this</span>.<span class="property">time</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY年MM月DD日HH:mm:ss&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">             &#125;</span></span><br><span class="line"><span class="language-javascript">         &#125;,</span></span><br><span class="line"><span class="language-javascript">         <span class="comment">// methods方法实现</span></span></span><br><span class="line"><span class="language-javascript">         <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="title function_">getFmtTime</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                 <span class="keyword">return</span> <span class="title function_">dayjs</span>(<span class="variable language_">this</span>.<span class="property">time</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY年MM月DD日HH:mm:ss&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">             &#125;</span></span><br><span class="line"><span class="language-javascript">         &#125;,</span></span><br><span class="line"><span class="language-javascript">         <span class="comment">// 过滤器配置项实现</span></span></span><br><span class="line"><span class="language-javascript">         <span class="comment">// 局部过滤器</span></span></span><br><span class="line"><span class="language-javascript">         <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="comment">// 第一个过滤器</span></span></span><br><span class="line"><span class="language-javascript">             <span class="title function_">timeForMater</span>(<span class="params">value, str = <span class="string">&#x27;YYYY年MM月DD日HH:mm:ss&#x27;</span></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                 <span class="comment">// 页面展示的是这个函数return的值</span></span></span><br><span class="line"><span class="language-javascript">                 <span class="keyword">return</span> <span class="title function_">dayjs</span>(value).<span class="title function_">format</span>(str);</span></span><br><span class="line"><span class="language-javascript">             &#125;,</span></span><br><span class="line"><span class="language-javascript">             <span class="comment">// 第二个过滤器</span></span></span><br><span class="line"><span class="language-javascript">             <span class="title function_">mySlice</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                 <span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="language-javascript">             &#125;</span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">     &#125;)</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="内置指令-x2F-自定义指令"><a href="#内置指令-x2F-自定义指令" class="headerlink" title="内置指令&#x2F;自定义指令"></a>内置指令&#x2F;自定义指令</h2><h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><ul>
<li><code>v-bind:</code>单向绑定解析表达式，可简写为<code>:xxx</code></li>
<li><code>v-model:</code>双向数据绑定</li>
<li><code>v-for:</code>遍历数组、对象、字符串</li>
<li><code>v-on:</code>绑定事件监听，可简写为<code>@</code></li>
<li><code>v-if:</code>条件渲染（动态控制节点是否存在）</li>
<li><code>v-else:</code>条件渲染（动态控制节点是否存在）</li>
<li><code>v-show:</code>条件渲染（动态控制节点是否展示）</li>
</ul>
<h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><ol>
<li>作用：向其所在的节点中渲染文本内容</li>
<li>与插值语法的区别：v-text会替换掉节点中的内容，则不会</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- FOund --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">&quot;str&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;h3&gt;404&lt;/h3&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;FOund&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">str</span>: <span class="string">&#x27;&lt;h3&gt;404&lt;/h3&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><ol>
<li>作用：向指定节点中渲染包含html结构的内容</li>
<li>与插值语法的区别：<ul>
<li>v-html会替换掉节点中所有内容，则不会</li>
<li>v-html可以识别html结构</li>
</ul>
</li>
<li>严重注意：v-html有安全性问题！！！<ul>
<li>在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击</li>
<li>一定要在可信的内容上使用v-html，永远不要在用户提交的内容上！</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- FOund --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-html</span>=<span class="string">&quot;str&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;h3&gt;404&lt;/h3&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-html</span>=<span class="string">&quot;str2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;FOund&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">str</span>: <span class="string">&#x27;&lt;h3&gt;404&lt;/h3&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">str2</span>: <span class="string">&#x27;&lt;a href=javaScript:location.href=&quot;http://www.baidu.com?&quot;+document.cookie&gt;点我跳转&lt;/a&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><ol>
<li>本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性</li>
<li>使用css配合v-cloak可以解决网速慢时页面展示的问题</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 属性选择器，选择所有带[]内属性的标签 */</span></span><br><span class="line"><span class="selector-attr">[v-cloak]</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;FOund&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><ol>
<li><code>v-once</code>所在节点在初次动态选然后，就视为动态内容了。</li>
<li>以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span>&gt;</span>初始化的n值:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">n</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h3><ol>
<li>跳过其所在节点的编译过程</li>
<li>可利用它跳过：没有使用指令语法，没有使用插值语法的节点，会加快编译</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>Vue其实很简单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">n</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><blockquote>
<p><code>directives</code>配置项中存放自定义指令</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 需求1：定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 需求2：定义一个v-fbind指令，和v-bind指令功能类似，但可以让其所绑定的input元素默认获取焦点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前n值是:<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>放大10倍后:<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-big</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-fbind:value</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-定义语法"><a href="#1-定义语法" class="headerlink" title="1.定义语法"></a>1.定义语法</h4><h5 id="1-局部指令"><a href="#1-局部指令" class="headerlink" title="(1)局部指令"></a>(1)局部指令</h5><p><strong>函数写法：</strong></p>
<blockquote>
<p>big函数何时被调用？</p>
<ol>
<li>指令与元素成功绑定时</li>
<li>指令所在的模板被重新解析时</li>
</ol>
</blockquote>
<blockquote>
<p>更加注重细节</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">directive</span>: &#123;</span><br><span class="line">    <span class="comment">// big函数何时被调用？</span></span><br><span class="line">    <span class="comment">// 1.指令与元素成功绑定时</span></span><br><span class="line">    <span class="comment">// 2.指令所在的模板被重新解析时</span></span><br><span class="line">    <span class="comment">// &#x27;big-number&#x27; (element, binfing) &#123;</span></span><br><span class="line">    <span class="comment">// 驼峰命名用-分割并且用引号引入</span></span><br><span class="line">    <span class="comment">//     element.innerText = binfing.value * 10;</span></span><br><span class="line">    <span class="comment">//     console.log(element, binfing.value);</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// 定义一个局部指令fbind(函数写法)</span></span><br><span class="line">    <span class="title function_">big</span>(<span class="params">element, binfing</span>) &#123;</span><br><span class="line">        element.<span class="property">innerText</span> = binfing.<span class="property">value</span> * <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 第一个参数：dom元素</span></span><br><span class="line">        <span class="comment">// 第二个参数：该被绑定元素的部分属性</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(element, binfing);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>对象写法：</strong></p>
<blockquote>
<p>其实就是函数写法中bind和updata的结合</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个局部指令fbind(对象写法)</span></span><br><span class="line"><span class="attr">fbind</span>: &#123;</span><br><span class="line">    <span class="comment">// Vue规定了指定函数名bind,inserted,updata</span></span><br><span class="line">    <span class="comment">// 指令与元素成功绑定时（开始）</span></span><br><span class="line">    <span class="title function_">bind</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">        element.<span class="property">value</span> = binding.<span class="property">value</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 指令所在元素被插入页面时</span></span><br><span class="line">    <span class="title function_">inserted</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">        element.<span class="title function_">focus</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 指令所在模块被重新赋值时</span></span><br><span class="line">    <span class="title function_">updata</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">        element.<span class="property">value</span> = binding.<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-全局指令"><a href="#2-全局指令" class="headerlink" title="(2)全局指令"></a>(2)全局指令</h5><p><strong>函数写法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个全局指令fbind</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directives</span>(<span class="string">&#x27;fbind&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// Vue规定了指定函数名bind,inserted,updata</span></span><br><span class="line">    <span class="comment">// 指令与元素成功绑定时（开始）</span></span><br><span class="line">    <span class="title function_">bind</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">        element.<span class="property">value</span> = binding.<span class="property">value</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 指令所在元素被插入页面时</span></span><br><span class="line">    <span class="title function_">inserted</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">        element.<span class="title function_">focus</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 指令所在模块被重新赋值时</span></span><br><span class="line">    <span class="title function_">updata</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">        element.<span class="property">value</span> = binding.<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>对象写法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局指令第二种函数写法</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directives</span>(<span class="string">&#x27;fbind&#x27;</span>, <span class="keyword">function</span>(<span class="params">element, binfing</span>) &#123;</span><br><span class="line">    element.<span class="property">innerText</span> = binfing.<span class="property">value</span> * <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 第一个参数：dom元素</span></span><br><span class="line">    <span class="comment">// 第二个参数：该被绑定元素的部分属性</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(element, binfing);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2-配置对象中常用的3个回调"><a href="#2-配置对象中常用的3个回调" class="headerlink" title="2.配置对象中常用的3个回调"></a>2.配置对象中常用的3个回调</h4><blockquote>
<p>(“参数1[被绑定的元素]”,”参数2[冒号后面被绑定的属性]”)</p>
</blockquote>
<ol>
<li>.bind:  指令与元素成功绑定时调用</li>
<li>.inserted:  指令所在元素被插入页面时调用</li>
<li>.update:  指令所在模板结构被重新解析时调用</li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220723162317415.png" alt="image-20220723162317415"></p>
<h4 id="3-备注-1"><a href="#3-备注-1" class="headerlink" title="3.备注"></a>3.备注</h4><ol>
<li>指令定义时不加v-，但使用时要加v-</li>
<li>指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;big-number&#x27;</span> (element, binfing) &#123;</span><br><span class="line"><span class="comment">// 驼峰命名用-分割并且用引号引入</span></span><br><span class="line">    element.<span class="property">innerText</span> = binfing.<span class="property">value</span> * <span class="number">10</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(element, binfing.<span class="property">value</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><strong>mounted配置项</strong></p>
<blockquote>
<ol>
<li>又名：生命周期回调函数，生命周期函数，生命周期钩子</li>
<li>是什么：Vue在关键时刻帮我们调用一些特殊名称的函数</li>
<li>生命周期函数的名字不可以更改，但函数的具体内容是程序员根据需求编写的</li>
<li>生命周期函数中的this指向是vm  或  组件实例对象</li>
</ol>
</blockquote>
<p>下面的例子是让h2执行一个动画，从透明度1到0。有两种写法，第一种是将定时器写在vue外面，第二种就是使用到了mounted。当Vue完成模板解析并把初始的真实DOM元素放入页面后（挂载完毕）再调用mounted内的代码。</p>
<blockquote>
<p>注意：</p>
<ul>
<li>mounted方法之前是存在其他方法的，之后也有。Vue在特定的情况下调用这些方法的行为被称为<strong>生命周期钩子</strong></li>
<li>把初始的真实DOM元素放入页面叫做<strong>挂载</strong>，另外注意是第一次把真实DOM放进页面，并不是更新DOM。</li>
</ul>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;a&quot;</span>&gt;</span>001<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;opacity&#125;&quot;</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">opacity</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">a</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 挂载</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// Vue完成模板解析并把初始的真实DOM元素放入页面后（挂载完毕）调用mounted</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// （将真实DOM放入页面叫做挂载）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// （mounted是在挂载完毕之后调用）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                vm.<span class="property">opacity</span> -= <span class="number">0.01</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (vm.<span class="property">opacity</span> &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    vm.<span class="property">opacity</span> = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">16</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 通过外部定时器实现</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// setInterval(() =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     vm.opacity -= 0.01;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     if (vm.opacity &lt;= 0) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         vm.opacity = 1;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;, 16);</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="分析生命周期"><a href="#分析生命周期" class="headerlink" title="分析生命周期"></a>分析生命周期</h3><p>[生命周期图解](<a href="https://www.yuque.com/docs/share/65187e9f-fbd4-450c-a4f0-0a2bb69b84a7#">https://www.yuque.com/docs/share/65187e9f-fbd4-450c-a4f0-0a2bb69b84a7?#</a> 《Vue生命周期》)</p>
<p><strong>常用生命周期钩子：</strong></p>
<ol>
<li>mounted：发送ajax请求，启动定时器，绑定自定义事件，订阅消息等【初始化操作】</li>
<li>beforeDestroy：清除定时器，解绑自定义事件，取消订阅消息等【收尾工作】</li>
</ol>
<p><strong>关于销毁Vue实例：</strong></p>
<ol>
<li>销毁后借助Vue开发者工具看不见任何信息</li>
<li>销毁后自定义事件会失效，但原生DOM事件依然有效</li>
<li>一般不会再beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是：&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>点我n++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;bye&quot;</span>&gt;</span>点我销毁vm<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// template存放模板</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// template: `</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &lt;div&gt;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     &lt;h2&gt;当前的n值是：&#123;&#123;n&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     &lt;button @click=&quot;add&quot;&gt;点我n++&lt;/button&gt;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// `,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">n</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">n</span>++;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">bye</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bye&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$destroy();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 此时：无法通过vm访问到data中的数据，methods的方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeCreate&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// debugger卡一个断点</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 此时：可以通过vm访问到data中的数据，methods中配置的方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;created&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// debugger;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 此时：</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1.页面呈现的是未经Vue编译的DOM结构</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2.所有对DOM的操作，最终都不奏效</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeMount&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// debugger;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 此时：</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1. 页面中呈现的是经过Vue编译的DOM。</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2. 对DOM的操作均有效(尽可能避免)。</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 至此初始化过程结束， 一般在此进行: 开启</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 定时器、 发送网络请求、 订阅消息、 绑定自</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 定义事件、 等初始化操作。 </span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeMount&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// debugger;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 此时：</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 数据是新的，但是页面是旧的，即：页面尚未和数据保持同步</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUpdate&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">n</span>); <span class="comment">//更改后的n，但是页面并没更改</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">updated</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 此时：</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 数据是新的</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;updated&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">n</span>); <span class="comment">//更改后的n，页面上的数据也更新</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 此时：</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// vm中的所有：data，methods，指令等等，都处于可用状态，马上要执行销毁过程，</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 一般在此阶段；关闭定时器，取消订阅消息，解绑自定义事件等收尾操作</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeDestroy&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">n</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 此时：</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 销毁完毕</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;destroyed&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Vue组件化编程"><a href="#Vue组件化编程" class="headerlink" title="Vue组件化编程"></a>Vue组件化编程</h1><h2 id="传统方式编写应用："><a href="#传统方式编写应用：" class="headerlink" title="传统方式编写应用："></a>传统方式编写应用：</h2><p>存在问题：</p>
<ol>
<li>依赖关系混乱，不好维护</li>
<li>代码复用率不高</li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220723204348600.png" alt="image-20220723204348600"></p>
<h2 id="使用组件编写应用："><a href="#使用组件编写应用：" class="headerlink" title="使用组件编写应用："></a>使用组件编写应用：</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220723204809438.png" alt="image-20220723204809438"></p>
<h2 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h2><blockquote>
<p>一个文件中包含n个组件</p>
</blockquote>
<h3 id="组件基本使用"><a href="#组件基本使用" class="headerlink" title="组件基本使用"></a>组件基本使用</h3><h4 id="1-定义组件"><a href="#1-定义组件" class="headerlink" title="1.定义组件"></a>1.定义组件</h4><p>使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样，但是区别如下：</p>
<ol>
<li>el不写，为什么？<ul>
<li>最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器</li>
</ul>
</li>
<li>data必须写成函数，为什么？<ul>
<li>避免组件被复用时，数据存在引用关系</li>
</ul>
</li>
</ol>
<blockquote>
<p>备注：使用template可以配置组件结构</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.创建组件</span></span><br><span class="line"><span class="comment">// 创建school组件</span></span><br><span class="line"><span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">    <span class="comment">// el: &#x27;#root&#x27;,</span></span><br><span class="line">    <span class="comment">// 组件无需定义他的位置，它的存在地点听从大哥(vm)</span></span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;学校名称:&#123;&#123;schoolName&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;学校地址:&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">schoolName</span>: <span class="string">&#x27;zhiyou&#x27;</span>,</span><br><span class="line">            <span class="attr">address</span>: <span class="string">&#x27;郑州&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 创建student组件</span></span><br><span class="line"><span class="keyword">const</span> student = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">    <span class="comment">// el: &#x27;#root&#x27;,</span></span><br><span class="line">    <span class="comment">// 组件无需定义他的位置，它的存在地点听从大哥(vm)</span></span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;学生名称:&#123;&#123;studentName&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;学生年龄:&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;button&gt;点击&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">studentName</span>: <span class="string">&#x27;FOund&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 创建hello组件</span></span><br><span class="line"><span class="keyword">const</span> hello = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">    <span class="comment">// el: &#x27;#root&#x27;,</span></span><br><span class="line">    <span class="comment">// 组件无需定义他的位置，它的存在地点听从大哥(vm)</span></span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;h2&gt;Hello &#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;FOund&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2-注册组件"><a href="#2-注册组件" class="headerlink" title="2.注册组件"></a>2.注册组件</h4><ol>
<li>局部注册：<ul>
<li>靠new Vue的时候传入components选项</li>
</ul>
</li>
<li>全局注册：<ul>
<li>靠Vue.component(’组件名‘,组件)</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.注册组件（全局注册）</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;hello&#x27;</span>, hello);</span><br><span class="line"><span class="comment">// 创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;你好啊&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 组件门</span></span><br><span class="line">    <span class="comment">// 2.注册组件（局部注册）</span></span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="comment">// 组件命名</span></span><br><span class="line">        <span class="comment">// 驼峰命名法</span></span><br><span class="line">        <span class="comment">// 在使用组件步骤中标签名字应为</span></span><br><span class="line">        <span class="comment">// &lt;school-assembly&gt;&lt;/school-assembly&gt;或者</span></span><br><span class="line">        <span class="comment">// &lt;school-Assembly&gt;&lt;/school-Assembly&gt;</span></span><br><span class="line">        <span class="attr">schoolAssembly</span>: school,</span><br><span class="line">        <span class="comment">// 简写形式</span></span><br><span class="line">        student</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="3-编写组件标签"><a href="#3-编写组件标签" class="headerlink" title="3.编写组件标签"></a>3.编写组件标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.使用组件，编写组件标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">school-assembly</span>&gt;</span><span class="tag">&lt;/<span class="name">school-assembly</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="组件几个注意点"><a href="#组件几个注意点" class="headerlink" title="组件几个注意点"></a>组件几个注意点</h3><h4 id="组件命名规范"><a href="#组件命名规范" class="headerlink" title="组件命名规范"></a>组件命名规范</h4><h5 id="一个单词组成"><a href="#一个单词组成" class="headerlink" title="一个单词组成"></a>一个单词组成</h5><ul>
<li>第一种写法 (首字母小写)：my-school</li>
<li>第二种写法(首字母大写)：School</li>
</ul>
<h5 id="多个单词组成"><a href="#多个单词组成" class="headerlink" title="多个单词组成"></a>多个单词组成</h5><ul>
<li>第一种写法(kebab-case命名)：my-school</li>
<li>第二种写法(CamelCase命名)：MySchool（需要使用Vue脚手架支持）</li>
</ul>
<h5 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h5><ol>
<li>组件名尽可能回避HTML中已有的元素名称，例如：h2,H2都不行。</li>
<li>可以使用name配置项指定组件在开发者工具中呈现的名字。</li>
</ol>
<blockquote>
<p>在创建组件中添加配置项<code>name：&#39;&#39;</code>可以更改组件在开发者工具中呈现的名字</p>
<p>一般在第三方组件库或者大型项目会这样使用</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;xvexiao&#x27;</span>,</span><br><span class="line">    <span class="comment">// el: &#x27;#root&#x27;,</span></span><br><span class="line">    <span class="comment">// 组件无需定义他的位置，它的存在地点听从大哥(vm)</span></span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;学校名称:&#123;&#123;schoolName&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;学校地址:&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">schoolName</span>: <span class="string">&#x27;zhiyou&#x27;</span>,</span><br><span class="line">            <span class="attr">address</span>: <span class="string">&#x27;郑州&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="关于组件标签"><a href="#关于组件标签" class="headerlink" title="关于组件标签"></a>关于组件标签</h4><ul>
<li><p>第一种写法：<code>&lt;school&gt;&lt;/school&gt;</code></p>
</li>
<li><p>第二中写法：<code>&lt;school/&gt;</code></p>
</li>
<li><blockquote>
<p>备注：不使用脚手架时，<code>&lt;school/&gt;</code>会导致后续组件不能渲染</p>
</blockquote>
</li>
</ul>
<h4 id="一个简写方式"><a href="#一个简写方式" class="headerlink" title="一个简写方式"></a>一个简写方式</h4><p><code>const school = Vue.extend(options)</code>可以简写为：<code>const school = options</code></p>
<blockquote>
<p>看似创建的组件是一个对象形式，但是Vue在后台有一个判断，实际上还是调用了<code>Vue.extend(options)</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建student组件</span></span><br><span class="line"><span class="keyword">const</span> student = &#123;</span><br><span class="line">    <span class="comment">// el: &#x27;#root&#x27;,</span></span><br><span class="line">    <span class="comment">// 组件无需定义他的位置，它的存在地点听从大哥(vm)</span></span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;学生名称:&#123;&#123;studentName&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;学生年龄:&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;button&gt;点击&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">studentName</span>: <span class="string">&#x27;FOund&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.config.productionTip = false;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    // 定义school组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const student = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生：</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">           <span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                name: &#x27;FOund&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                age: 18</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    // 定义school组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const school = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>名：</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">           <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">address</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">           <span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                name: &#x27;FOund&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                address: &#x27;zz&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // 注册组件（局部）</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        components: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            student</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    // 定义hello组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const hello = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello </span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>    </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                name: &#x27;FOund&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    // 定义app组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const app = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `    </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        components: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            school,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            hello</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">app</span>&gt;</span><span class="tag">&lt;/<span class="name">app</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // 注册组件（局部）</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        components: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            app</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="关于VueComponent"><a href="#关于VueComponent" class="headerlink" title="关于VueComponent"></a>关于VueComponent</h3><ol>
<li>school组件本质上是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。</li>
<li>我们只需要写<code>&lt;school&gt;</code>或<code>&lt;school&gt;&lt;/school&gt;</code>,Vue解析时会帮我们创建school组件的实例对象即Vue帮我们执行的：new VueComponent(options)</li>
<li>特别注意：每次调用Vue.extend。返回的都是一个全新的VueComponent！！！</li>
<li>关于this指向：<ul>
<li>组件配置中：<ul>
<li>data函数，methods中的函数，watch中的函数，computed中的函数，他们的this均是【VueComponent实例对象】</li>
</ul>
</li>
<li>new Vue(options)配置中：<ul>
<li>data函数，methods中的函数，watch中的函数，computed中的函数，他们的this均是【Vue实例对象】</li>
</ul>
</li>
</ul>
</li>
<li>VueComponent的实例对象，以后简称<strong>vc</strong>（也可称为：<strong>组件实例对象</strong>）<ul>
<li>Vue的实例对象，以后简称<strong>vm</strong></li>
</ul>
</li>
</ol>
<h3 id="一个重要的内置关系"><a href="#一个重要的内置关系" class="headerlink" title="一个重要的内置关系"></a>一个重要的内置关系</h3><ol>
<li>一个重要的内置关系：<code>VueComponent.prototype.__proto__===Vue.prototype</code></li>
<li>为什么要有这个关系：让组件实例对象(vc)可以访问到Vue原型上的属性，方法</li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220724165031366.png" alt="image-20220724165031366"></p>
<h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><blockquote>
<p>一个文件中只有一个组件（一个.vue就代表一个组件）</p>
</blockquote>
<h3 id="1-编写最基本的School组件"><a href="#1-编写最基本的School组件" class="headerlink" title="1.编写最基本的School组件"></a>1.编写最基本的School组件</h3><p>创建<code>School.vue</code>文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 组件的结构 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;demo&quot;&gt;</span><br><span class="line">        &lt;h2&gt;学校名称:&#123;&#123;schoolName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">         &lt;h2&gt;学校地址:&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">         &lt;h2&gt;&#123;&#123;n&#125;&#125;&lt;/h2&gt;</span><br><span class="line">         &lt;button @click=&quot;add&quot;&gt;点我n++&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 组件交互相关的代码（数据，方法，等等） --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 暴露第二种写法</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;School&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                 schoolName: &#x27;zhiyou&#x27;,</span><br><span class="line">                 address: &#x27;郑州&#x27;,</span><br><span class="line">                 n:0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            add()&#123;</span><br><span class="line">                n++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    // 暴露第一种写法</span><br><span class="line">    // export default &#123;school&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 组件的样式 --&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .demo&#123;</span><br><span class="line">        background-color: orange;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-编写APP操控组件"><a href="#2-编写APP操控组件" class="headerlink" title="2.编写APP操控组件"></a>2.编写APP操控组件</h3><p>新建<code>App.vue</code>文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;School&gt;&lt;/School&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import School from &#x27;./School.vue&#x27;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        components:&#123;</span><br><span class="line">            School,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-编写入口文件"><a href="#3-编写入口文件" class="headerlink" title="3.编写入口文件"></a>3.编写入口文件</h3><p>新建<code>main.js</code>入口文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 入口文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="title class_">App</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="4-新建html文件"><a href="#4-新建html文件" class="headerlink" title="4.新建html文件"></a>4.新建html文件</h3><p>新建<code>index.html</code>文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Vue-CLI"><a href="#Vue-CLI" class="headerlink" title="Vue CLI"></a>Vue CLI</h1><h2 id="脚手架配置"><a href="#脚手架配置" class="headerlink" title="脚手架配置"></a>脚手架配置</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol>
<li>Vue脚手架是Vue官方提供的标准化开发工具（开发平台）</li>
<li>最新的版本是4.x</li>
<li><a href="https://cli.vuejs.org/zh/">官方文档</a></li>
<li>全局安装<code>npm install -g @vue/cli</code></li>
<li>执行命令<code>npm run serve</code>启动vue</li>
</ol>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220724201954642.png" alt="image-20220724201954642"></p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li>babel.config文件跟webpack有关，检查语法和语法转换</li>
<li>package-lock跟npm包管理有关，主要放一些npm的相关信息</li>
<li>package记录第三方npm包的版本信息，<code>&quot;scripts&quot;</code>属性下存放着指令的详细配置</li>
<li>src文件<ul>
<li>assets中存放一些静态资源文件</li>
<li>components文件存放组件</li>
<li>App.vue 是管理组件的老大</li>
<li>main.js 入口文件</li>
</ul>
</li>
<li>public文件<ul>
<li>favicon.ico 页面页签logo</li>
<li>index.html 主要页面</li>
</ul>
</li>
</ul>
<h3 id="关于main中的render"><a href="#关于main中的render" class="headerlink" title="关于main中的render"></a>关于main中的render</h3><blockquote>
<p>render的使用实际上就是Vue引入的问题，脚手架中引入的是精简化过的Vue<code>vue.runtime.js</code></p>
</blockquote>
<p><strong>vue.js与vue.runtime.xxx.js的区别</strong></p>
<ol>
<li>vue.js是完整版的Vue，包含：核心功能+模板解析器</li>
<li>vue.runtime.xxx.js是运行版的Vue，只包含：核心功能：没有模板解析器</li>
</ol>
<blockquote>
<p>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用render函数接收到createElement函数去指定具体内容</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="comment">// 完成了将App组件放入容器中</span></span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    <span class="comment">// render(createElement) &#123;</span></span><br><span class="line">    <span class="comment">//     return createElement(&#x27;hi&#x27;, &#x27;你好啊&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// template: `&lt;h1&gt;你好啊&lt;/h1&gt;`,</span></span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="修改默认配置"><a href="#修改默认配置" class="headerlink" title="修改默认配置"></a>修改默认配置</h2><p>vue脚手架默认隐藏了所有webpack相关的配置，若想要查看具体的webpack配置，</p>
<p>请执行：<code>vue inspect &gt; output.js</code>会生成一个<code>vue.config.js</code>文件</p>
<p>通过<a href="https://cli.vuejs.org/zh/config/">查看文档</a>来定制你的vue相关配置</p>
<p><strong>示例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">pages</span>: &#123;</span><br><span class="line">        <span class="attr">index</span>: &#123;</span><br><span class="line">            <span class="comment">// page 的入口</span></span><br><span class="line">            <span class="attr">entry</span>: <span class="string">&#x27;src/main.js&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 语法检查关闭</span></span><br><span class="line">    <span class="attr">lintOnSave</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>平时练习建议关闭语法检查避免不必要的报错</p>
</blockquote>
<h3 id="关于不同版本的Vue"><a href="#关于不同版本的Vue" class="headerlink" title="关于不同版本的Vue"></a>关于不同版本的Vue</h3><ul>
<li>Vue.js与vue.runtime.xxx.js的区别<ul>
<li>vue.js是完整的Vue,包含：核心功能+模板解析器</li>
<li>vue.runtime.xxx.js试运行版的Vue，只包含：核心功能：没有模板解析器</li>
</ul>
</li>
<li>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用render函数接收到createElement函数去指定具体内容</li>
</ul>
<h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><blockquote>
<p>简单来说就是获取元素</p>
</blockquote>
<ol>
<li>被用来给元索或子组件注册引用信息 (id的替代者)</li>
<li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象(vc)</li>
<li>使用方式:<ul>
<li>打标识: <code>&lt;h1 ref=&quot;xx&quot;&gt;.....&lt;/h1&gt;</code>或<code>&lt;School ref=&quot;xxx&quot; &gt;&lt;/School&gt;</code><br>获取: this. $refs. xxx</li>
</ul>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">       &lt;h1 v-text=&quot;msg&quot; ref=&quot;title&quot;&gt;&lt;/h1&gt;</span><br><span class="line">       &lt;button @click=&quot;showDom&quot; ref=&quot;btn&quot;&gt;点我输出上方的DOM元素&lt;/button&gt;</span><br><span class="line">       &lt;School ref=&quot;sch&quot;/&gt;</span><br><span class="line">       &lt;School id=&quot;sch&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 引入school组件</span><br><span class="line">import School from &quot;./components/School.vue&quot;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123;School&#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg:&#x27;欢迎&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        showDom()&#123;</span><br><span class="line">            // 获取具有ref标签标注的标签</span><br><span class="line">            console.log(this.$refs);</span><br><span class="line">            console.log(this.$refs.title);//真实dom元素</span><br><span class="line">            console.log(this.$refs.btn);//真实dom元素</span><br><span class="line">            console.log(this.$refs.sch);//School组件的实例对象（vc）</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="配置项props"><a href="#配置项props" class="headerlink" title="配置项props"></a>配置项props</h2><blockquote>
<p>功能：让组件接收外部传过来的数据</p>
</blockquote>
<h3 id="1-传递数据"><a href="#1-传递数据" class="headerlink" title="1.传递数据"></a>1.传递数据</h3><p><code>&lt;Demo name=&quot;xxx&quot; /&gt;</code></p>
<p>通过在标签上添加属性来传递数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Student</span> <span class="attr">name</span>=<span class="string">&quot;李四&quot;</span> <span class="attr">sex</span>=<span class="string">&quot;女&quot;</span> <span class="attr">:age</span>=<span class="string">&quot;18&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Student</span> <span class="attr">name</span>=<span class="string">&quot;王老五&quot;</span> <span class="attr">sex</span>=<span class="string">&quot;男&quot;</span> <span class="attr">:age</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-接收数据"><a href="#2-接收数据" class="headerlink" title="2.接收数据"></a>2.接收数据</h3><h4 id="第一种方式-只接收"><a href="#第一种方式-只接收" class="headerlink" title="第一种方式(只接收)"></a>第一种方式(只接收)</h4><blockquote>
<p>简单声明接受（开发中写得多）</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;age&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h4 id="第二种方式-限制类型"><a href="#第二种方式-限制类型" class="headerlink" title="第二种方式(限制类型)"></a>第二种方式(限制类型)</h4><blockquote>
<p>接收的同时对数据进行类型限制</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="title class_">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="第三种方式-限制类型，限制必要性，指定默认值"><a href="#第三种方式-限制类型，限制必要性，指定默认值" class="headerlink" title="第三种方式(限制类型，限制必要性，指定默认值)"></a>第三种方式(限制类型，限制必要性，指定默认值)</h4><blockquote>
<p>接收的同时对数据进行类型限制+默认值的指定+必要性的限制（正规的开发）</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">String</span>,<span class="comment">//name类型字符串</span></span><br><span class="line">        <span class="attr">required</span>:<span class="literal">true</span>,<span class="comment">//name是必要的，与required一般不一起写</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">age</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">Number</span>,</span><br><span class="line">        <span class="attr">default</span>:<span class="number">99</span><span class="comment">//默认值</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">sex</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">required</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="备注：-3"><a href="#备注：-3" class="headerlink" title="备注："></a>备注：</h3><blockquote>
<p>props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据</p>
</blockquote>
<p><strong>在data数据中添加新的数据：</strong></p>
<blockquote>
<p>其实是创建了一个新的数据放到_data中变成可修改的</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;你好&#x27;</span>,</span><br><span class="line">        <span class="attr">myAge</span>:<span class="variable language_">this</span>.<span class="property">age</span> <span class="comment">//this指向vc上的age</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="mixin混入-混合"><a href="#mixin混入-混合" class="headerlink" title="mixin混入(混合)"></a>mixin混入(混合)</h2><blockquote>
<p>可以把多个组件共用的配置提取成一个混入对象</p>
</blockquote>
<p><strong>使用方法：</strong></p>
<p> 新建文件<code>minin.js</code>,定义公用配置并暴露出去</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mixin = &#123;</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 生命周期也可以</span></span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好啊&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mixin2 = &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">x</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="number">200</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>在你需要的组件中引入这个公用配置</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入一个混合mixin</span></span><br><span class="line"><span class="keyword">import</span> &#123; mixin,mixin2 &#125; <span class="keyword">from</span> <span class="string">&#x27;./mixin&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>添加配置项mixins</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mixins:[mixin,mixin2] </span><br></pre></td></tr></table></figure>

<p>此时引入公用配置项的组件都有了公共配置项<code>mixin.js</code></p>
<p><em>全局混入：</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mixin1,mixin2&#125; <span class="keyword">from</span> <span class="string">&#x27;./mixin.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(mixin1);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(mixin2);</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>时所有的组件都有了公共配置项，不管是App还是App里面的子组件</li>
<li>但是当单个组件中存在已有的重复的配置，优先使用</li>
</ul>
</blockquote>
<h2 id="Vue插件"><a href="#Vue插件" class="headerlink" title="Vue插件"></a>Vue插件</h2><blockquote>
<p>功能：用于增强Vue</p>
<p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据</p>
</blockquote>
<p><strong>定义插件</strong></p>
<blockquote>
<p>新建一个文件夹<code>plugins.js</code>脚本文件，注意将数据暴露出去</p>
<ol>
<li>添加全局过滤器</li>
<li>添加全局指令</li>
<li>配置全局混入</li>
<li>添加实例方法（在Vue原型上添加公共方法、属性）</li>
</ol>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">install</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line">        <span class="comment">// 1.全局过滤器定义</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;mySlice&#x27;</span>, <span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取4位数据</span></span><br><span class="line">            <span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 2.定义一个全局指令fbind</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;fbind&#x27;</span>, &#123;</span><br><span class="line">            <span class="comment">// Vue规定了指定函数名bind,inserted,updata</span></span><br><span class="line">            <span class="comment">// 指令与元素成功绑定时（开始）</span></span><br><span class="line">            <span class="title function_">bind</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">                element.<span class="property">value</span> = binding.<span class="property">value</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 指令所在元素被插入页面时</span></span><br><span class="line">            <span class="title function_">inserted</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">                element.<span class="title function_">focus</span>();</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 指令所在模块被重新赋值时</span></span><br><span class="line">            <span class="title function_">updata</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">                element.<span class="property">value</span> = binding.<span class="property">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 3.定义混入</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">x</span>: <span class="number">100</span>,</span><br><span class="line">                    <span class="attr">y</span>: <span class="number">200</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 4.给Vue原型上添加一个方法(vm和vc都可以用)</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span> = <span class="function">() =&gt;</span> &#123; <span class="title function_">alert</span>(<span class="string">&#x27;你好啊！&#x27;</span>) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用插件</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入插件</span></span><br><span class="line"><span class="keyword">import</span> plugins <span class="keyword">from</span> <span class="string">&quot;./plugins&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用use应用插件,有点像中间件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(plugins);</span><br></pre></td></tr></table></figure>

<h2 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h2><blockquote>
<p>不同组件之间添加样式可能会造成类名等冲突，scoped出现就避免了这类问题</p>
</blockquote>
<ul>
<li>scoped属性<ul>
<li>使内部css仅限于该组件，使其局部生效</li>
</ul>
</li>
<li>lang属性<ul>
<li>规定内部css书写规范</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- scoped将该style内的样式变成局部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="uuid"><a href="#uuid" class="headerlink" title="uuid"></a>uuid</h2><h2 id="nanid"><a href="#nanid" class="headerlink" title="nanid"></a>nanid</h2><h2 id="实现子组件向父组件传递数据"><a href="#实现子组件向父组件传递数据" class="headerlink" title="实现子组件向父组件传递数据"></a>实现子组件向父组件传递数据</h2><blockquote>
<p>通常情况下组件之间的传递数据通过props可实现，但是仅限于父组件向子组件传递数据，而兄弟组件之间也无法进行传递</p>
</blockquote>
<p><strong>解决思路</strong></p>
<ul>
<li>在父组件例如App上添加一个可以传参方法</li>
<li>将这个方法传递给子组件</li>
<li>子组件接收到这个方法，并使用这个方法将数据当作实参传入进去</li>
<li>这时，父组件就会接收到子组件传递过来的数据</li>
</ul>
<p><strong>app.vue</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="comment">// 这个x就是子组件传递的数据</span></span><br><span class="line">  <span class="title function_">addTodo</span>(<span class="params">x</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">unshift</span>(x);<span class="comment">//忽略</span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 将这个方法传递给myHeader子组件</span><br><span class="line"><span class="tag">&lt;<span class="name">myHeader</span> <span class="attr">:addTodo</span>=<span class="string">&quot;addTodo&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>myHeader.vue</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="comment">//接收 addTodo 方法</span></span><br><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;addTodo&#x27;</span>],</span><br><span class="line">   <span class="attr">methods</span>:&#123;</span><br><span class="line">       <span class="title function_">add</span>(<span class="params">e</span>)&#123;</span><br><span class="line">           <span class="comment">//----------↓↓↓忽略↓↓↓-------------</span></span><br><span class="line">           <span class="keyword">if</span> (!e.<span class="property">target</span>.<span class="property">value</span>.<span class="title function_">trim</span>()) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;输入不能为空&#x27;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 将用户的输入包装成一个todo对象</span></span><br><span class="line">           <span class="keyword">const</span> todoObj=&#123;</span><br><span class="line">               <span class="comment">// 使用nanoid生成不重复id</span></span><br><span class="line">               <span class="attr">id</span>:<span class="title function_">nanoid</span>(),</span><br><span class="line">               <span class="attr">title</span>:e.<span class="property">target</span>.<span class="property">value</span>,</span><br><span class="line">               <span class="attr">done</span>:<span class="literal">false</span></span><br><span class="line">           &#125;;</span><br><span class="line">           e.<span class="property">target</span>.<span class="property">value</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">           <span class="comment">//----------↑↑↑忽略↑↑↑-------------</span></span><br><span class="line">           </span><br><span class="line">           <span class="variable language_">this</span>.<span class="title function_">addTodo</span>(todoObj);</span><br><span class="line">           <span class="comment">// 将子组件header产生的数据传递给app父组件  ←重要</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="组件自定义事件"><a href="#组件自定义事件" class="headerlink" title="组件自定义事件"></a>组件自定义事件</h2><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><blockquote>
<p>需求：点击子组件中的btn将子组件的数据传递给App</p>
<ul>
<li>思路1：通过父组件给子组件传递函数类型的props实现：子给父传递数据*(与上文一样)*</li>
<li>思路2：通过父组件给子组件绑定自定义事件实现：子给父传递数据*(第一种写法：使用@或者v-on)*</li>
<li>思路3：通过ref获取到这个组件*(第二种写法：使用ref)*</li>
</ul>
</blockquote>
<p><strong>App.vue添加事件：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">getSchoolNane</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app收到学校名&#x27;</span>,name);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">getStudentNane</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app收到学生名&#x27;</span>,name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<blockquote>
<p>事件触发的方法要写在被绑定者身上</p>
</blockquote>
<p><strong>Student.vue添加方法:</strong></p>
<blockquote>
<p>$emit(“事件”,[传递的参数])  触发组件实例对象身上的事件</p>
<ul>
<li>传递的参数可以是多个不唯一，但是接收也要有形参接收</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 这个方法可以写在一个按钮上</span></span><br><span class="line">    <span class="title function_">sendStudentName</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 触发Student组件实例对象身上的found事件</span></span><br><span class="line">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;found&#x27;</span>,<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><strong>思路2：</strong></p>
<blockquote>
<p>跟内置事件一样，也可以写事件修饰符，例如触发一次的<code>.once</code></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过父组件给子组件绑定自定义事件实现：子给父传递数据(第一种写法：使用@或者v-on) --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Student</span> <span class="attr">v-on:found</span>=<span class="string">&quot;getStudentNane&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 两种其中一个 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Student</span> @<span class="attr">found</span>=<span class="string">&quot;getStudentNane&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>**思路3:**（更灵活）</p>
<blockquote>
<p>通过ref可以获取到这个组件，然后在<code>mounted</code>挂载完毕生命周期执行这个自定义事件</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过ref获取到这个组件(第二种写法：使用ref) --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Student</span> <span class="attr">ref</span>=<span class="string">&quot;student&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//this.$refs.student获取到这个组件</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">student</span>.$on(<span class="string">&#x27;found&#x27;</span>,<span class="variable language_">this</span>.<span class="property">getStudentNane</span>) <span class="comment">//绑定自定义事件</span></span><br><span class="line">    <span class="comment">//this.$refs.student.$once(&#x27;found&#x27;,this.getStudentNane)//绑定自定义事件(仅触发一次)</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="事件解绑"><a href="#事件解绑" class="headerlink" title="事件解绑"></a>事件解绑</h3><p>两种解绑事件的方法，一种是通过<code>$off()</code>,一种是通过<code>$destroy()</code></p>
<ul>
<li><code>$off()</code>仅仅解绑事件</li>
<li><code>$destroy()</code>销毁当前组件实例,就连vm也可以销毁</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title class_">Unbind</span>()&#123;</span><br><span class="line">        <span class="comment">// 1.仅适用于解绑一个事件</span></span><br><span class="line">        <span class="variable language_">this</span>.$off(<span class="string">&#x27;found&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.解绑多个自定义事件</span></span><br><span class="line">        <span class="comment">// this.$off([&#x27;found&#x27;,&#x27;demo&#x27;]);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.解绑所有自定义事件</span></span><br><span class="line">        <span class="comment">// this.$off();</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">death</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.$destroy();<span class="comment">//销毁了当前的student组件实例</span></span><br><span class="line">        <span class="comment">// 销毁后所有student实例的自定义事件全都不奏效</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li><p>自定义事件是一种组件间通信的方式，适用于：<strong>子组件&#x3D;&#x3D;&#x3D;&gt;父组件</strong></p>
</li>
<li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那就要在A中给B绑定自定义事件(事件的回调在A中)</p>
</li>
<li><p>绑定自定义事件：</p>
<ol>
<li><p>第一种，在父组件中：<code>&lt;Demo @found=&quot;found&quot;/&gt;</code>或<code>&lt;Demo v-on:&quot;found&quot;/&gt;</code></p>
</li>
<li><p>第二种，在父组件中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Demo</span> ref=<span class="string">&quot;demo&quot;</span>&gt;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">xxx</span>.$on(<span class="string">&#x27;found&#x27;</span>,<span class="variable language_">this</span>.<span class="property">test</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>若想让自定义事件之触发一次，可以使用<code>once</code>修饰符，或者<code>$once</code>方法</p>
</li>
</ol>
</li>
<li><p>触发自定义事件：<code>this.$emit(&#39;found&#39;,数据)</code></p>
</li>
<li><p>解绑自定义事件：<code>this.$off(&#39;found&#39;)</code></p>
</li>
<li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符</p>
<ul>
<li><code>&lt;Student ref=&quot;student&quot; @click.native=&quot;show&quot;/&gt;</code></li>
</ul>
</li>
<li><p>注意：通过<code>this.$refs.xxx.$on(&#39;found&#39;,回调)</code>绑定自定义事件时，回调要么配置在methods中，要么用箭头函数，否则this指向会出问题</p>
</li>
</ol>
<h2 id="全局实现总线-GlobalEventBus"><a href="#全局实现总线-GlobalEventBus" class="headerlink" title="全局实现总线(GlobalEventBus)"></a>全局实现总线(GlobalEventBus)</h2><blockquote>
<p>一种组件间通信的方式，适用于任意组件间通信</p>
<p>本质上还是绑定自定义事件和触发</p>
</blockquote>
<p><strong>安装全局事件总线：</strong></p>
<ul>
<li>在main入口文件中</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 在Vue原型上添加</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span>; <span class="comment">//安装全局事件总线</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>使用事件总线：</strong></p>
<ul>
<li>发送数据，在发送数据组件上添加触发自定义事件的方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// 发送数据组件</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">       <span class="title function_">sentStudentName</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&#x27;hello&#x27;</span>,<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>接收数据，接收数据的组件则在公共$bus组件身上绑定自定义事件，同时，在销毁组件之前要解绑事件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 挂载完毕钩子</span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;hello&#x27;</span>,<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是school组件，收到了名字&#x27;</span>,data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 销毁之前钩子</span></span><br><span class="line"><span class="title function_">beforeDestroy</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$off(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="消息订阅与发布"><a href="#消息订阅与发布" class="headerlink" title="消息订阅与发布"></a>消息订阅与发布</h2><p>使用到第三方包<strong>pubsub-js</strong></p>
<blockquote>
<p>一种组件间通信的方式，适用于任意组件间通信</p>
</blockquote>
<p><strong>使用步骤：</strong></p>
<ol>
<li>安装pubsub:<code>npm i pubsub-js</code></li>
<li>引入:<code>import pubsub from &#39;pubsub-js&#39;</code></li>
<li>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的回调留在A组件自身</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 挂载完毕钩子</span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pubid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="function">(<span class="params">msgName,data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人发布了hello消息，hello消息的回调执行了&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(msgName,data);</span><br><span class="line">        <span class="comment">// msgName是发布订阅名</span></span><br><span class="line">        <span class="comment">// data是传递的数据</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 销毁之前钩子</span></span><br><span class="line"><span class="title function_">beforeDestroy</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 在组件销毁之前取消订阅</span></span><br><span class="line">    pubsub.<span class="title function_">unsubscribe</span>(<span class="variable language_">this</span>.<span class="property">pubid</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code><ul>
<li>xxx代表消息名</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">sentStudentName</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// this.$bus.$emit(&#x27;hello&#x27;,this.name)</span></span><br><span class="line">        pubsub.<span class="title function_">publish</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="number">666</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>最好在beforeDestroy钩子中，用<code>pubsub.unsubscribe(this.pubid)</code>去<span style="color:red">取消订阅</span></li>
</ol>
<blockquote>
<p>注意：</p>
<ol>
<li>pubsub.subscribe中的普通函数this指向undefined，需要使用到箭头函数指向到组件本身</li>
<li>pubsub.subscribe会返回一个类似“id”一样的识别，要想取消订阅，需要将此“id”添加到组件上，再通过<code>pubsub.unsubscribe(this.pubid)</code>取消订阅，类似于定时器取消</li>
</ol>
</blockquote>
<h2 id="nextTick生命周期钩子"><a href="#nextTick生命周期钩子" class="headerlink" title="nextTick生命周期钩子"></a>nextTick生命周期钩子</h2><ol>
<li>语法：<code>this.$nextTick(回调函数)</code></li>
<li>作用：在下一次DOM更新结束后执行其指定的回调</li>
<li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行</li>
</ol>
<h2 id="Vue动画-含animate-css"><a href="#Vue动画-含animate-css" class="headerlink" title="Vue动画(含animate.css)"></a>Vue动画(含animate.css)</h2><blockquote>
<p>所用：在插入，更新或移除DOM元素时，在合适的时候给元素添加样式类名</p>
</blockquote>
<p>图示：</p>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220731192516678.png" alt="image-20220731192516678"></p>
<h3 id="vue内置"><a href="#vue内置" class="headerlink" title="vue内置"></a>vue内置</h3><h4 id="写法1："><a href="#写法1：" class="headerlink" title="写法1："></a>写法1：</h4><blockquote>
<p>使用@keyframes动画写</p>
<p>定义进入动画和离开动画使用</p>
<ul>
<li>.hello-enter-active     <em>进入</em></li>
<li>.hello-leave-active     <em>离开</em></li>
<li>注意：‘hello’ 为自定义name，默认为 v</li>
</ul>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hello-enter-active</span>&#123;</span><br><span class="line">    <span class="attribute">animation</span>: shoW <span class="number">1s</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hello-leave-active</span>&#123;</span><br><span class="line">    <span class="attribute">animation</span>: shoW <span class="number">1s</span> reverse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> shoW &#123;</span><br><span class="line">    <span class="selector-tag">from</span>&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span>&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>使用<code>&lt;transition&gt;&lt;/transition&gt;</code>标签包裹</li>
<li>添加name加以识别默认为v</li>
<li>添加appear表示加载页面前执行一次进入动画<ul>
<li>也可写作：<code>:appear:true</code></li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = !isShow&quot;</span>&gt;</span>显示/隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>data内添加数据isShow来控制动画的显示与隐藏</p>
</blockquote>
<h4 id="写法2"><a href="#写法2" class="headerlink" title="写法2"></a>写法2</h4><blockquote>
<p>使用过渡来写</p>
<ul>
<li>分别写出进入、离开的起点和终点</li>
<li>将过渡属性<code>transition</code>添加给执行动画者身上<ul>
<li>此处有个bug，添加到执行动画者身上，位置会错乱</li>
<li>添加给<code>.hello-enter-active,.hello-leave-active</code>类名即可</li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 进入的起点 */</span></span><br><span class="line"><span class="selector-class">.hello-enter</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 进入的终点 */</span></span><br><span class="line"><span class="selector-class">.hello-enter-to</span>&#123;   </span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hello-enter-active</span>,<span class="selector-class">.hello-leave-active</span>&#123;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.5s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 离开的起点 */</span></span><br><span class="line"><span class="selector-class">.hello-leave</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 离开的终点 */</span></span><br><span class="line"><span class="selector-class">.hello-leave-to</span>&#123;   </span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>模板部分</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = !isShow&quot;</span>&gt;</span>显示/隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>   </span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>FOUND<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="animate-css"><a href="#animate-css" class="headerlink" title="animate.css"></a>animate.css</h3><blockquote>
<p>官网<a href="https://animate.style/">aninate.css</a></p>
</blockquote>
<ol>
<li>安装 <code>npm install animate.css --save</code></li>
<li>引入<code>import &#39;animate.css&#39;;</code></li>
<li>为<code>&lt;transition-group&gt;</code>添加属性</li>
</ol>
<ul>
<li><code>name=&quot;animate__animated animate__bounce&quot;</code><strong>必要属性</strong></li>
<li><strong>enter-active-class</strong>    进入属性</li>
<li><strong>leave-active-class</strong>    离开属性</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = !isShow&quot;</span>&gt;</span>显示/隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-group</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">appear</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;animate__animated animate__bounce&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">enter-active-class</span>=<span class="string">&quot;animate__swing&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">leave-active-class</span>=<span class="string">&quot;animate__backOutDown&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>   </span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>FOUND<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Vue中的AJAX"><a href="#Vue中的AJAX" class="headerlink" title="Vue中的AJAX"></a>Vue中的AJAX</h1><h2 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>在vue.config.js中添加如下配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开启代理服务器 方式1</span></span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ol>
<li>有点：配置简单，请求资源时直接发给前端(8080)即可</li>
<li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理</li>
<li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器（优先匹配前端资源）</li>
</ol>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>编写vue.config.js配置具体代理规则：</p>
<blockquote>
<p>devServer对象中的proxy可以写多个代理服务器</p>
<p>配置：</p>
<ul>
<li>pathRewrite: { ‘^&#x2F;api’: ‘’ } 表示代理服务器向服务器请求数据时将 前缀 变为空</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开启代理服务器 方式2</span></span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">            <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,</span><br><span class="line">            <span class="attr">ws</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">//用于支持websocket</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// changeOrigin: true,</span></span><br><span class="line">            <span class="comment">// 用于控制请求头中的host值</span></span><br><span class="line">            <span class="comment">// 改变向服务器提交的端口true为说谎，false为不说谎</span></span><br><span class="line"></span><br><span class="line">            <span class="attr">pathRewrite</span>: &#123; <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span> &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;/foo&#x27;</span>: &#123;</span><br><span class="line">            <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,</span><br><span class="line">            <span class="attr">pathRewrite</span>: &#123; <span class="string">&#x27;^/foo&#x27;</span>: <span class="string">&#x27;&#x27;</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ol>
<li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理</li>
<li>缺点：配置略微繁琐，请求资源时必须加前缀</li>
</ol>
<h2 id="Vue-resource"><a href="#Vue-resource" class="headerlink" title="Vue-resource"></a>Vue-resource</h2><blockquote>
<p>vue1.0使用较多</p>
</blockquote>
<p>安装：</p>
<ul>
<li><code>npm i vue-resource</code></li>
</ul>
<p>配置：</p>
<ul>
<li>在main.js入口文件中引入使用插件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入vue-resource</span></span><br><span class="line"><span class="keyword">import</span> vueResource <span class="keyword">from</span> <span class="string">&#x27;vue-resource&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(vueResource);</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">`https://api.github.com/search/users?q=<span class="subst">$&#123;<span class="variable language_">this</span>.keyWorld&#125;</span>`</span>).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败后&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>其实和axios一摸一样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">`https://api.github.com/search/users?q=<span class="subst">$&#123;<span class="variable language_">this</span>.keyWorld&#125;</span>`</span>).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败后&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ol>
<li>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于<strong>父组件&#x3D;&#x3D;&gt;子组件</strong></li>
<li>分类：默认插槽，具名插槽，作用域插槽</li>
<li>使用方式：默认插槽，具名插槽，作用域插槽</li>
</ol>
<h3 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h3><blockquote>
<p>想要实现这种效果就要使用到vue的插槽知识</p>
<ul>
<li>分成两个组件，一个app老大组件，一个分类块组件</li>
<li>分类块组件中的东西又不一样，可以利用插槽来配置</li>
</ul>
</blockquote>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220804230125411.png" alt="image-20220804230125411"></p>
<p><strong>App组件中：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;美食&quot;</span> &gt;</span></span><br><span class="line">     <span class="comment">&lt;!--这里面的标签会被放到Category组件的slot组件中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://ftp.bmp.ovh/imgs/2020/12/a3f405032b1db71a.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;游戏&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--此时遍历的数据是app中的数据--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(g,index) in games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;动画&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://ftp.bmp.ovh/imgs/2020/12/a3f405032b1db71a.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Category组件</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;title&#125;&#125;分类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义一个插槽标签(挖个坑，等待组件的使用者填充)</span></span><br><span class="line"><span class="comment">    接收img--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span>我是默认值，当组建的使用者没有传递具体结构的时候，我再出现<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><blockquote>
<p>要求每个组件标签体中的节点插入到指定<code>&lt;slot&gt;&lt;/slot&gt;</code>中，可以对slot进行命名</p>
<ul>
<li>通过对<code>&lt;slot&gt;&lt;/slot&gt;</code>进行命名<code>&lt;slot name=&#39;demo1&#39;&gt;&lt;/slot&gt;</code></li>
<li>标签体中的标签进行定位<code>slot=&quot;center&quot;</code></li>
<li>另外，如果你使用的是<code>&lt;template&gt;</code>标签就要使用<code>v-slot:footer</code>这种命名方式</li>
</ul>
</blockquote>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220804232157182.png" alt="image-20220804232157182"></p>
<p><strong>App.vue</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;美食&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://ftp.bmp.ovh/imgs/2020/12/a3f405032b1db71a.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>美食<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;游戏&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(g,index) in games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;foot&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;动画&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://ftp.bmp.ovh/imgs/2020/12/a3f405032b1db71a.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;foot&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>动画<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>动画<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h4</span>&gt;</span>欢迎<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Category.vue</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;title&#125;&#125;分类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义一个插槽标签(挖个坑，等待组件的使用者填充)</span></span><br><span class="line"><span class="comment">    就是挖出多个不同的坑，并命名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span>&gt;</span>我是默认值1，当组建的使用者没有传递具体结构的时候，我再出现<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>我是默认值2，当组建的使用者没有传递具体结构的时候，我再出现<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><blockquote>
<ul>
<li>当数据在子组件中，且无法向app传递数据的时候</li>
<li>Category.vue组件可以把数据传递给app.vue<ul>
<li>通过在slot标签中添加属性<code>:games=&quot;games&quot;</code></li>
<li>app.vue中组件标签体要用<code>&lt;template&gt;</code>包裹 并添加属性<code>scope=&quot;games&quot;</code></li>
<li>此时<code>&lt;template&gt;</code>内部就可以读取到games</li>
<li>也可通过解构赋值的操作避免多次调用，见下文</li>
</ul>
</li>
</ul>
</blockquote>
<p><strong>App.vue</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;游戏&quot;</span> &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">template</span> <span class="attr">scope</span>=<span class="string">&quot;games&quot;</span>&gt;</span>      </span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(g,index) in games.games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;游戏&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">scope</span>=<span class="string">&quot;&#123;games&#125;&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(g,index) in games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;游戏&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">scope</span>=<span class="string">&quot;games&quot;</span>&gt;</span> </span><br><span class="line">              <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-for</span>=<span class="string">&quot;(g, index) in games.games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Category.vue</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;title&#125;&#125;分类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 定义一个插槽标签(挖个坑，等待组件的使用者填充)</span></span><br><span class="line"><span class="comment">        接收img</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:games</span>=<span class="string">&quot;games&quot;</span>&gt;</span>默认内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><h2 id="Vuex是什么"><a href="#Vuex是什么" class="headerlink" title="Vuex是什么"></a>Vuex是什么</h2><blockquote>
<ol>
<li>概念：专门在Vue中实现集中式状态（数据）管理的一个Vue插件，对Vue应用中多个组件的共享状态进行集中式管理（读&#x2F;写），也是一种组件间通信的方式，且适用于任意组件间通信</li>
<li>Github地址：<a href="http://github.com/vuejs/vuex">链接</a></li>
<li>官方文档：<a href="https://vuex.vuejs.org/zh/">前往</a></li>
</ol>
</blockquote>
<h2 id="什么时候使用Vuex"><a href="#什么时候使用Vuex" class="headerlink" title="什么时候使用Vuex"></a>什么时候使用Vuex</h2><ol>
<li>多个组件依赖于同一状态(数据)</li>
<li>来自不同组件的行为需要变更同一状态<ul>
<li>a组件改变数据导致其他组件用的数据也发生改变</li>
</ul>
</li>
</ol>
<h3 id="全局事件总线实现"><a href="#全局事件总线实现" class="headerlink" title="全局事件总线实现"></a>全局事件总线实现</h3><blockquote>
<p>缺点：繁琐</p>
</blockquote>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220805104541797.png" alt="image-20220805104541797"></p>
<h3 id="Vuex实现"><a href="#Vuex实现" class="headerlink" title="Vuex实现"></a>Vuex实现</h3><blockquote>
<p>优点：牛逼</p>
</blockquote>
<p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220805104900299.png" alt="image-20220805104900299"></p>
<h2 id="Vuex工作原理"><a href="#Vuex工作原理" class="headerlink" title="Vuex工作原理"></a>Vuex工作原理</h2><p><img src="https://found-img-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220805143033637.png" alt="image-20220805143033637"></p>
<blockquote>
<ul>
<li>Vue Components相当于客人</li>
<li>Avtions相当于服务员</li>
<li>Mutations相当于后厨</li>
<li>State相当于饭菜(数据)</li>
</ul>
</blockquote>
<h2 id="Vuex安装"><a href="#Vuex安装" class="headerlink" title="Vuex安装"></a>Vuex安装</h2><blockquote>
<p>注意：</p>
<ul>
<li>vue2中，要用vuex的3版本</li>
<li>vue3中，要用vuex的4版本</li>
</ul>
</blockquote>
<p>执行：<code>npm i vue@3 </code>安装</p>
<p>搭建环境：</p>
<ol>
<li>创建文件夹<code>src/store/index.js</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该文件用于创建vuex中最为核心的store</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="comment">// 使用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>);</span><br><span class="line"><span class="comment">// 准备actions————用于响应组件中的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 准备Mutations————用于操作数据(state)</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 准备state————用于存储数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在main.js入口文件引入<code>store</code>配置项</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">// 引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/index&#x27;</span>;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    <span class="comment">// 配置store</span></span><br><span class="line">    store,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>import引入的注意事项：</p>
<ul>
<li>脚手架在读取js文件的时候会先将import置顶执行，这就导致在main中你Vue.use(Vuex)是不起作用的</li>
<li>所以要在index.js中引入Vue和Vuex并执行<code>Vue.use(Vuex);</code></li>
</ul>
</blockquote>
<h2 id="Vuex使用"><a href="#Vuex使用" class="headerlink" title="Vuex使用"></a>Vuex使用</h2><blockquote>
<p>现在想完成一个加法减法，奇数可加，等待加的功能</p>
<ul>
<li>抽离出公共数据n</li>
<li>将sum数据放置到state中</li>
<li>当然，sum数据是可以在组件实例对象的$store.state身上找到的</li>
</ul>
</blockquote>
<p><strong>Count.vue文件</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// this.$store.dispatch(&#x27;jia&#x27;,this.n);</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,<span class="variable language_">this</span>.<span class="property">n</span>);<span class="comment">//相当于跳过服务员直接报菜名给后厨</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">decrement</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// this.$store.dispatch(&#x27;jian&#x27;,this.n);</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;JIAN&#x27;</span>,<span class="variable language_">this</span>.<span class="property">n</span>);<span class="comment">//相当于跳过服务员直接报菜名给后厨</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">incrementOdd</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="variable language_">this</span>.<span class="property">n</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">incrementWait</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;jiaWite&#x27;</span>,<span class="variable language_">this</span>.<span class="property">n</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><strong>index.js文件中</strong></p>
<ul>
<li><code>actions</code>存放业务逻辑类代码<ul>
<li><code>(context, value)</code><ul>
<li>context 		<em>上下文(根据情况给你传递数据,有点像mini版的store)</em></li>
<li>value              <em>组件传递过来的值(上文中的this.n)</em></li>
</ul>
</li>
</ul>
</li>
<li><code>mutations</code>处理数据<ul>
<li>(state, value)<ul>
<li>state              <em>存放sum数据的容器</em></li>
<li>value             <em>传递的值(上文中的this.n)</em></li>
</ul>
</li>
</ul>
</li>
<li><code>state</code>存放数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">// 准备actions</span></span><br><span class="line"><span class="comment">// 用于响应组件中的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="title function_">jia</span>(<span class="params">context, value</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;actions中的jia被调用&#x27;, context, value);</span></span><br><span class="line">        <span class="comment">// context 上下文</span></span><br><span class="line">        <span class="comment">// value   组件传递过来的值</span></span><br><span class="line">        context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>, value);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">jian</span>(<span class="params">context, value</span>) &#123;</span><br><span class="line">        context.<span class="title function_">commit</span>(<span class="string">&#x27;JIAN&#x27;</span>, value);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">jiaOdd</span>(<span class="params">context, value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (context.<span class="property">state</span>.<span class="property">sum</span> % <span class="number">2</span>) &#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">jiaWite</span>(<span class="params">context, value</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>, value);</span><br><span class="line">        &#125;, <span class="number">300</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 准备Mutations</span></span><br><span class="line"><span class="comment">// 用于操作数据(state)</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="title function_">JIA</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;mutations中的JIA被调用&#x27;, state, value);</span></span><br><span class="line">        <span class="comment">// state  存放sum数据的容器</span></span><br><span class="line">        <span class="comment">// value  传递的值</span></span><br><span class="line">        state.<span class="property">sum</span> += value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">JIAN</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">        state.<span class="property">sum</span> -= value</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 准备state</span></span><br><span class="line"><span class="comment">// 用于存储数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">sum</span>: <span class="number">0</span> <span class="comment">//当前的和</span></span><br><span class="line">&#125;;</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<h3 id="getter配置项"><a href="#getter配置项" class="headerlink" title="getter配置项"></a>getter配置项</h3><ol>
<li>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工</li>
<li>在<code>store.js</code>中追加<code>getter</code>配置</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">// getters</span></span><br><span class="line"><span class="comment">// 用于将state中的数据进行加工</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">    getters</span><br><span class="line">&#125;);</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<h3 id="四个map方法的使用"><a href="#四个map方法的使用" class="headerlink" title="四个map方法的使用"></a>四个map方法的使用</h3><h4 id="1-mapState方法"><a href="#1-mapState方法" class="headerlink" title="1.mapState方法"></a>1.mapState方法</h4><blockquote>
<p>用于帮助映射<code>state</code>中的数据为计算属性</p>
<p>引入：<code>import &#123;mapState&#125; from &#39;vuex&#39;</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="attr">computed</span>:&#123;</span><br><span class="line">......</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 老写法</span></span><br><span class="line">      <span class="comment">// sum()&#123;</span></span><br><span class="line">      <span class="comment">//     return this.$store.state.sum</span></span><br><span class="line">      <span class="comment">// &#125;,</span></span><br><span class="line">      <span class="comment">// school()&#123;</span></span><br><span class="line">      <span class="comment">//     return this.$store.state.school</span></span><br><span class="line">      <span class="comment">// &#125;,</span></span><br><span class="line">      <span class="comment">// subject()&#123;</span></span><br><span class="line">      <span class="comment">//     return this.$store.state.subject</span></span><br><span class="line">      <span class="comment">// &#125;,</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//借助mapState生成计算属性，从state中读取数据。（对象写法）</span></span><br><span class="line">      ...<span class="title function_">mapState</span>(&#123;<span class="attr">he</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">svexiao</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">xveke</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">      <span class="comment">//借助mapState生成计算属性，从state中读取数据。（数组写法）</span></span><br><span class="line">      ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">      </span><br><span class="line">      ......</span><br><span class="line">  &#125;, </span><br></pre></td></tr></table></figure>

<h4 id="2-mapGetter方法"><a href="#2-mapGetter方法" class="headerlink" title="2.mapGetter方法"></a>2.mapGetter方法</h4><blockquote>
<p>用于帮助映射<code>getters</code>中的数据为计算属性</p>
<p>引入：<code>import &#123;mapState,mapGetters&#125; from &#39;vuex&#39;</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="attr">computed</span>:&#123;</span><br><span class="line">......</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 老写法</span></span><br><span class="line">      <span class="comment">// bigSum()&#123;</span></span><br><span class="line">      <span class="comment">//     return this.$store.getters.bigSum</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//借助mapGetters生成计算属性，bigSum。（对象写法）</span></span><br><span class="line">      ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&quot;bigSum&quot;</span>&#125;),</span><br><span class="line"></span><br><span class="line">      <span class="comment">//借助mapGetters生成计算属性，bigSum。（数组写法）</span></span><br><span class="line">      ...<span class="title function_">mapGetters</span>([<span class="string">&quot;bigSum&quot;</span>]),   </span><br><span class="line">      </span><br><span class="line">      ......</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h4 id="3-mapMutations方法"><a href="#3-mapMutations方法" class="headerlink" title="3.mapMutations方法"></a>3.mapMutations方法</h4><blockquote>
<p>用于帮助我们生成与<code>mapMutations</code>对话的方法，即：包含：<code>$store.commit(xxx)</code>的函数</p>
<p>引入：<code>import &#123;mapState,mapGetters,mapMutations&#125; from &#39;vuex&#39;</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 借助mapMutations生成对应的写法，方法中会调用commit去联系mutations(对象写法)</span></span><br><span class="line">     ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 借助mapMutations生成对应的写法，方法中会调用commit去联系mutations(数组写法)</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">		</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="4-mapActions方法"><a href="#4-mapActions方法" class="headerlink" title="4.mapActions方法"></a>4.mapActions方法</h4><blockquote>
<p>用于帮助我们生成与<code>actions</code>对话的方法，即包含：<code>$store.dispatch(xxx)</code>的函数</p>
<p>引入：<code>import &#123;mapState,mapGetters,mapMutations,mapActions  &#125; from &#39;vuex&#39;</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// incrementOdd()&#123;</span></span><br><span class="line">    <span class="comment">//     this.$store.dispatch(&#x27;jiaOdd&#x27;,this.n);</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// incrementWait()&#123;</span></span><br><span class="line">    <span class="comment">//     this.$store.dispatch(&#x27;jiaWite&#x27;,this.n);</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// 借助mapActions生成对应的写法，方法中会调用commit去联系Actions(对象写法)</span></span><br><span class="line">    <span class="comment">// ...mapActions(&#123;incrementOdd:&#x27;jiaOdd&#x27;,incrementWait:&#x27;jiaWite&#x27;&#125;),</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 借助mapActions生成对应的写法，方法中会调用commit去联系Actions(数组写法)</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWite&#x27;</span>]),</span><br><span class="line">		</span><br><span class="line">    ......</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>注意: mapActions与mapMutations使用时，若需要传递参数需要:在模板中绑定事件时<strong>传递好参数</strong>，否则<br>参数是事件对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;category&quot;&gt;</span><br><span class="line">        &lt;h1&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;h3&gt;当前求和放大十倍:&#123;&#123;bigSum&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;h3&gt;我在&#123;&#123;school&#125;&#125;，学习&#123;&#123;subject&#125;&#125;&lt;/h3&gt;</span><br><span class="line">      &lt;select v-model.number=&quot;n&quot;&gt;</span><br><span class="line">          &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;</span><br><span class="line">          &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">          &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">      &lt;/select&gt;</span><br><span class="line">      &lt;button @click=&quot;JIA(n)&quot;&gt;+&lt;/button&gt;</span><br><span class="line">      &lt;button @click=&quot;JIAN(n)&quot;&gt;-&lt;/button&gt;</span><br><span class="line">      &lt;button @click=&quot;jiaOdd(n)&quot;&gt;当前和为奇数再加&lt;/button&gt;</span><br><span class="line">      &lt;button @click=&quot;jiaWite(n)&quot;&gt;等一等再加&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import &#123;mapState,mapGetters,mapMutations,mapActions&#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;Count&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">         return &#123;</span><br><span class="line">             n:1,//用户选择的数字</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">        ...mapState([&#x27;sum&#x27;,&#x27;school&#x27;,&#x27;subject&#x27;]),</span><br><span class="line">        ...mapGetters([&quot;bigSum&quot;]),    </span><br><span class="line">    &#125;,  </span><br><span class="line">    methods: &#123;</span><br><span class="line">        ...mapMutations([&#x27;JIA&#x27;,&#x27;JIAN&#x27;]),</span><br><span class="line">        ...mapActions([&#x27;jiaOdd&#x27;,&#x27;jiaWite&#x27;]),</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="模块化命名空间"><a href="#模块化命名空间" class="headerlink" title="模块化命名空间"></a>模块化命名空间</h3><ol>
<li>目的：让代码好维护，让多种数据分类更加明确</li>
<li>修改<code>store.js</code></li>
<li>开启命名空间<code>namespaced: true</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求和相关的配置</span></span><br><span class="line"><span class="keyword">const</span> countOptions = &#123;</span><br><span class="line">    <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">actions</span>: &#123;...&#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;...&#125;,</span><br><span class="line">    <span class="attr">state</span>: &#123;...&#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;...&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 人员管理相关的配置</span></span><br><span class="line"><span class="keyword">const</span> peopleOptions = &#123;</span><br><span class="line">    <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">actions</span>: &#123;...&#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;...&#125;,</span><br><span class="line">    <span class="attr">state</span>: &#123;...&#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;...&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="comment">// 模块化并命名</span></span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        <span class="attr">a</span>: countOptions,</span><br><span class="line">        <span class="attr">b</span>: peopleOptions</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>开启命名空间后。组件中读取state数据</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式1：直接自己读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">a</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">// 方式2：借助mapState读取</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;a&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>])</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>开启命名空间后，组件中读取getters数据</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式1：直接自己读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;b/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">// 方式2：借助mapGetters读取</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;a&#x27;</span>,[<span class="string">&quot;bigSum&quot;</span>]),</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>开启命名空间后，组件中调用dispatch</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式1：直接自己读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;b/addPersonWang&#x27;</span>,personObj);</span><br><span class="line"><span class="comment">// 方式2：借助mapActions读取</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;a&#x27;</span>,[<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWite&#x27;</span>]),</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>开启命名空间后，组件中调用commit</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式1：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;b/ADD_PERSON&#x27;</span>,personObj);</span><br><span class="line"><span class="comment">// 方式2：借助mapMutations读取</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;a&#x27;</span>,[<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br></pre></td></tr></table></figure>

<h1 id="Vue中的路由"><a href="#Vue中的路由" class="headerlink" title="Vue中的路由"></a>Vue中的路由</h1><h2 id="vue-router的理解"><a href="#vue-router的理解" class="headerlink" title="vue-router的理解"></a>vue-router的理解</h2><blockquote>
<p>vue的一个插件库,专门用来实现SPA应用</p>
</blockquote>
<h2 id="对SPA应用的理解"><a href="#对SPA应用的理解" class="headerlink" title="对SPA应用的理解"></a>对SPA应用的理解</h2><ol>
<li>单页 Web应用(single page web application, <strong>SPA</strong>) </li>
<li>整个应用只有一 个完整的页面。</li>
<li>点击页面中的导航链接不会刷新页面，只会做页面的局部更新。</li>
<li>数据需要通过 ajax请求获取</li>
</ol>
<h2 id="路由的理解"><a href="#路由的理解" class="headerlink" title="路由的理解"></a>路由的理解</h2><h3 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由?"></a>什么是路由?</h3><ol>
<li>一个路由就是一组映射关系(key - value) </li>
<li>key 为路径value可能是function或component</li>
</ol>
<h3 id="路由分类"><a href="#路由分类" class="headerlink" title="路由分类"></a>路由分类</h3><ol>
<li><p>后端路由:</p>
</li>
<li><p>理解: value是function,用于处理客户端提交的请求</p>
</li>
<li><p>工作过程: 服务器接收到一个请求时,根据请求路径找到匹配的函数来处理请求返回响应数据。</p>
</li>
<li><p>前端路由: </p>
</li>
<li><p>理解: value是component,用于展示页面内容。</p>
</li>
<li><p>工作过程: 当浏览器的路径改变时,对应的组件就会显示。</p>
</li>
</ol>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol>
<li>安装vue-router，命令：<code>npm i vue-router</code></li>
<li>应用插件：<code>Vue.use(VueRouter)</code></li>
<li>编写router配置项：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新建router文件夹创建index.js</span></span><br><span class="line"><span class="comment">// 该文件专门用于创建路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [&#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>main.js文件编写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="comment">// 引入App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="comment">// 引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入路由器 可以省略index</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭Vue提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    <span class="comment">// 配置路由器</span></span><br><span class="line">    router</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>实现切换（active-class可配置激活的样式）<ul>
<li>to&#x3D;”&#x2F;about”  <em>前往的路由接口</em></li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 原始html中我们使用a标签实现页面跳转 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;a class=&quot;list-group-item active&quot; href=&quot;./about.html&quot;&gt;About&lt;/a&gt;</span></span><br><span class="line"><span class="comment">&lt;a class=&quot;list-group-item&quot; href=&quot;./home.html&quot;&gt;Home&lt;/a&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- vue中借助router-link标签实现路由的切换 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>指定展示位置</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 指定路由的呈现位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>app中无需引入组件就可以通过路由来在指定路由位置展示</p>
</blockquote>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol>
<li>路由组件通常存放在<code>pages</code>文件夹中，一般组件通常存放在<code>components</code>文件夹</li>
<li>通过切换，<em>隐藏</em>了的路由组件，默认是被销毁的，你需要的时候再去挂载</li>
<li>每个组件都有自己的<code>$route</code>属性，里面存储者自己的路由信息</li>
<li>整个应用只有一个router,可以通过组件的<code>$router</code>属性获取到</li>
</ol>
<h2 id="多级-嵌套-路由"><a href="#多级-嵌套-路由" class="headerlink" title="多级(嵌套)路由"></a>多级(嵌套)路由</h2><ol>
<li>配置路由规则，使用children配置项</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 一级路由</span></span><br><span class="line">    <span class="attr">routes</span>: [&#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">            <span class="comment">// 二级路由</span></span><br><span class="line">            <span class="attr">children</span>: [&#123; <span class="comment">//通过children配置子级路由</span></span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>, <span class="comment">// 此处一定不要写：/news</span></span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>, <span class="comment">// 此处一定不要写：/message</span></span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>跳转(写完整路径)<ul>
<li>to要写完整路径</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;router-link <span class="keyword">class</span>=<span class="string">&quot;list-group-item &quot;</span> active-<span class="keyword">class</span>=<span class="string">&quot;active&quot;</span> to=<span class="string">&quot;/home/news&quot;</span>&gt;<span class="title class_">News</span>&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>

<h2 id="路由的query参数"><a href="#路由的query参数" class="headerlink" title="路由的query参数"></a>路由的query参数</h2><ol>
<li>传递参数</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳转路由并携带query参数，to的字符串写法 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`/home/message/detail?id=$&#123;item.id&#125;&amp;title=$&#123;item.title&#125;`&quot;</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转路由并携带query参数，to的对象写法 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">		<span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">       path:&#x27;/home/message/detail&#x27;,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">       query:&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">           id:item.id,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">           title:item.title</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">       &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">      &#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       &#123;&#123;item.title&#125;&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>接收参数</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息编号：&#123;&#123;$route.query.id&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息编号：&#123;&#123;$route.query.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><blockquote>
<p>是对上文中<code>path:&#39;/home/message/detail&#39;,</code>参数的优化</p>
</blockquote>
<ol>
<li>给路由命名</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 一级路由</span></span><br><span class="line">    <span class="attr">routes</span>: [&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;guanyv&#x27;</span>,<span class="comment">//命名</span></span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 二级路由</span></span><br><span class="line">            <span class="attr">children</span>: [&#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line"></span><br><span class="line">                    <span class="attr">children</span>: [&#123;</span><br><span class="line">                        <span class="attr">name</span>: <span class="string">&#x27;xiangqing&#x27;</span>,<span class="comment">//命名</span></span><br><span class="line">                        <span class="attr">path</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                        <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">                    &#125;, ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>简化跳转</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//简化前</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//简化后</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">         name:&#x27;xiangqing&#x27;, //就不需要使用path而是使用name</span></span></span><br><span class="line"><span class="string"><span class="tag">         query:&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">             id:item.id,</span></span></span><br><span class="line"><span class="string"><span class="tag">             title:item.title</span></span></span><br><span class="line"><span class="string"><span class="tag">           &#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">         &#125;&quot;</span>&gt;</span></span><br><span class="line">         &#123;&#123;item.title&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="路由的params参数"><a href="#路由的params参数" class="headerlink" title="路由的params参数"></a>路由的params参数</h2><ol>
<li>配置路由，声明接收params参数</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 一级路由</span></span><br><span class="line">    <span class="attr">routes</span>: [&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;guanyv&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 二级路由</span></span><br><span class="line">            <span class="attr">children</span>: [&#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line"></span><br><span class="line">                    <span class="attr">children</span>: [&#123;</span><br><span class="line">                        <span class="attr">name</span>: <span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                        <span class="attr">path</span>: <span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">//此处要用占位符占用</span></span><br><span class="line">                        <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">                    &#125;, ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>传递参数</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳转路由并携带params参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;!-- <span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`/home/message/detail/$&#123;item.id&#125;/$&#123;item.title&#125;`&quot;</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span>&amp;nbsp;&amp;nbsp; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转路由并携带params参数，to的对象写法 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">      name:&#x27;xiangqing&#x27;,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">      params:&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">          id:item.id,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">           title:item.title</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">       &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     &#123;&#123;item.title&#125;&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置</p>
</blockquote>
<ol start="3">
<li>接收参数</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息编号：&#123;&#123;$route.params.id&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息编号：&#123;&#123;$route.params.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="路由的props配置"><a href="#路由的props配置" class="headerlink" title="路由的props配置"></a>路由的props配置</h2><p>作用：让路由组件更方便的收到参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">       <span class="attr">path</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">       <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">      <span class="comment">// props的第一种写法 对象 用的少</span></span><br><span class="line">      <span class="comment">// props的第一种写法， 值为对象，该对象中的所有key-value都会以props的形式传给Detail组件。</span></span><br><span class="line">      <span class="comment">// props: &#123; a: 1, b: &#x27;hello&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// props的第二种写法 布尔值</span></span><br><span class="line">      <span class="comment">// 若布尔值为真，就会把该路由组件收的所有preams参数以props的形式传给Detail组件。不适用于query形式</span></span><br><span class="line">      <span class="comment">// props: true</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// props的第三种写法 函数</span></span><br><span class="line">       <span class="title function_">props</span>(<span class="params">$route</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">id</span>: $route.<span class="property">query</span>.<span class="property">id</span>, <span class="attr">title</span>: $route.<span class="property">query</span>.<span class="property">title</span> &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="lt-router-link-gt-的replace属性"><a href="#lt-router-link-gt-的replace属性" class="headerlink" title="&lt;router-link&gt;的replace属性"></a><code>&lt;router-link&gt;</code>的replace属性</h2><ol>
<li>作用:控制路由跳转时操作浏览器历史记录的模式</li>
<li>浏览器的历史记录有两种写入方式:分别为push和replace，push 是追加历史记录，replace是替换当前记录。路由跳转时候默认为push</li>
<li>如何开启replace模式: <code>&lt;router-link replace ...... &gt;Nlews&lt;/router-link&gt;</code></li>
</ol>
<h2 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h2><ol>
<li>作用：不借助<code>&lt;router-link&gt;</code>实现路由跳转，让路由跳转更加灵活</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// $router的两个API</span></span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">pushShow</span>(<span class="params">m</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                <span class="attr">query</span>:&#123;</span><br><span class="line">                    <span class="attr">id</span>:m.<span class="property">id</span>,</span><br><span class="line">                    <span class="attr">title</span>:m.<span class="property">title</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//params:&#123;</span></span><br><span class="line">                <span class="comment">//    id:m.id,</span></span><br><span class="line">                <span class="comment">//    title:m.title</span></span><br><span class="line">                <span class="comment">//&#125;</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">replaceShow</span>(<span class="params">m</span>)&#123;</span><br><span class="line">        	<span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                <span class="attr">query</span>:&#123;</span><br><span class="line">                    <span class="attr">id</span>:m.<span class="property">id</span>,</span><br><span class="line">                    <span class="attr">title</span>:m.<span class="property">title</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//params:&#123;</span></span><br><span class="line">                <span class="comment">//    id:m.id,</span></span><br><span class="line">                <span class="comment">//    title:m.title</span></span><br><span class="line">                <span class="comment">//&#125;</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>类似于BOM中的浏览器历史记录前进回退功能的api</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">  <span class="title function_">back</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>();<span class="comment">//回退</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">forward</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>();<span class="comment">//前进</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">go</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(<span class="number">3</span>);<span class="comment">//正数前进几 负数后退几</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="缓存路由组件"><a href="#缓存路由组件" class="headerlink" title="缓存路由组件"></a>缓存路由组件</h2><ol>
<li>作用：让不展示的路由组件保持挂载，不被销毁</li>
<li>具体编码<ul>
<li><code>&lt;keep-alive&gt;</code>中存放要缓存的组件</li>
<li><code>include=&quot;News&quot;</code>指定你要缓存的<strong>路由</strong></li>
<li>如果没有<code>include</code>,则缓存所有这里面存放的组件</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;News&quot;</span>&gt;</span> //路由名字</span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>如果缓存的不止一个组件可以使用<code>:include=&quot;[]&quot;</code></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;[&#x27;News&#x27;,&#x27;Message&#x27;]&quot;</span>&gt;</span> //这两个组件都被缓存</span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="两个新的生命周期钩子"><a href="#两个新的生命周期钩子" class="headerlink" title="两个新的生命周期钩子"></a>两个新的生命周期钩子</h2><ol>
<li>作用：路由组件<strong>独有</strong>的两个钩子，用于捕获路由组件的激活状态</li>
<li>具体名字<ol>
<li><code>activated</code>路由组件被激活时触发</li>
<li><code>deactivated</code>路由组件失活时被触发</li>
</ol>
</li>
</ol>
<blockquote>
<p>其实还有一个生命周期钩子叫<code>nextTick</code></p>
</blockquote>
<h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><blockquote>
<ol>
<li>作用：对路由进行权限控制</li>
<li>分类：全局守卫，独享守卫，组件内守卫</li>
</ol>
</blockquote>
<h3 id="1-全局守卫"><a href="#1-全局守卫" class="headerlink" title="1.全局守卫"></a>1.全局守卫</h3><blockquote>
<p>全局前置路由守卫<br>初始化和在每一次路由器切换之前</p>
</blockquote>
<ul>
<li>对每个路由配置meta可以加以限定</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;xinwen&#x27;</span>,</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">                    <span class="attr">meta</span>: &#123; <span class="attr">isAuth</span>: <span class="literal">true</span>, <span class="attr">title</span>: <span class="string">&#x27;新闻&#x27;</span> &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// to:去哪里</span></span><br><span class="line">    <span class="comment">// from:来自哪里</span></span><br><span class="line">    <span class="comment">// next:放行</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">isAuth</span>) &#123; <span class="comment">//控制判断是否需要鉴权</span></span><br><span class="line">        <span class="comment">// 实际开发中判断的可能是token</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) == <span class="string">&#x27;found&#x27;</span>) &#123;</span><br><span class="line">            <span class="title function_">next</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;学校名不对&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2-后置守卫"><a href="#2-后置守卫" class="headerlink" title="2.后置守卫"></a>2.后置守卫</h3><blockquote>
<p>后置路由守卫</p>
<p>初始化和在每一次路由器切换之后</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-独享路由守卫"><a href="#3-独享路由守卫" class="headerlink" title="3.独享路由守卫"></a>3.独享路由守卫</h3><blockquote>
<p>某一个路由所独享的守卫</p>
<ul>
<li>为这个路由添加beforeEnter方法</li>
<li>和beforeEach一样的写法</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">                 <span class="attr">name</span>: <span class="string">&#x27;xinwen&#x27;</span>,</span><br><span class="line">                 <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                 <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">                 <span class="attr">meta</span>: &#123; <span class="attr">isAuth</span>: <span class="literal">true</span>, <span class="attr">title</span>: <span class="string">&#x27;新闻&#x27;</span> &#125;,</span><br><span class="line">                 <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">                     <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">isAuth</span>) &#123; <span class="comment">//控制判断是否需要鉴权</span></span><br><span class="line">                         <span class="keyword">if</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) == <span class="string">&#x27;found&#x27;</span>) &#123;</span><br><span class="line">                             <span class="title function_">next</span>();</span><br><span class="line">                         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                             <span class="title function_">alert</span>(<span class="string">&#x27;学校名不对&#x27;</span>);</span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                         <span class="title function_">next</span>();</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;,</span><br><span class="line">             &#125;,</span><br></pre></td></tr></table></figure>

<h3 id="4-组件路由守卫"><a href="#4-组件路由守卫" class="headerlink" title="4.组件路由守卫"></a>4.组件路由守卫</h3><p>写在组件内部的路由守卫</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过路由规则 进入该组件时被调用</span></span><br><span class="line"><span class="title function_">beforeRouteEnter</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">isAuth</span>) &#123; <span class="comment">//控制判断是否需要鉴权</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) == <span class="string">&#x27;found&#x27;</span>) &#123;</span><br><span class="line">             <span class="title function_">next</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="title function_">alert</span>(<span class="string">&#x27;学校名不对&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="title function_">next</span>();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 通过路由规则，离开该组件时被调用 -----不要和后置路由守卫搞混了</span></span><br><span class="line"><span class="title function_">beforeRouteLeave</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">next</span>();<span class="comment">//放行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="路由器的两种工作模式"><a href="#路由器的两种工作模式" class="headerlink" title="路由器的两种工作模式"></a>路由器的两种工作模式</h2><ol>
<li><p>对于一个url来说，什么是hash值?             <em>#及其后面的内容就是hash值。</em></p>
</li>
<li><p>hash值不会包含在HTTP请求中，即: hash值不会带给服务器。</p>
</li>
<li><p>hash模式:</p>
</li>
<li><p>地址中永远带着#号,不美观。</p>
</li>
<li><p>若以后将地址通过第三方手机app分享,若app校验严格， 则地址会被标记为不合法。</p>
</li>
<li><p>兼容性较好。</p>
</li>
<li><p>history模式:</p>
</li>
<li><p>地址干净，美观。</p>
</li>
<li><p>兼容性和hash模式相比略差。</p>
</li>
<li><p>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</p>
</li>
</ol>
<h3 id="服务器的上线部署"><a href="#服务器的上线部署" class="headerlink" title="服务器的上线部署"></a>服务器的上线部署</h3><blockquote>
<ol>
<li>当前端工作完成时需要对工程进行打包<code>npm run build</code></li>
<li>打包好的文件传给后端人员</li>
<li>后端人员将文件放进static或者public文件中</li>
<li>对于history模式的路由，后端人员可以通过npm包<code>connect-history-api-fallback</code>加以解决</li>
</ol>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是一台小服务器</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入connect-history-api-fallback</span></span><br><span class="line"><span class="keyword">const</span> history = <span class="built_in">require</span>(<span class="string">&#x27;connect-history-api-fallback&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用history</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">history</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(__dirname + <span class="string">&#x27;/static&#x27;</span>))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/person&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">5005</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Vue-UI组件库"><a href="#Vue-UI组件库" class="headerlink" title="Vue UI组件库"></a>Vue UI组件库</h1><h2 id="移动端常用UI组件库"><a href="#移动端常用UI组件库" class="headerlink" title="移动端常用UI组件库"></a>移动端常用UI组件库</h2><ol>
<li>Vant <a href="https://youzan.github.io/vant">https://youzan.github.io/vant</a></li>
<li>Cube UI <a href="https://didi.github.io/cube-ui">https://didi.github.io/cube-ui</a></li>
<li>Mint UI <a href="http://mint-ui.github.io/">http://mint-ui.github.io</a></li>
</ol>
<h2 id="PC端常用UI组件库"><a href="#PC端常用UI组件库" class="headerlink" title="PC端常用UI组件库"></a>PC端常用UI组件库</h2><ol>
<li>Element UI <a href="https://element.eleme.cn/">https://element.eleme.cn</a></li>
<li>2.IView UI <a href="https://www.iviewui.com/">https://www.iviewui.com</a></li>
</ol>
<h2 id="以Element-UI为例"><a href="#以Element-UI为例" class="headerlink" title="以Element UI为例"></a>以Element UI为例</h2><blockquote>
<p>安装<code>npm i element-ui</code></p>
</blockquote>
<h3 id="1-完整引入"><a href="#1-完整引入" class="headerlink" title="1.完整引入"></a>1.完整引入</h3><p><strong>main.js文件中</strong></p>
<blockquote>
<p>弊端：文件过大</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完整引入</span></span><br><span class="line"><span class="comment">// 引入ElementUI组件库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="comment">// 引入E样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"><span class="comment">// 使用El</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭Vue提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2-按需引入"><a href="#2-按需引入" class="headerlink" title="2.按需引入"></a>2.按需引入</h3><ol>
<li>安装babel-plugin-component <code>npm install babel-plugin-component</code></li>
<li>为<code>babel.config.js</code>添加配置<ol>
<li>官网中写的是<code>.babelrc</code>,vue2.0中要更改<code>babel.config.js</code></li>
</ol>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">presets</span>: [</span><br><span class="line">        <span class="string">&#x27;@vue/cli-plugin-babel/preset&#x27;</span>, </span><br><span class="line">        [<span class="string">&quot;@babel/preset-env&quot;</span>, &#123; <span class="string">&quot;modules&quot;</span>: <span class="literal">false</span> &#125;]</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;component&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;libraryName&quot;</span>: <span class="string">&quot;element-ui&quot;</span>,</span><br><span class="line">                <span class="string">&quot;styleLibraryName&quot;</span>: <span class="string">&quot;theme-chalk&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>更改mian.js文件</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按需引入</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span>, <span class="title class_">Row</span>, <span class="title class_">DatePicker</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;el-button&#x27;</span>, <span class="title class_">Button</span>); <span class="comment">//第一个参数是名字，如果你更改了组件也要更改</span></span><br><span class="line"><span class="comment">/* 或写为</span></span><br><span class="line"><span class="comment"> * Vue.use(Button)</span></span><br><span class="line"><span class="comment"> * Vue.use(Select)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭Vue提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
</search>
